
PWM_3LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003900  08003900  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003900  08003900  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003900  08003900  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003900  08003900  00013900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08003978  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003978  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb27  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e1  00000000  00000000  0002bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183fe  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccf4  00000000  00000000  0004712e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b95f  00000000  00000000  00053e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df781  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  000df7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003740 	.word	0x08003740

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003740 	.word	0x08003740

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f002 f8e7 	bl	8002330 <HAL_UART_Transmit>
  if (ch == '\n')
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f002 f8dd 	bl	8002330 <HAL_UART_Transmit>
  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000d4 	.word	0x200000d4
 8000184:	08003758 	.word	0x08003758

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fbac 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f894 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f98e 	bl	80004b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000198:	f000 f8d6 	bl	8000348 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800019c:	f000 f960 	bl	8000460 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001a0:	2100      	movs	r1, #0
 80001a2:	483c      	ldr	r0, [pc, #240]	; (8000294 <main+0x10c>)
 80001a4:	f001 fb46 	bl	8001834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80001a8:	2104      	movs	r1, #4
 80001aa:	483a      	ldr	r0, [pc, #232]	; (8000294 <main+0x10c>)
 80001ac:	f001 fb42 	bl	8001834 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80001b0:	2108      	movs	r1, #8
 80001b2:	4838      	ldr	r0, [pc, #224]	; (8000294 <main+0x10c>)
 80001b4:	f001 fb3e 	bl	8001834 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  input_arr = rand()%10000;
 80001b8:	f002 fa84 	bl	80026c4 <rand>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a36      	ldr	r2, [pc, #216]	; (8000298 <main+0x110>)
 80001c0:	fb82 1203 	smull	r1, r2, r2, r3
 80001c4:	1311      	asrs	r1, r2, #12
 80001c6:	17da      	asrs	r2, r3, #31
 80001c8:	1a8a      	subs	r2, r1, r2
 80001ca:	f242 7110 	movw	r1, #10000	; 0x2710
 80001ce:	fb01 f202 	mul.w	r2, r1, r2
 80001d2:	1a9a      	subs	r2, r3, r2
 80001d4:	b292      	uxth	r2, r2
 80001d6:	4b31      	ldr	r3, [pc, #196]	; (800029c <main+0x114>)
 80001d8:	801a      	strh	r2, [r3, #0]
	  input_ccr1 = rand()%input_arr;
 80001da:	f002 fa73 	bl	80026c4 <rand>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a2e      	ldr	r2, [pc, #184]	; (800029c <main+0x114>)
 80001e2:	8812      	ldrh	r2, [r2, #0]
 80001e4:	fb93 f1f2 	sdiv	r1, r3, r2
 80001e8:	fb01 f202 	mul.w	r2, r1, r2
 80001ec:	1a9b      	subs	r3, r3, r2
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b2b      	ldr	r3, [pc, #172]	; (80002a0 <main+0x118>)
 80001f2:	801a      	strh	r2, [r3, #0]
	  input_ccr2 = rand()%input_arr;
 80001f4:	f002 fa66 	bl	80026c4 <rand>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4a28      	ldr	r2, [pc, #160]	; (800029c <main+0x114>)
 80001fc:	8812      	ldrh	r2, [r2, #0]
 80001fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8000202:	fb01 f202 	mul.w	r2, r1, r2
 8000206:	1a9b      	subs	r3, r3, r2
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <main+0x11c>)
 800020c:	801a      	strh	r2, [r3, #0]
	  input_ccr3 = rand()%input_arr;
 800020e:	f002 fa59 	bl	80026c4 <rand>
 8000212:	4603      	mov	r3, r0
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <main+0x114>)
 8000216:	8812      	ldrh	r2, [r2, #0]
 8000218:	fb93 f1f2 	sdiv	r1, r3, r2
 800021c:	fb01 f202 	mul.w	r2, r1, r2
 8000220:	1a9b      	subs	r3, r3, r2
 8000222:	b29a      	uxth	r2, r3
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <main+0x120>)
 8000226:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_AUTORELOAD(&htim3, input_arr);
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <main+0x114>)
 800022a:	881a      	ldrh	r2, [r3, #0]
 800022c:	4b19      	ldr	r3, [pc, #100]	; (8000294 <main+0x10c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	62da      	str	r2, [r3, #44]	; 0x2c
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <main+0x114>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <main+0x10c>)
 800023a:	60da      	str	r2, [r3, #12]
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,input_ccr1);
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <main+0x118>)
 800023e:	881a      	ldrh	r2, [r3, #0]
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <main+0x10c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,input_ccr2);
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <main+0x11c>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <main+0x10c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	639a      	str	r2, [r3, #56]	; 0x38
     __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3,input_ccr3);
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <main+0x120>)
 8000252:	881a      	ldrh	r2, [r3, #0]
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <main+0x10c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	63da      	str	r2, [r3, #60]	; 0x3c
     printf("arr : %d\n\n", input_arr);
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0x114>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	4812      	ldr	r0, [pc, #72]	; (80002ac <main+0x124>)
 8000262:	f002 fa17 	bl	8002694 <iprintf>
     printf("ccr1 : %d\n\n", input_ccr1);
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0x118>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	4619      	mov	r1, r3
 800026c:	4810      	ldr	r0, [pc, #64]	; (80002b0 <main+0x128>)
 800026e:	f002 fa11 	bl	8002694 <iprintf>
     printf("ccr2 : %d\n\n", input_ccr2);
 8000272:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <main+0x11c>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	4619      	mov	r1, r3
 8000278:	480e      	ldr	r0, [pc, #56]	; (80002b4 <main+0x12c>)
 800027a:	f002 fa0b 	bl	8002694 <iprintf>
     printf("ccr3 : %d\n\n", input_ccr3);
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <main+0x120>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	4619      	mov	r1, r3
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <main+0x130>)
 8000286:	f002 fa05 	bl	8002694 <iprintf>

     HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	; 0x64
 800028c:	f000 fb8e 	bl	80009ac <HAL_Delay>
	  input_arr = rand()%10000;
 8000290:	e792      	b.n	80001b8 <main+0x30>
 8000292:	bf00      	nop
 8000294:	2000008c 	.word	0x2000008c
 8000298:	68db8bad 	.word	0x68db8bad
 800029c:	2000011c 	.word	0x2000011c
 80002a0:	2000011e 	.word	0x2000011e
 80002a4:	20000120 	.word	0x20000120
 80002a8:	20000122 	.word	0x20000122
 80002ac:	0800375c 	.word	0x0800375c
 80002b0:	08003768 	.word	0x08003768
 80002b4:	08003774 	.word	0x08003774
 80002b8:	08003780 	.word	0x08003780

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	; 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 f9da 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002de:	2301      	movs	r3, #1
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fddd 	bl	8000ec4 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000310:	f000 f8fe 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 f84a 	bl	80013c8 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033a:	f000 f8e9 	bl	8000510 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3740      	adds	r7, #64	; 0x40
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08e      	sub	sp, #56	; 0x38
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035c:	f107 0320 	add.w	r3, r7, #32
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]
 8000376:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000378:	4b37      	ldr	r3, [pc, #220]	; (8000458 <MX_TIM3_Init+0x110>)
 800037a:	4a38      	ldr	r2, [pc, #224]	; (800045c <MX_TIM3_Init+0x114>)
 800037c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800037e:	4b36      	ldr	r3, [pc, #216]	; (8000458 <MX_TIM3_Init+0x110>)
 8000380:	2247      	movs	r2, #71	; 0x47
 8000382:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000384:	4b34      	ldr	r3, [pc, #208]	; (8000458 <MX_TIM3_Init+0x110>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800038a:	4b33      	ldr	r3, [pc, #204]	; (8000458 <MX_TIM3_Init+0x110>)
 800038c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000390:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <MX_TIM3_Init+0x110>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000398:	4b2f      	ldr	r3, [pc, #188]	; (8000458 <MX_TIM3_Init+0x110>)
 800039a:	2280      	movs	r2, #128	; 0x80
 800039c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800039e:	482e      	ldr	r0, [pc, #184]	; (8000458 <MX_TIM3_Init+0x110>)
 80003a0:	f001 f9a0 	bl	80016e4 <HAL_TIM_Base_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80003aa:	f000 f8b1 	bl	8000510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b8:	4619      	mov	r1, r3
 80003ba:	4827      	ldr	r0, [pc, #156]	; (8000458 <MX_TIM3_Init+0x110>)
 80003bc:	f001 fb9e 	bl	8001afc <HAL_TIM_ConfigClockSource>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80003c6:	f000 f8a3 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ca:	4823      	ldr	r0, [pc, #140]	; (8000458 <MX_TIM3_Init+0x110>)
 80003cc:	f001 f9d9 	bl	8001782 <HAL_TIM_PWM_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80003d6:	f000 f89b 	bl	8000510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e2:	f107 0320 	add.w	r3, r7, #32
 80003e6:	4619      	mov	r1, r3
 80003e8:	481b      	ldr	r0, [pc, #108]	; (8000458 <MX_TIM3_Init+0x110>)
 80003ea:	f001 fef3 	bl	80021d4 <HAL_TIMEx_MasterConfigSynchronization>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80003f4:	f000 f88c 	bl	8000510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f8:	2360      	movs	r3, #96	; 0x60
 80003fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	4619      	mov	r1, r3
 800040e:	4812      	ldr	r0, [pc, #72]	; (8000458 <MX_TIM3_Init+0x110>)
 8000410:	f001 fab2 	bl	8001978 <HAL_TIM_PWM_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800041a:	f000 f879 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2204      	movs	r2, #4
 8000422:	4619      	mov	r1, r3
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <MX_TIM3_Init+0x110>)
 8000426:	f001 faa7 	bl	8001978 <HAL_TIM_PWM_ConfigChannel>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000430:	f000 f86e 	bl	8000510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2208      	movs	r2, #8
 8000438:	4619      	mov	r1, r3
 800043a:	4807      	ldr	r0, [pc, #28]	; (8000458 <MX_TIM3_Init+0x110>)
 800043c:	f001 fa9c 	bl	8001978 <HAL_TIM_PWM_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000446:	f000 f863 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <MX_TIM3_Init+0x110>)
 800044c:	f000 f8a6 	bl	800059c <HAL_TIM_MspPostInit>

}
 8000450:	bf00      	nop
 8000452:	3738      	adds	r7, #56	; 0x38
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000008c 	.word	0x2000008c
 800045c:	40000400 	.word	0x40000400

08000460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000466:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <MX_USART2_UART_Init+0x50>)
 8000468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 800046c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000498:	f001 fefa 	bl	8002290 <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004a2:	f000 f835 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000d4 	.word	0x200000d4
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_GPIO_Init+0x58>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <MX_GPIO_Init+0x58>)
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_GPIO_Init+0x58>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0310 	and.w	r3, r3, #16
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_GPIO_Init+0x58>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <MX_GPIO_Init+0x58>)
 80004d8:	f043 0320 	orr.w	r3, r3, #32
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_GPIO_Init+0x58>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0320 	and.w	r3, r3, #32
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_GPIO_Init+0x58>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <MX_GPIO_Init+0x58>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_GPIO_Init+0x58>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_MspInit+0x40>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a0d      	ldr	r2, [pc, #52]	; (800055c <HAL_MspInit+0x40>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_MspInit+0x40>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_MspInit+0x40>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_MspInit+0x40>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_MspInit+0x40>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a09      	ldr	r2, [pc, #36]	; (8000594 <HAL_TIM_Base_MspInit+0x34>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d10b      	bne.n	800058a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_TIM_Base_MspInit+0x38>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_TIM_Base_MspInit+0x38>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_TIM_Base_MspInit+0x38>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40000400 	.word	0x40000400
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a19      	ldr	r2, [pc, #100]	; (800061c <HAL_TIM_MspPostInit+0x80>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d12a      	bne.n	8000612 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_TIM_MspPostInit+0x84>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_TIM_MspPostInit+0x84>)
 80005c2:	f043 0310 	orr.w	r3, r3, #16
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_TIM_MspPostInit+0x84>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0310 	and.w	r3, r3, #16
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80005d4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80005d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2302      	movs	r3, #2
 80005e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	480e      	ldr	r0, [pc, #56]	; (8000624 <HAL_TIM_MspPostInit+0x88>)
 80005ea:	f000 fae7 	bl	8000bbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_TIM_MspPostInit+0x8c>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	61fb      	str	r3, [r7, #28]
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000602:	61fb      	str	r3, [r7, #28]
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_TIM_MspPostInit+0x8c>)
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40000400 	.word	0x40000400
 8000620:	40021000 	.word	0x40021000
 8000624:	40011000 	.word	0x40011000
 8000628:	40010000 	.word	0x40010000

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <HAL_UART_MspInit+0x88>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d12f      	bne.n	80006ac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	61d3      	str	r3, [r2, #28]
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067c:	2304      	movs	r3, #4
 800067e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <HAL_UART_MspInit+0x90>)
 8000690:	f000 fa94 	bl	8000bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000694:	2308      	movs	r3, #8
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_UART_MspInit+0x90>)
 80006a8:	f000 fa88 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40004400 	.word	0x40004400
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000706:	f000 f935 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}

0800070e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  return 1;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <_kill>:

int _kill(int pid, int sig)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000726:	f001 ff83 	bl	8002630 <__errno>
 800072a:	4603      	mov	r3, r0
 800072c:	2216      	movs	r2, #22
 800072e:	601a      	str	r2, [r3, #0]
  return -1;
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_exit>:

void _exit (int status)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffe7 	bl	800071c <_kill>
  while (1) {}    /* Make sure we hang here */
 800074e:	e7fe      	b.n	800074e <_exit+0x12>

08000750 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e00a      	b.n	8000778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000762:	f3af 8000 	nop.w
 8000766:	4601      	mov	r1, r0
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	60ba      	str	r2, [r7, #8]
 800076e:	b2ca      	uxtb	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	3301      	adds	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	429a      	cmp	r2, r3
 800077e:	dbf0      	blt.n	8000762 <_read+0x12>
  }

  return len;
 8000780:	687b      	ldr	r3, [r7, #4]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e009      	b.n	80007b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	60ba      	str	r2, [r7, #8]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fcd1 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf1      	blt.n	800079c <_write+0x12>
  }
  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_close>:

int _close(int file)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e8:	605a      	str	r2, [r3, #4]
  return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <_isatty>:

int _isatty(int file)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800080a:	b480      	push	{r7}
 800080c:	b085      	sub	sp, #20
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
	...

08000824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800082c:	4a14      	ldr	r2, [pc, #80]	; (8000880 <_sbrk+0x5c>)
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <_sbrk+0x60>)
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d102      	bne.n	8000846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <_sbrk+0x64>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <_sbrk+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	429a      	cmp	r2, r3
 8000852:	d207      	bcs.n	8000864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000854:	f001 feec 	bl	8002630 <__errno>
 8000858:	4603      	mov	r3, r0
 800085a:	220c      	movs	r2, #12
 800085c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	e009      	b.n	8000878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <_sbrk+0x64>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <_sbrk+0x64>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4413      	add	r3, r2
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <_sbrk+0x64>)
 8000874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000876:	68fb      	ldr	r3, [r7, #12]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20005000 	.word	0x20005000
 8000884:	00000400 	.word	0x00000400
 8000888:	20000124 	.word	0x20000124
 800088c:	20000140 	.word	0x20000140

08000890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff fff8 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a2:	490c      	ldr	r1, [pc, #48]	; (80008d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a09      	ldr	r2, [pc, #36]	; (80008dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b8:	4c09      	ldr	r4, [pc, #36]	; (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f001 feb9 	bl	800263c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fc5d 	bl	8000188 <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008d8:	08003908 	.word	0x08003908
  ldr r2, =_sbss
 80008dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008e0:	2000013c 	.word	0x2000013c

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	; (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f92b 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fe0a 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f935 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f90b 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000008 	.word	0x20000008
 8000994:	20000128 	.word	0x20000128

08000998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	20000128 	.word	0x20000128

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff fff0 	bl	8000998 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffe0 	bl	8000998 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff90 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff49 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff5e 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff90 	bl	8000aac <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5f 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffb0 	bl	8000b10 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b08b      	sub	sp, #44	; 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e169      	b.n	8000ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f040 8158 	bne.w	8000e9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a9a      	ldr	r2, [pc, #616]	; (8000e5c <HAL_GPIO_Init+0x2a0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d05e      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a98      	ldr	r2, [pc, #608]	; (8000e5c <HAL_GPIO_Init+0x2a0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d875      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000bfe:	4a98      	ldr	r2, [pc, #608]	; (8000e60 <HAL_GPIO_Init+0x2a4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d058      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c04:	4a96      	ldr	r2, [pc, #600]	; (8000e60 <HAL_GPIO_Init+0x2a4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d86f      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c0a:	4a96      	ldr	r2, [pc, #600]	; (8000e64 <HAL_GPIO_Init+0x2a8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d052      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c10:	4a94      	ldr	r2, [pc, #592]	; (8000e64 <HAL_GPIO_Init+0x2a8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d869      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c16:	4a94      	ldr	r2, [pc, #592]	; (8000e68 <HAL_GPIO_Init+0x2ac>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d04c      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c1c:	4a92      	ldr	r2, [pc, #584]	; (8000e68 <HAL_GPIO_Init+0x2ac>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d863      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c22:	4a92      	ldr	r2, [pc, #584]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d046      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c28:	4a90      	ldr	r2, [pc, #576]	; (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d85d      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c2e:	2b12      	cmp	r3, #18
 8000c30:	d82a      	bhi.n	8000c88 <HAL_GPIO_Init+0xcc>
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d859      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <HAL_GPIO_Init+0x80>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000c91 	.word	0x08000c91
 8000c44:	08000ca3 	.word	0x08000ca3
 8000c48:	08000ce5 	.word	0x08000ce5
 8000c4c:	08000ceb 	.word	0x08000ceb
 8000c50:	08000ceb 	.word	0x08000ceb
 8000c54:	08000ceb 	.word	0x08000ceb
 8000c58:	08000ceb 	.word	0x08000ceb
 8000c5c:	08000ceb 	.word	0x08000ceb
 8000c60:	08000ceb 	.word	0x08000ceb
 8000c64:	08000ceb 	.word	0x08000ceb
 8000c68:	08000ceb 	.word	0x08000ceb
 8000c6c:	08000ceb 	.word	0x08000ceb
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000ceb 	.word	0x08000ceb
 8000c78:	08000ceb 	.word	0x08000ceb
 8000c7c:	08000ceb 	.word	0x08000ceb
 8000c80:	08000c99 	.word	0x08000c99
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	4a79      	ldr	r2, [pc, #484]	; (8000e70 <HAL_GPIO_Init+0x2b4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8e:	e02c      	b.n	8000cea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e029      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e024      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e01f      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e01a      	b.n	8000cec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e013      	b.n	8000cec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d105      	bne.n	8000cd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	611a      	str	r2, [r3, #16]
          break;
 8000cd6:	e009      	b.n	8000cec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	615a      	str	r2, [r3, #20]
          break;
 8000ce2:	e003      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e000      	b.n	8000cec <HAL_GPIO_Init+0x130>
          break;
 8000cea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2bff      	cmp	r3, #255	; 0xff
 8000cf0:	d801      	bhi.n	8000cf6 <HAL_GPIO_Init+0x13a>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	e001      	b.n	8000cfa <HAL_GPIO_Init+0x13e>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2bff      	cmp	r3, #255	; 0xff
 8000d00:	d802      	bhi.n	8000d08 <HAL_GPIO_Init+0x14c>
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x152>
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	3b08      	subs	r3, #8
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	210f      	movs	r1, #15
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	6a39      	ldr	r1, [r7, #32]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80b1 	beq.w	8000e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a4c      	ldr	r2, [pc, #304]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d54:	4a48      	ldr	r2, [pc, #288]	; (8000e78 <HAL_GPIO_Init+0x2bc>)
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a40      	ldr	r2, [pc, #256]	; (8000e7c <HAL_GPIO_Init+0x2c0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d013      	beq.n	8000da8 <HAL_GPIO_Init+0x1ec>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3f      	ldr	r2, [pc, #252]	; (8000e80 <HAL_GPIO_Init+0x2c4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00d      	beq.n	8000da4 <HAL_GPIO_Init+0x1e8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	; (8000e84 <HAL_GPIO_Init+0x2c8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d007      	beq.n	8000da0 <HAL_GPIO_Init+0x1e4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d101      	bne.n	8000d9c <HAL_GPIO_Init+0x1e0>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e004      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000da8:	2300      	movs	r3, #0
 8000daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dba:	492f      	ldr	r1, [pc, #188]	; (8000e78 <HAL_GPIO_Init+0x2bc>)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	492c      	ldr	r1, [pc, #176]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4928      	ldr	r1, [pc, #160]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	4922      	ldr	r1, [pc, #136]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60cb      	str	r3, [r1, #12]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	491e      	ldr	r1, [pc, #120]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4918      	ldr	r1, [pc, #96]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4914      	ldr	r1, [pc, #80]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d021      	beq.n	8000e90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	490e      	ldr	r1, [pc, #56]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	600b      	str	r3, [r1, #0]
 8000e58:	e021      	b.n	8000e9e <HAL_GPIO_Init+0x2e2>
 8000e5a:	bf00      	nop
 8000e5c:	10320000 	.word	0x10320000
 8000e60:	10310000 	.word	0x10310000
 8000e64:	10220000 	.word	0x10220000
 8000e68:	10210000 	.word	0x10210000
 8000e6c:	10120000 	.word	0x10120000
 8000e70:	10110000 	.word	0x10110000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40011400 	.word	0x40011400
 8000e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4909      	ldr	r1, [pc, #36]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f47f ae8e 	bne.w	8000bd0 <HAL_GPIO_Init+0x14>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	372c      	adds	r7, #44	; 0x2c
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e272      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8087 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee4:	4b92      	ldr	r3, [pc, #584]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d00c      	beq.n	8000f0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef0:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d112      	bne.n	8000f22 <HAL_RCC_OscConfig+0x5e>
 8000efc:	4b8c      	ldr	r3, [pc, #560]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f08:	d10b      	bne.n	8000f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0a:	4b89      	ldr	r3, [pc, #548]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d06c      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x12c>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d168      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e24c      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d106      	bne.n	8000f3a <HAL_RCC_OscConfig+0x76>
 8000f2c:	4b80      	ldr	r3, [pc, #512]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a7f      	ldr	r2, [pc, #508]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e02e      	b.n	8000f98 <HAL_RCC_OscConfig+0xd4>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x98>
 8000f42:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a7a      	ldr	r2, [pc, #488]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b78      	ldr	r3, [pc, #480]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a77      	ldr	r2, [pc, #476]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e01d      	b.n	8000f98 <HAL_RCC_OscConfig+0xd4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0xbc>
 8000f66:	4b72      	ldr	r3, [pc, #456]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a71      	ldr	r2, [pc, #452]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b6f      	ldr	r3, [pc, #444]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6e      	ldr	r2, [pc, #440]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_RCC_OscConfig+0xd4>
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a6a      	ldr	r2, [pc, #424]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a67      	ldr	r2, [pc, #412]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fcfa 	bl	8000998 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fcf6 	bl	8000998 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e200      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xe4>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fce6 	bl	8000998 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fce2 	bl	8000998 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1ec      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x10c>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d063      	beq.n	80010c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffe:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b08      	cmp	r3, #8
 8001014:	d11c      	bne.n	8001050 <HAL_RCC_OscConfig+0x18c>
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_RCC_OscConfig+0x176>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d001      	beq.n	800103a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e1c0      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4939      	ldr	r1, [pc, #228]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104e:	e03a      	b.n	80010c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001058:	4b36      	ldr	r3, [pc, #216]	; (8001134 <HAL_RCC_OscConfig+0x270>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff fc9b 	bl	8000998 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fc97 	bl	8000998 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e1a1      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4927      	ldr	r1, [pc, #156]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_RCC_OscConfig+0x270>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc7a 	bl	8000998 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fc76 	bl	8000998 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e180      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d03a      	beq.n	8001148 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d019      	beq.n	800110e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_RCC_OscConfig+0x274>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e0:	f7ff fc5a 	bl	8000998 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc56 	bl	8000998 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e160      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 face 	bl	80016a8 <RCC_Delay>
 800110c:	e01c      	b.n	8001148 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_RCC_OscConfig+0x274>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001114:	f7ff fc40 	bl	8000998 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111a:	e00f      	b.n	800113c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fc3c 	bl	8000998 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d908      	bls.n	800113c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e146      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	42420000 	.word	0x42420000
 8001138:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113c:	4b92      	ldr	r3, [pc, #584]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1e9      	bne.n	800111c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80a6 	beq.w	80012a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10d      	bne.n	8001182 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b88      	ldr	r3, [pc, #544]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a87      	ldr	r2, [pc, #540]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b85      	ldr	r3, [pc, #532]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800117e:	2301      	movs	r3, #1
 8001180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001182:	4b82      	ldr	r3, [pc, #520]	; (800138c <HAL_RCC_OscConfig+0x4c8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d118      	bne.n	80011c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800118e:	4b7f      	ldr	r3, [pc, #508]	; (800138c <HAL_RCC_OscConfig+0x4c8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7e      	ldr	r2, [pc, #504]	; (800138c <HAL_RCC_OscConfig+0x4c8>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119a:	f7ff fbfd 	bl	8000998 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a2:	f7ff fbf9 	bl	8000998 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b64      	cmp	r3, #100	; 0x64
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e103      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b4:	4b75      	ldr	r3, [pc, #468]	; (800138c <HAL_RCC_OscConfig+0x4c8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f0      	beq.n	80011a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x312>
 80011c8:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	e02d      	b.n	8001232 <HAL_RCC_OscConfig+0x36e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x334>
 80011de:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a69      	ldr	r2, [pc, #420]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b67      	ldr	r3, [pc, #412]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a66      	ldr	r2, [pc, #408]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6213      	str	r3, [r2, #32]
 80011f6:	e01c      	b.n	8001232 <HAL_RCC_OscConfig+0x36e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d10c      	bne.n	800121a <HAL_RCC_OscConfig+0x356>
 8001200:	4b61      	ldr	r3, [pc, #388]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4a60      	ldr	r2, [pc, #384]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6213      	str	r3, [r2, #32]
 800120c:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	4a5d      	ldr	r2, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6213      	str	r3, [r2, #32]
 8001218:	e00b      	b.n	8001232 <HAL_RCC_OscConfig+0x36e>
 800121a:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a5a      	ldr	r2, [pc, #360]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	4b58      	ldr	r3, [pc, #352]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	4a57      	ldr	r2, [pc, #348]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	f023 0304 	bic.w	r3, r3, #4
 8001230:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d015      	beq.n	8001266 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fbad 	bl	8000998 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fba9 	bl	8000998 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0b1      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ee      	beq.n	8001242 <HAL_RCC_OscConfig+0x37e>
 8001264:	e014      	b.n	8001290 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	f7ff fb97 	bl	8000998 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	e00a      	b.n	8001284 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff fb93 	bl	8000998 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f241 3288 	movw	r2, #5000	; 0x1388
 800127c:	4293      	cmp	r3, r2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e09b      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1ee      	bne.n	800126e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d105      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001296:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a3b      	ldr	r2, [pc, #236]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8087 	beq.w	80013ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d061      	beq.n	800137c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d146      	bne.n	800134e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_RCC_OscConfig+0x4cc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fb67 	bl	8000998 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff fb63 	bl	8000998 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e06d      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f0      	bne.n	80012ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d108      	bne.n	8001308 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	4921      	ldr	r1, [pc, #132]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a19      	ldr	r1, [r3, #32]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	430b      	orrs	r3, r1
 800131a:	491b      	ldr	r1, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_RCC_OscConfig+0x4cc>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fb37 	bl	8000998 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff fb33 	bl	8000998 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e03d      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x46a>
 800134c:	e035      	b.n	80013ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_RCC_OscConfig+0x4cc>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fb20 	bl	8000998 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135c:	f7ff fb1c 	bl	8000998 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e026      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x498>
 800137a:	e01e      	b.n	80013ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d107      	bne.n	8001394 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e019      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
 8001390:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x500>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0d0      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b6a      	ldr	r3, [pc, #424]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d910      	bls.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b67      	ldr	r3, [pc, #412]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4965      	ldr	r1, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800142e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d040      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d115      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e073      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3d      	ldr	r3, [pc, #244]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e06b      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4936      	ldr	r1, [pc, #216]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fa6e 	bl	8000998 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fa6a 	bl	8000998 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e053      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d210      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 0207 	bic.w	r2, r3, #7
 80014fe:	4922      	ldr	r1, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	4313      	orrs	r3, r2
 8001504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	490a      	ldr	r1, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1cc>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f9cc 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000
 800158c:	40021000 	.word	0x40021000
 8001590:	0800378c 	.word	0x0800378c
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d002      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x30>
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_GetSysClockFreq+0x36>
 80015ca:	e027      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ce:	613b      	str	r3, [r7, #16]
      break;
 80015d0:	e027      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0c9b      	lsrs	r3, r3, #18
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015dc:	5cd3      	ldrb	r3, [r2, r3]
 80015de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d010      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_RCC_GetSysClockFreq+0x94>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0c5b      	lsrs	r3, r3, #17
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <HAL_RCC_GetSysClockFreq+0xa0>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_RCC_GetSysClockFreq+0x98>)
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e004      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	613b      	str	r3, [r7, #16]
      break;
 800161a:	e002      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetSysClockFreq+0x98>)
 800161e:	613b      	str	r3, [r7, #16]
      break;
 8001620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001622:	693b      	ldr	r3, [r7, #16]
}
 8001624:	4618      	mov	r0, r3
 8001626:	371c      	adds	r7, #28
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	007a1200 	.word	0x007a1200
 8001638:	080037a4 	.word	0x080037a4
 800163c:	080037b4 	.word	0x080037b4
 8001640:	003d0900 	.word	0x003d0900

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_RCC_GetHCLKFreq+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000000 	.word	0x20000000

08001658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800165c:	f7ff fff2 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <HAL_RCC_GetPCLK1Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	0800379c 	.word	0x0800379c

08001680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001684:	f7ff ffde 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0adb      	lsrs	r3, r3, #11
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	4903      	ldr	r1, [pc, #12]	; (80016a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	0800379c 	.word	0x0800379c

080016a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <RCC_Delay+0x34>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <RCC_Delay+0x38>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0a5b      	lsrs	r3, r3, #9
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c4:	bf00      	nop
  }
  while (Delay --);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	60fa      	str	r2, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <RCC_Delay+0x1c>
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000000 	.word	0x20000000
 80016e0:	10624dd3 	.word	0x10624dd3

080016e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e041      	b.n	800177a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7fe ff28 	bl	8000560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3304      	adds	r3, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4610      	mov	r0, r2
 8001724:	f000 fab2 	bl	8001c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e041      	b.n	8001818 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d106      	bne.n	80017ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f839 	bl	8001820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f000 fa63 	bl	8001c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_TIM_PWM_Start+0x24>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e022      	b.n	800189e <HAL_TIM_PWM_Start+0x6a>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b04      	cmp	r3, #4
 800185c:	d109      	bne.n	8001872 <HAL_TIM_PWM_Start+0x3e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	bf14      	ite	ne
 800186a:	2301      	movne	r3, #1
 800186c:	2300      	moveq	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	e015      	b.n	800189e <HAL_TIM_PWM_Start+0x6a>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d109      	bne.n	800188c <HAL_TIM_PWM_Start+0x58>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e008      	b.n	800189e <HAL_TIM_PWM_Start+0x6a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e05e      	b.n	8001964 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d104      	bne.n	80018b6 <HAL_TIM_PWM_Start+0x82>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018b4:	e013      	b.n	80018de <HAL_TIM_PWM_Start+0xaa>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d104      	bne.n	80018c6 <HAL_TIM_PWM_Start+0x92>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018c4:	e00b      	b.n	80018de <HAL_TIM_PWM_Start+0xaa>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d104      	bne.n	80018d6 <HAL_TIM_PWM_Start+0xa2>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018d4:	e003      	b.n	80018de <HAL_TIM_PWM_Start+0xaa>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fc50 	bl	800218c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_TIM_PWM_Start+0x138>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d107      	bne.n	8001906 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_TIM_PWM_Start+0x138>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_TIM_PWM_Start+0xfa>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d009      	beq.n	800192e <HAL_TIM_PWM_Start+0xfa>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIM_PWM_Start+0x13c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_TIM_PWM_Start+0xfa>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <HAL_TIM_PWM_Start+0x140>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d111      	bne.n	8001952 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b06      	cmp	r3, #6
 800193e:	d010      	beq.n	8001962 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001950:	e007      	b.n	8001962 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40000400 	.word	0x40000400
 8001974:	40000800 	.word	0x40000800

08001978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001992:	2302      	movs	r3, #2
 8001994:	e0ae      	b.n	8001af4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	f200 809f 	bhi.w	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019e1 	.word	0x080019e1
 80019b0:	08001ae5 	.word	0x08001ae5
 80019b4:	08001ae5 	.word	0x08001ae5
 80019b8:	08001ae5 	.word	0x08001ae5
 80019bc:	08001a21 	.word	0x08001a21
 80019c0:	08001ae5 	.word	0x08001ae5
 80019c4:	08001ae5 	.word	0x08001ae5
 80019c8:	08001ae5 	.word	0x08001ae5
 80019cc:	08001a63 	.word	0x08001a63
 80019d0:	08001ae5 	.word	0x08001ae5
 80019d4:	08001ae5 	.word	0x08001ae5
 80019d8:	08001ae5 	.word	0x08001ae5
 80019dc:	08001aa3 	.word	0x08001aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f9b2 	bl	8001d50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0204 	bic.w	r2, r2, #4
 8001a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6999      	ldr	r1, [r3, #24]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	619a      	str	r2, [r3, #24]
      break;
 8001a1e:	e064      	b.n	8001aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f9f8 	bl	8001e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6999      	ldr	r1, [r3, #24]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	021a      	lsls	r2, r3, #8
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	619a      	str	r2, [r3, #24]
      break;
 8001a60:	e043      	b.n	8001aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fa41 	bl	8001ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0208 	orr.w	r2, r2, #8
 8001a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0204 	bic.w	r2, r2, #4
 8001a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69d9      	ldr	r1, [r3, #28]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	61da      	str	r2, [r3, #28]
      break;
 8001aa0:	e023      	b.n	8001aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fa8b 	bl	8001fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69d9      	ldr	r1, [r3, #28]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	61da      	str	r2, [r3, #28]
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_TIM_ConfigClockSource+0x1c>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e0b4      	b.n	8001c82 <HAL_TIM_ConfigClockSource+0x186>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b50:	d03e      	beq.n	8001bd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b56:	f200 8087 	bhi.w	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b5e:	f000 8086 	beq.w	8001c6e <HAL_TIM_ConfigClockSource+0x172>
 8001b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b66:	d87f      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b68:	2b70      	cmp	r3, #112	; 0x70
 8001b6a:	d01a      	beq.n	8001ba2 <HAL_TIM_ConfigClockSource+0xa6>
 8001b6c:	2b70      	cmp	r3, #112	; 0x70
 8001b6e:	d87b      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b70:	2b60      	cmp	r3, #96	; 0x60
 8001b72:	d050      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0x11a>
 8001b74:	2b60      	cmp	r3, #96	; 0x60
 8001b76:	d877      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b78:	2b50      	cmp	r3, #80	; 0x50
 8001b7a:	d03c      	beq.n	8001bf6 <HAL_TIM_ConfigClockSource+0xfa>
 8001b7c:	2b50      	cmp	r3, #80	; 0x50
 8001b7e:	d873      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d058      	beq.n	8001c36 <HAL_TIM_ConfigClockSource+0x13a>
 8001b84:	2b40      	cmp	r3, #64	; 0x40
 8001b86:	d86f      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b88:	2b30      	cmp	r3, #48	; 0x30
 8001b8a:	d064      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0x15a>
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	d86b      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d060      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0x15a>
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d867      	bhi.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d05c      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0x15a>
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d05a      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0x15a>
 8001ba0:	e062      	b.n	8001c68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f000 facc 	bl	800214e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	609a      	str	r2, [r3, #8]
      break;
 8001bce:	e04f      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f000 fab5 	bl	800214e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf2:	609a      	str	r2, [r3, #8]
      break;
 8001bf4:	e03c      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	461a      	mov	r2, r3
 8001c04:	f000 fa2c 	bl	8002060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2150      	movs	r1, #80	; 0x50
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fa83 	bl	800211a <TIM_ITRx_SetConfig>
      break;
 8001c14:	e02c      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f000 fa4a 	bl	80020bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2160      	movs	r1, #96	; 0x60
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fa73 	bl	800211a <TIM_ITRx_SetConfig>
      break;
 8001c34:	e01c      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f000 fa0c 	bl	8002060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2140      	movs	r1, #64	; 0x40
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fa63 	bl	800211a <TIM_ITRx_SetConfig>
      break;
 8001c54:	e00c      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f000 fa5a 	bl	800211a <TIM_ITRx_SetConfig>
      break;
 8001c66:	e003      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6c:	e000      	b.n	8001c70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <TIM_Base_SetConfig+0xb8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00b      	beq.n	8001cbc <TIM_Base_SetConfig+0x30>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d007      	beq.n	8001cbc <TIM_Base_SetConfig+0x30>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <TIM_Base_SetConfig+0xbc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d003      	beq.n	8001cbc <TIM_Base_SetConfig+0x30>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a25      	ldr	r2, [pc, #148]	; (8001d4c <TIM_Base_SetConfig+0xc0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d108      	bne.n	8001cce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <TIM_Base_SetConfig+0xb8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00b      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cdc:	d007      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <TIM_Base_SetConfig+0xbc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d003      	beq.n	8001cee <TIM_Base_SetConfig+0x62>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <TIM_Base_SetConfig+0xc0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d108      	bne.n	8001d00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <TIM_Base_SetConfig+0xb8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d103      	bne.n	8001d34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	615a      	str	r2, [r3, #20]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800

08001d50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f023 0201 	bic.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f023 0302 	bic.w	r3, r3, #2
 8001d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <TIM_OC1_SetConfig+0xc8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d10c      	bne.n	8001dc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f023 0308 	bic.w	r3, r3, #8
 8001db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <TIM_OC1_SetConfig+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d111      	bne.n	8001df2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	621a      	str	r2, [r3, #32]
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40012c00 	.word	0x40012c00

08001e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f023 0210 	bic.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0320 	bic.w	r3, r3, #32
 8001e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <TIM_OC2_SetConfig+0xd0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10d      	bne.n	8001e98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <TIM_OC2_SetConfig+0xd0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d113      	bne.n	8001ec8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	621a      	str	r2, [r3, #32]
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40012c00 	.word	0x40012c00

08001ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <TIM_OC3_SetConfig+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10d      	bne.n	8001f6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <TIM_OC3_SetConfig+0xd0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d113      	bne.n	8001f9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	621a      	str	r2, [r3, #32]
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40012c00 	.word	0x40012c00

08001fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800200e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	031b      	lsls	r3, r3, #12
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <TIM_OC4_SetConfig+0x98>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d109      	bne.n	8002038 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800202a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	621a      	str	r2, [r3, #32]
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	40012c00 	.word	0x40012c00

08002060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 0201 	bic.w	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800208a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f023 030a 	bic.w	r3, r3, #10
 800209c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	621a      	str	r2, [r3, #32]
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0210 	bic.w	r2, r3, #16
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	031b      	lsls	r3, r3, #12
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	f043 0307 	orr.w	r3, r3, #7
 800213c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800214e:	b480      	push	{r7}
 8002150:	b087      	sub	sp, #28
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4313      	orrs	r3, r2
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	609a      	str	r2, [r3, #8]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2201      	movs	r2, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e046      	b.n	800227a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d009      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10c      	bne.n	8002268 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4313      	orrs	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800

08002290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e042      	b.n	8002328 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe f9b8 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f91d 	bl	8002514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	d16d      	bne.n	800242c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_UART_Transmit+0x2c>
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e066      	b.n	800242e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2221      	movs	r2, #33	; 0x21
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800236e:	f7fe fb13 	bl	8000998 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002388:	d108      	bne.n	800239c <HAL_UART_Transmit+0x6c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	e003      	b.n	80023a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023a4:	e02a      	b.n	80023fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f840 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e036      	b.n	800242e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3302      	adds	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e007      	b.n	80023ee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1cf      	bne.n	80023a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2200      	movs	r2, #0
 800240e:	2140      	movs	r1, #64	; 0x40
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f810 	bl	8002436 <UART_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	e000      	b.n	800242e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800242c:	2302      	movs	r3, #2
  }
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b090      	sub	sp, #64	; 0x40
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002446:	e050      	b.n	80024ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d04c      	beq.n	80024ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <UART_WaitOnFlagUntilTimeout+0x30>
 8002456:	f7fe fa9f 	bl	8000998 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002462:	429a      	cmp	r2, r3
 8002464:	d241      	bcs.n	80024ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002486:	637a      	str	r2, [r7, #52]	; 0x34
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e5      	bne.n	8002466 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3314      	adds	r3, #20
 80024a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	613b      	str	r3, [r7, #16]
   return(result);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3314      	adds	r3, #20
 80024b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024ba:	623a      	str	r2, [r7, #32]
 80024bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024be:	69f9      	ldr	r1, [r7, #28]
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	e841 2300 	strex	r3, r2, [r1]
 80024c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e5      	bne.n	800249a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e00f      	b.n	800250a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	429a      	cmp	r2, r3
 8002506:	d09f      	beq.n	8002448 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3740      	adds	r7, #64	; 0x40
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800254e:	f023 030c 	bic.w	r3, r3, #12
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	430b      	orrs	r3, r1
 800255a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <UART_SetConfig+0x114>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800257c:	f7ff f880 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	e002      	b.n	800258a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002584:	f7ff f868 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <UART_SetConfig+0x118>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	0119      	lsls	r1, r3, #4
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009a      	lsls	r2, r3, #2
 80025b4:	441a      	add	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <UART_SetConfig+0x118>)
 80025c2:	fba3 0302 	umull	r0, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2064      	movs	r0, #100	; 0x64
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	3332      	adds	r3, #50	; 0x32
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <UART_SetConfig+0x118>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e0:	4419      	add	r1, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <UART_SetConfig+0x118>)
 80025fa:	fba3 0302 	umull	r0, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	fb00 f303 	mul.w	r3, r0, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	3332      	adds	r3, #50	; 0x32
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <UART_SetConfig+0x118>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	440a      	add	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40013800 	.word	0x40013800
 800262c:	51eb851f 	.word	0x51eb851f

08002630 <__errno>:
 8002630:	4b01      	ldr	r3, [pc, #4]	; (8002638 <__errno+0x8>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	2000000c 	.word	0x2000000c

0800263c <__libc_init_array>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	2600      	movs	r6, #0
 8002640:	4d0c      	ldr	r5, [pc, #48]	; (8002674 <__libc_init_array+0x38>)
 8002642:	4c0d      	ldr	r4, [pc, #52]	; (8002678 <__libc_init_array+0x3c>)
 8002644:	1b64      	subs	r4, r4, r5
 8002646:	10a4      	asrs	r4, r4, #2
 8002648:	42a6      	cmp	r6, r4
 800264a:	d109      	bne.n	8002660 <__libc_init_array+0x24>
 800264c:	f001 f878 	bl	8003740 <_init>
 8002650:	2600      	movs	r6, #0
 8002652:	4d0a      	ldr	r5, [pc, #40]	; (800267c <__libc_init_array+0x40>)
 8002654:	4c0a      	ldr	r4, [pc, #40]	; (8002680 <__libc_init_array+0x44>)
 8002656:	1b64      	subs	r4, r4, r5
 8002658:	10a4      	asrs	r4, r4, #2
 800265a:	42a6      	cmp	r6, r4
 800265c:	d105      	bne.n	800266a <__libc_init_array+0x2e>
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	f855 3b04 	ldr.w	r3, [r5], #4
 8002664:	4798      	blx	r3
 8002666:	3601      	adds	r6, #1
 8002668:	e7ee      	b.n	8002648 <__libc_init_array+0xc>
 800266a:	f855 3b04 	ldr.w	r3, [r5], #4
 800266e:	4798      	blx	r3
 8002670:	3601      	adds	r6, #1
 8002672:	e7f2      	b.n	800265a <__libc_init_array+0x1e>
 8002674:	08003900 	.word	0x08003900
 8002678:	08003900 	.word	0x08003900
 800267c:	08003900 	.word	0x08003900
 8002680:	08003904 	.word	0x08003904

08002684 <memset>:
 8002684:	4603      	mov	r3, r0
 8002686:	4402      	add	r2, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <iprintf>:
 8002694:	b40f      	push	{r0, r1, r2, r3}
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <iprintf+0x2c>)
 8002698:	b513      	push	{r0, r1, r4, lr}
 800269a:	681c      	ldr	r4, [r3, #0]
 800269c:	b124      	cbz	r4, 80026a8 <iprintf+0x14>
 800269e:	69a3      	ldr	r3, [r4, #24]
 80026a0:	b913      	cbnz	r3, 80026a8 <iprintf+0x14>
 80026a2:	4620      	mov	r0, r4
 80026a4:	f000 f8c2 	bl	800282c <__sinit>
 80026a8:	ab05      	add	r3, sp, #20
 80026aa:	4620      	mov	r0, r4
 80026ac:	9a04      	ldr	r2, [sp, #16]
 80026ae:	68a1      	ldr	r1, [r4, #8]
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	f000 fa79 	bl	8002ba8 <_vfiprintf_r>
 80026b6:	b002      	add	sp, #8
 80026b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026bc:	b004      	add	sp, #16
 80026be:	4770      	bx	lr
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <rand>:
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <rand+0x5c>)
 80026c6:	b510      	push	{r4, lr}
 80026c8:	681c      	ldr	r4, [r3, #0]
 80026ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026cc:	b9b3      	cbnz	r3, 80026fc <rand+0x38>
 80026ce:	2018      	movs	r0, #24
 80026d0:	f000 f95e 	bl	8002990 <malloc>
 80026d4:	4602      	mov	r2, r0
 80026d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80026d8:	b920      	cbnz	r0, 80026e4 <rand+0x20>
 80026da:	214e      	movs	r1, #78	; 0x4e
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <rand+0x60>)
 80026de:	4812      	ldr	r0, [pc, #72]	; (8002728 <rand+0x64>)
 80026e0:	f000 f82e 	bl	8002740 <__assert_func>
 80026e4:	4911      	ldr	r1, [pc, #68]	; (800272c <rand+0x68>)
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <rand+0x6c>)
 80026e8:	e9c0 1300 	strd	r1, r3, [r0]
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <rand+0x70>)
 80026ee:	2100      	movs	r1, #0
 80026f0:	6083      	str	r3, [r0, #8]
 80026f2:	230b      	movs	r3, #11
 80026f4:	8183      	strh	r3, [r0, #12]
 80026f6:	2001      	movs	r0, #1
 80026f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80026fc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <rand+0x74>)
 8002700:	6920      	ldr	r0, [r4, #16]
 8002702:	6963      	ldr	r3, [r4, #20]
 8002704:	4342      	muls	r2, r0
 8002706:	490d      	ldr	r1, [pc, #52]	; (800273c <rand+0x78>)
 8002708:	fb01 2203 	mla	r2, r1, r3, r2
 800270c:	fba0 0101 	umull	r0, r1, r0, r1
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	eb42 0001 	adc.w	r0, r2, r1
 8002716:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800271a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800271e:	bd10      	pop	{r4, pc}
 8002720:	2000000c 	.word	0x2000000c
 8002724:	080037bc 	.word	0x080037bc
 8002728:	080037d3 	.word	0x080037d3
 800272c:	abcd330e 	.word	0xabcd330e
 8002730:	e66d1234 	.word	0xe66d1234
 8002734:	0005deec 	.word	0x0005deec
 8002738:	5851f42d 	.word	0x5851f42d
 800273c:	4c957f2d 	.word	0x4c957f2d

08002740 <__assert_func>:
 8002740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002742:	4614      	mov	r4, r2
 8002744:	461a      	mov	r2, r3
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <__assert_func+0x2c>)
 8002748:	4605      	mov	r5, r0
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d8      	ldr	r0, [r3, #12]
 800274e:	b14c      	cbz	r4, 8002764 <__assert_func+0x24>
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <__assert_func+0x30>)
 8002752:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002756:	9100      	str	r1, [sp, #0]
 8002758:	462b      	mov	r3, r5
 800275a:	4906      	ldr	r1, [pc, #24]	; (8002774 <__assert_func+0x34>)
 800275c:	f000 f8e4 	bl	8002928 <fiprintf>
 8002760:	f000 fe0e 	bl	8003380 <abort>
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__assert_func+0x38>)
 8002766:	461c      	mov	r4, r3
 8002768:	e7f3      	b.n	8002752 <__assert_func+0x12>
 800276a:	bf00      	nop
 800276c:	2000000c 	.word	0x2000000c
 8002770:	0800382e 	.word	0x0800382e
 8002774:	0800383b 	.word	0x0800383b
 8002778:	08003869 	.word	0x08003869

0800277c <std>:
 800277c:	2300      	movs	r3, #0
 800277e:	b510      	push	{r4, lr}
 8002780:	4604      	mov	r4, r0
 8002782:	e9c0 3300 	strd	r3, r3, [r0]
 8002786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800278a:	6083      	str	r3, [r0, #8]
 800278c:	8181      	strh	r1, [r0, #12]
 800278e:	6643      	str	r3, [r0, #100]	; 0x64
 8002790:	81c2      	strh	r2, [r0, #14]
 8002792:	6183      	str	r3, [r0, #24]
 8002794:	4619      	mov	r1, r3
 8002796:	2208      	movs	r2, #8
 8002798:	305c      	adds	r0, #92	; 0x5c
 800279a:	f7ff ff73 	bl	8002684 <memset>
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <std+0x38>)
 80027a0:	6224      	str	r4, [r4, #32]
 80027a2:	6263      	str	r3, [r4, #36]	; 0x24
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <std+0x3c>)
 80027a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <std+0x40>)
 80027aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <std+0x44>)
 80027ae:	6323      	str	r3, [r4, #48]	; 0x30
 80027b0:	bd10      	pop	{r4, pc}
 80027b2:	bf00      	nop
 80027b4:	08003155 	.word	0x08003155
 80027b8:	08003177 	.word	0x08003177
 80027bc:	080031af 	.word	0x080031af
 80027c0:	080031d3 	.word	0x080031d3

080027c4 <_cleanup_r>:
 80027c4:	4901      	ldr	r1, [pc, #4]	; (80027cc <_cleanup_r+0x8>)
 80027c6:	f000 b8c1 	b.w	800294c <_fwalk_reent>
 80027ca:	bf00      	nop
 80027cc:	080034b5 	.word	0x080034b5

080027d0 <__sfmoreglue>:
 80027d0:	2268      	movs	r2, #104	; 0x68
 80027d2:	b570      	push	{r4, r5, r6, lr}
 80027d4:	1e4d      	subs	r5, r1, #1
 80027d6:	4355      	muls	r5, r2
 80027d8:	460e      	mov	r6, r1
 80027da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027de:	f000 f947 	bl	8002a70 <_malloc_r>
 80027e2:	4604      	mov	r4, r0
 80027e4:	b140      	cbz	r0, 80027f8 <__sfmoreglue+0x28>
 80027e6:	2100      	movs	r1, #0
 80027e8:	e9c0 1600 	strd	r1, r6, [r0]
 80027ec:	300c      	adds	r0, #12
 80027ee:	60a0      	str	r0, [r4, #8]
 80027f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027f4:	f7ff ff46 	bl	8002684 <memset>
 80027f8:	4620      	mov	r0, r4
 80027fa:	bd70      	pop	{r4, r5, r6, pc}

080027fc <__sfp_lock_acquire>:
 80027fc:	4801      	ldr	r0, [pc, #4]	; (8002804 <__sfp_lock_acquire+0x8>)
 80027fe:	f000 b8c5 	b.w	800298c <__retarget_lock_acquire_recursive>
 8002802:	bf00      	nop
 8002804:	2000012d 	.word	0x2000012d

08002808 <__sfp_lock_release>:
 8002808:	4801      	ldr	r0, [pc, #4]	; (8002810 <__sfp_lock_release+0x8>)
 800280a:	f000 b8c0 	b.w	800298e <__retarget_lock_release_recursive>
 800280e:	bf00      	nop
 8002810:	2000012d 	.word	0x2000012d

08002814 <__sinit_lock_acquire>:
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <__sinit_lock_acquire+0x8>)
 8002816:	f000 b8b9 	b.w	800298c <__retarget_lock_acquire_recursive>
 800281a:	bf00      	nop
 800281c:	2000012e 	.word	0x2000012e

08002820 <__sinit_lock_release>:
 8002820:	4801      	ldr	r0, [pc, #4]	; (8002828 <__sinit_lock_release+0x8>)
 8002822:	f000 b8b4 	b.w	800298e <__retarget_lock_release_recursive>
 8002826:	bf00      	nop
 8002828:	2000012e 	.word	0x2000012e

0800282c <__sinit>:
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	f7ff fff0 	bl	8002814 <__sinit_lock_acquire>
 8002834:	69a3      	ldr	r3, [r4, #24]
 8002836:	b11b      	cbz	r3, 8002840 <__sinit+0x14>
 8002838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800283c:	f7ff bff0 	b.w	8002820 <__sinit_lock_release>
 8002840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002844:	6523      	str	r3, [r4, #80]	; 0x50
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <__sinit+0x68>)
 8002848:	4a13      	ldr	r2, [pc, #76]	; (8002898 <__sinit+0x6c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	62a2      	str	r2, [r4, #40]	; 0x28
 800284e:	42a3      	cmp	r3, r4
 8002850:	bf08      	it	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	4620      	mov	r0, r4
 8002856:	bf08      	it	eq
 8002858:	61a3      	streq	r3, [r4, #24]
 800285a:	f000 f81f 	bl	800289c <__sfp>
 800285e:	6060      	str	r0, [r4, #4]
 8002860:	4620      	mov	r0, r4
 8002862:	f000 f81b 	bl	800289c <__sfp>
 8002866:	60a0      	str	r0, [r4, #8]
 8002868:	4620      	mov	r0, r4
 800286a:	f000 f817 	bl	800289c <__sfp>
 800286e:	2200      	movs	r2, #0
 8002870:	2104      	movs	r1, #4
 8002872:	60e0      	str	r0, [r4, #12]
 8002874:	6860      	ldr	r0, [r4, #4]
 8002876:	f7ff ff81 	bl	800277c <std>
 800287a:	2201      	movs	r2, #1
 800287c:	2109      	movs	r1, #9
 800287e:	68a0      	ldr	r0, [r4, #8]
 8002880:	f7ff ff7c 	bl	800277c <std>
 8002884:	2202      	movs	r2, #2
 8002886:	2112      	movs	r1, #18
 8002888:	68e0      	ldr	r0, [r4, #12]
 800288a:	f7ff ff77 	bl	800277c <std>
 800288e:	2301      	movs	r3, #1
 8002890:	61a3      	str	r3, [r4, #24]
 8002892:	e7d1      	b.n	8002838 <__sinit+0xc>
 8002894:	080037b8 	.word	0x080037b8
 8002898:	080027c5 	.word	0x080027c5

0800289c <__sfp>:
 800289c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289e:	4607      	mov	r7, r0
 80028a0:	f7ff ffac 	bl	80027fc <__sfp_lock_acquire>
 80028a4:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <__sfp+0x84>)
 80028a6:	681e      	ldr	r6, [r3, #0]
 80028a8:	69b3      	ldr	r3, [r6, #24]
 80028aa:	b913      	cbnz	r3, 80028b2 <__sfp+0x16>
 80028ac:	4630      	mov	r0, r6
 80028ae:	f7ff ffbd 	bl	800282c <__sinit>
 80028b2:	3648      	adds	r6, #72	; 0x48
 80028b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	d503      	bpl.n	80028c4 <__sfp+0x28>
 80028bc:	6833      	ldr	r3, [r6, #0]
 80028be:	b30b      	cbz	r3, 8002904 <__sfp+0x68>
 80028c0:	6836      	ldr	r6, [r6, #0]
 80028c2:	e7f7      	b.n	80028b4 <__sfp+0x18>
 80028c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028c8:	b9d5      	cbnz	r5, 8002900 <__sfp+0x64>
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <__sfp+0x88>)
 80028cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028d0:	60e3      	str	r3, [r4, #12]
 80028d2:	6665      	str	r5, [r4, #100]	; 0x64
 80028d4:	f000 f859 	bl	800298a <__retarget_lock_init_recursive>
 80028d8:	f7ff ff96 	bl	8002808 <__sfp_lock_release>
 80028dc:	2208      	movs	r2, #8
 80028de:	4629      	mov	r1, r5
 80028e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028e8:	6025      	str	r5, [r4, #0]
 80028ea:	61a5      	str	r5, [r4, #24]
 80028ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028f0:	f7ff fec8 	bl	8002684 <memset>
 80028f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028fc:	4620      	mov	r0, r4
 80028fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002900:	3468      	adds	r4, #104	; 0x68
 8002902:	e7d9      	b.n	80028b8 <__sfp+0x1c>
 8002904:	2104      	movs	r1, #4
 8002906:	4638      	mov	r0, r7
 8002908:	f7ff ff62 	bl	80027d0 <__sfmoreglue>
 800290c:	4604      	mov	r4, r0
 800290e:	6030      	str	r0, [r6, #0]
 8002910:	2800      	cmp	r0, #0
 8002912:	d1d5      	bne.n	80028c0 <__sfp+0x24>
 8002914:	f7ff ff78 	bl	8002808 <__sfp_lock_release>
 8002918:	230c      	movs	r3, #12
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	e7ee      	b.n	80028fc <__sfp+0x60>
 800291e:	bf00      	nop
 8002920:	080037b8 	.word	0x080037b8
 8002924:	ffff0001 	.word	0xffff0001

08002928 <fiprintf>:
 8002928:	b40e      	push	{r1, r2, r3}
 800292a:	b503      	push	{r0, r1, lr}
 800292c:	4601      	mov	r1, r0
 800292e:	ab03      	add	r3, sp, #12
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <fiprintf+0x20>)
 8002932:	f853 2b04 	ldr.w	r2, [r3], #4
 8002936:	6800      	ldr	r0, [r0, #0]
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	f000 f935 	bl	8002ba8 <_vfiprintf_r>
 800293e:	b002      	add	sp, #8
 8002940:	f85d eb04 	ldr.w	lr, [sp], #4
 8002944:	b003      	add	sp, #12
 8002946:	4770      	bx	lr
 8002948:	2000000c 	.word	0x2000000c

0800294c <_fwalk_reent>:
 800294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002950:	4606      	mov	r6, r0
 8002952:	4688      	mov	r8, r1
 8002954:	2700      	movs	r7, #0
 8002956:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800295a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800295e:	f1b9 0901 	subs.w	r9, r9, #1
 8002962:	d505      	bpl.n	8002970 <_fwalk_reent+0x24>
 8002964:	6824      	ldr	r4, [r4, #0]
 8002966:	2c00      	cmp	r4, #0
 8002968:	d1f7      	bne.n	800295a <_fwalk_reent+0xe>
 800296a:	4638      	mov	r0, r7
 800296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002970:	89ab      	ldrh	r3, [r5, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d907      	bls.n	8002986 <_fwalk_reent+0x3a>
 8002976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800297a:	3301      	adds	r3, #1
 800297c:	d003      	beq.n	8002986 <_fwalk_reent+0x3a>
 800297e:	4629      	mov	r1, r5
 8002980:	4630      	mov	r0, r6
 8002982:	47c0      	blx	r8
 8002984:	4307      	orrs	r7, r0
 8002986:	3568      	adds	r5, #104	; 0x68
 8002988:	e7e9      	b.n	800295e <_fwalk_reent+0x12>

0800298a <__retarget_lock_init_recursive>:
 800298a:	4770      	bx	lr

0800298c <__retarget_lock_acquire_recursive>:
 800298c:	4770      	bx	lr

0800298e <__retarget_lock_release_recursive>:
 800298e:	4770      	bx	lr

08002990 <malloc>:
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <malloc+0xc>)
 8002992:	4601      	mov	r1, r0
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	f000 b86b 	b.w	8002a70 <_malloc_r>
 800299a:	bf00      	nop
 800299c:	2000000c 	.word	0x2000000c

080029a0 <_free_r>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	4605      	mov	r5, r0
 80029a4:	2900      	cmp	r1, #0
 80029a6:	d040      	beq.n	8002a2a <_free_r+0x8a>
 80029a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029ac:	1f0c      	subs	r4, r1, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bfb8      	it	lt
 80029b2:	18e4      	addlt	r4, r4, r3
 80029b4:	f000 fe40 	bl	8003638 <__malloc_lock>
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <_free_r+0x8c>)
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	b933      	cbnz	r3, 80029cc <_free_r+0x2c>
 80029be:	6063      	str	r3, [r4, #4]
 80029c0:	6014      	str	r4, [r2, #0]
 80029c2:	4628      	mov	r0, r5
 80029c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029c8:	f000 be3c 	b.w	8003644 <__malloc_unlock>
 80029cc:	42a3      	cmp	r3, r4
 80029ce:	d908      	bls.n	80029e2 <_free_r+0x42>
 80029d0:	6820      	ldr	r0, [r4, #0]
 80029d2:	1821      	adds	r1, r4, r0
 80029d4:	428b      	cmp	r3, r1
 80029d6:	bf01      	itttt	eq
 80029d8:	6819      	ldreq	r1, [r3, #0]
 80029da:	685b      	ldreq	r3, [r3, #4]
 80029dc:	1809      	addeq	r1, r1, r0
 80029de:	6021      	streq	r1, [r4, #0]
 80029e0:	e7ed      	b.n	80029be <_free_r+0x1e>
 80029e2:	461a      	mov	r2, r3
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b10b      	cbz	r3, 80029ec <_free_r+0x4c>
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d9fa      	bls.n	80029e2 <_free_r+0x42>
 80029ec:	6811      	ldr	r1, [r2, #0]
 80029ee:	1850      	adds	r0, r2, r1
 80029f0:	42a0      	cmp	r0, r4
 80029f2:	d10b      	bne.n	8002a0c <_free_r+0x6c>
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	4401      	add	r1, r0
 80029f8:	1850      	adds	r0, r2, r1
 80029fa:	4283      	cmp	r3, r0
 80029fc:	6011      	str	r1, [r2, #0]
 80029fe:	d1e0      	bne.n	80029c2 <_free_r+0x22>
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4401      	add	r1, r0
 8002a06:	6011      	str	r1, [r2, #0]
 8002a08:	6053      	str	r3, [r2, #4]
 8002a0a:	e7da      	b.n	80029c2 <_free_r+0x22>
 8002a0c:	d902      	bls.n	8002a14 <_free_r+0x74>
 8002a0e:	230c      	movs	r3, #12
 8002a10:	602b      	str	r3, [r5, #0]
 8002a12:	e7d6      	b.n	80029c2 <_free_r+0x22>
 8002a14:	6820      	ldr	r0, [r4, #0]
 8002a16:	1821      	adds	r1, r4, r0
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	bf01      	itttt	eq
 8002a1c:	6819      	ldreq	r1, [r3, #0]
 8002a1e:	685b      	ldreq	r3, [r3, #4]
 8002a20:	1809      	addeq	r1, r1, r0
 8002a22:	6021      	streq	r1, [r4, #0]
 8002a24:	6063      	str	r3, [r4, #4]
 8002a26:	6054      	str	r4, [r2, #4]
 8002a28:	e7cb      	b.n	80029c2 <_free_r+0x22>
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20000130 	.word	0x20000130

08002a30 <sbrk_aligned>:
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	4e0e      	ldr	r6, [pc, #56]	; (8002a6c <sbrk_aligned+0x3c>)
 8002a34:	460c      	mov	r4, r1
 8002a36:	6831      	ldr	r1, [r6, #0]
 8002a38:	4605      	mov	r5, r0
 8002a3a:	b911      	cbnz	r1, 8002a42 <sbrk_aligned+0x12>
 8002a3c:	f000 fb7a 	bl	8003134 <_sbrk_r>
 8002a40:	6030      	str	r0, [r6, #0]
 8002a42:	4621      	mov	r1, r4
 8002a44:	4628      	mov	r0, r5
 8002a46:	f000 fb75 	bl	8003134 <_sbrk_r>
 8002a4a:	1c43      	adds	r3, r0, #1
 8002a4c:	d00a      	beq.n	8002a64 <sbrk_aligned+0x34>
 8002a4e:	1cc4      	adds	r4, r0, #3
 8002a50:	f024 0403 	bic.w	r4, r4, #3
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d007      	beq.n	8002a68 <sbrk_aligned+0x38>
 8002a58:	1a21      	subs	r1, r4, r0
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f000 fb6a 	bl	8003134 <_sbrk_r>
 8002a60:	3001      	adds	r0, #1
 8002a62:	d101      	bne.n	8002a68 <sbrk_aligned+0x38>
 8002a64:	f04f 34ff 	mov.w	r4, #4294967295
 8002a68:	4620      	mov	r0, r4
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	20000134 	.word	0x20000134

08002a70 <_malloc_r>:
 8002a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a74:	1ccd      	adds	r5, r1, #3
 8002a76:	f025 0503 	bic.w	r5, r5, #3
 8002a7a:	3508      	adds	r5, #8
 8002a7c:	2d0c      	cmp	r5, #12
 8002a7e:	bf38      	it	cc
 8002a80:	250c      	movcc	r5, #12
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	4607      	mov	r7, r0
 8002a86:	db01      	blt.n	8002a8c <_malloc_r+0x1c>
 8002a88:	42a9      	cmp	r1, r5
 8002a8a:	d905      	bls.n	8002a98 <_malloc_r+0x28>
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	2600      	movs	r6, #0
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	4630      	mov	r0, r6
 8002a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a98:	4e2e      	ldr	r6, [pc, #184]	; (8002b54 <_malloc_r+0xe4>)
 8002a9a:	f000 fdcd 	bl	8003638 <__malloc_lock>
 8002a9e:	6833      	ldr	r3, [r6, #0]
 8002aa0:	461c      	mov	r4, r3
 8002aa2:	bb34      	cbnz	r4, 8002af2 <_malloc_r+0x82>
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	f7ff ffc2 	bl	8002a30 <sbrk_aligned>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	4604      	mov	r4, r0
 8002ab0:	d14d      	bne.n	8002b4e <_malloc_r+0xde>
 8002ab2:	6834      	ldr	r4, [r6, #0]
 8002ab4:	4626      	mov	r6, r4
 8002ab6:	2e00      	cmp	r6, #0
 8002ab8:	d140      	bne.n	8002b3c <_malloc_r+0xcc>
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	4631      	mov	r1, r6
 8002abe:	4638      	mov	r0, r7
 8002ac0:	eb04 0803 	add.w	r8, r4, r3
 8002ac4:	f000 fb36 	bl	8003134 <_sbrk_r>
 8002ac8:	4580      	cmp	r8, r0
 8002aca:	d13a      	bne.n	8002b42 <_malloc_r+0xd2>
 8002acc:	6821      	ldr	r1, [r4, #0]
 8002ace:	3503      	adds	r5, #3
 8002ad0:	1a6d      	subs	r5, r5, r1
 8002ad2:	f025 0503 	bic.w	r5, r5, #3
 8002ad6:	3508      	adds	r5, #8
 8002ad8:	2d0c      	cmp	r5, #12
 8002ada:	bf38      	it	cc
 8002adc:	250c      	movcc	r5, #12
 8002ade:	4638      	mov	r0, r7
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7ff ffa5 	bl	8002a30 <sbrk_aligned>
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	d02b      	beq.n	8002b42 <_malloc_r+0xd2>
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	442b      	add	r3, r5
 8002aee:	6023      	str	r3, [r4, #0]
 8002af0:	e00e      	b.n	8002b10 <_malloc_r+0xa0>
 8002af2:	6822      	ldr	r2, [r4, #0]
 8002af4:	1b52      	subs	r2, r2, r5
 8002af6:	d41e      	bmi.n	8002b36 <_malloc_r+0xc6>
 8002af8:	2a0b      	cmp	r2, #11
 8002afa:	d916      	bls.n	8002b2a <_malloc_r+0xba>
 8002afc:	1961      	adds	r1, r4, r5
 8002afe:	42a3      	cmp	r3, r4
 8002b00:	6025      	str	r5, [r4, #0]
 8002b02:	bf18      	it	ne
 8002b04:	6059      	strne	r1, [r3, #4]
 8002b06:	6863      	ldr	r3, [r4, #4]
 8002b08:	bf08      	it	eq
 8002b0a:	6031      	streq	r1, [r6, #0]
 8002b0c:	5162      	str	r2, [r4, r5]
 8002b0e:	604b      	str	r3, [r1, #4]
 8002b10:	4638      	mov	r0, r7
 8002b12:	f104 060b 	add.w	r6, r4, #11
 8002b16:	f000 fd95 	bl	8003644 <__malloc_unlock>
 8002b1a:	f026 0607 	bic.w	r6, r6, #7
 8002b1e:	1d23      	adds	r3, r4, #4
 8002b20:	1af2      	subs	r2, r6, r3
 8002b22:	d0b6      	beq.n	8002a92 <_malloc_r+0x22>
 8002b24:	1b9b      	subs	r3, r3, r6
 8002b26:	50a3      	str	r3, [r4, r2]
 8002b28:	e7b3      	b.n	8002a92 <_malloc_r+0x22>
 8002b2a:	6862      	ldr	r2, [r4, #4]
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	bf0c      	ite	eq
 8002b30:	6032      	streq	r2, [r6, #0]
 8002b32:	605a      	strne	r2, [r3, #4]
 8002b34:	e7ec      	b.n	8002b10 <_malloc_r+0xa0>
 8002b36:	4623      	mov	r3, r4
 8002b38:	6864      	ldr	r4, [r4, #4]
 8002b3a:	e7b2      	b.n	8002aa2 <_malloc_r+0x32>
 8002b3c:	4634      	mov	r4, r6
 8002b3e:	6876      	ldr	r6, [r6, #4]
 8002b40:	e7b9      	b.n	8002ab6 <_malloc_r+0x46>
 8002b42:	230c      	movs	r3, #12
 8002b44:	4638      	mov	r0, r7
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	f000 fd7c 	bl	8003644 <__malloc_unlock>
 8002b4c:	e7a1      	b.n	8002a92 <_malloc_r+0x22>
 8002b4e:	6025      	str	r5, [r4, #0]
 8002b50:	e7de      	b.n	8002b10 <_malloc_r+0xa0>
 8002b52:	bf00      	nop
 8002b54:	20000130 	.word	0x20000130

08002b58 <__sfputc_r>:
 8002b58:	6893      	ldr	r3, [r2, #8]
 8002b5a:	b410      	push	{r4}
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	6093      	str	r3, [r2, #8]
 8002b62:	da07      	bge.n	8002b74 <__sfputc_r+0x1c>
 8002b64:	6994      	ldr	r4, [r2, #24]
 8002b66:	42a3      	cmp	r3, r4
 8002b68:	db01      	blt.n	8002b6e <__sfputc_r+0x16>
 8002b6a:	290a      	cmp	r1, #10
 8002b6c:	d102      	bne.n	8002b74 <__sfputc_r+0x1c>
 8002b6e:	bc10      	pop	{r4}
 8002b70:	f000 bb34 	b.w	80031dc <__swbuf_r>
 8002b74:	6813      	ldr	r3, [r2, #0]
 8002b76:	1c58      	adds	r0, r3, #1
 8002b78:	6010      	str	r0, [r2, #0]
 8002b7a:	7019      	strb	r1, [r3, #0]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	bc10      	pop	{r4}
 8002b80:	4770      	bx	lr

08002b82 <__sfputs_r>:
 8002b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b84:	4606      	mov	r6, r0
 8002b86:	460f      	mov	r7, r1
 8002b88:	4614      	mov	r4, r2
 8002b8a:	18d5      	adds	r5, r2, r3
 8002b8c:	42ac      	cmp	r4, r5
 8002b8e:	d101      	bne.n	8002b94 <__sfputs_r+0x12>
 8002b90:	2000      	movs	r0, #0
 8002b92:	e007      	b.n	8002ba4 <__sfputs_r+0x22>
 8002b94:	463a      	mov	r2, r7
 8002b96:	4630      	mov	r0, r6
 8002b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b9c:	f7ff ffdc 	bl	8002b58 <__sfputc_r>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d1f3      	bne.n	8002b8c <__sfputs_r+0xa>
 8002ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ba8 <_vfiprintf_r>:
 8002ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bac:	460d      	mov	r5, r1
 8002bae:	4614      	mov	r4, r2
 8002bb0:	4698      	mov	r8, r3
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	b09d      	sub	sp, #116	; 0x74
 8002bb6:	b118      	cbz	r0, 8002bc0 <_vfiprintf_r+0x18>
 8002bb8:	6983      	ldr	r3, [r0, #24]
 8002bba:	b90b      	cbnz	r3, 8002bc0 <_vfiprintf_r+0x18>
 8002bbc:	f7ff fe36 	bl	800282c <__sinit>
 8002bc0:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <_vfiprintf_r+0x240>)
 8002bc2:	429d      	cmp	r5, r3
 8002bc4:	d11b      	bne.n	8002bfe <_vfiprintf_r+0x56>
 8002bc6:	6875      	ldr	r5, [r6, #4]
 8002bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bca:	07d9      	lsls	r1, r3, #31
 8002bcc:	d405      	bmi.n	8002bda <_vfiprintf_r+0x32>
 8002bce:	89ab      	ldrh	r3, [r5, #12]
 8002bd0:	059a      	lsls	r2, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <_vfiprintf_r+0x32>
 8002bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bd6:	f7ff fed9 	bl	800298c <__retarget_lock_acquire_recursive>
 8002bda:	89ab      	ldrh	r3, [r5, #12]
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	d501      	bpl.n	8002be4 <_vfiprintf_r+0x3c>
 8002be0:	692b      	ldr	r3, [r5, #16]
 8002be2:	b9eb      	cbnz	r3, 8002c20 <_vfiprintf_r+0x78>
 8002be4:	4629      	mov	r1, r5
 8002be6:	4630      	mov	r0, r6
 8002be8:	f000 fb5c 	bl	80032a4 <__swsetup_r>
 8002bec:	b1c0      	cbz	r0, 8002c20 <_vfiprintf_r+0x78>
 8002bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bf0:	07dc      	lsls	r4, r3, #31
 8002bf2:	d50e      	bpl.n	8002c12 <_vfiprintf_r+0x6a>
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	b01d      	add	sp, #116	; 0x74
 8002bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bfe:	4b7b      	ldr	r3, [pc, #492]	; (8002dec <_vfiprintf_r+0x244>)
 8002c00:	429d      	cmp	r5, r3
 8002c02:	d101      	bne.n	8002c08 <_vfiprintf_r+0x60>
 8002c04:	68b5      	ldr	r5, [r6, #8]
 8002c06:	e7df      	b.n	8002bc8 <_vfiprintf_r+0x20>
 8002c08:	4b79      	ldr	r3, [pc, #484]	; (8002df0 <_vfiprintf_r+0x248>)
 8002c0a:	429d      	cmp	r5, r3
 8002c0c:	bf08      	it	eq
 8002c0e:	68f5      	ldreq	r5, [r6, #12]
 8002c10:	e7da      	b.n	8002bc8 <_vfiprintf_r+0x20>
 8002c12:	89ab      	ldrh	r3, [r5, #12]
 8002c14:	0598      	lsls	r0, r3, #22
 8002c16:	d4ed      	bmi.n	8002bf4 <_vfiprintf_r+0x4c>
 8002c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c1a:	f7ff feb8 	bl	800298e <__retarget_lock_release_recursive>
 8002c1e:	e7e9      	b.n	8002bf4 <_vfiprintf_r+0x4c>
 8002c20:	2300      	movs	r3, #0
 8002c22:	9309      	str	r3, [sp, #36]	; 0x24
 8002c24:	2320      	movs	r3, #32
 8002c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c2a:	2330      	movs	r3, #48	; 0x30
 8002c2c:	f04f 0901 	mov.w	r9, #1
 8002c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002df4 <_vfiprintf_r+0x24c>
 8002c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	469a      	mov	sl, r3
 8002c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c44:	b10a      	cbz	r2, 8002c4a <_vfiprintf_r+0xa2>
 8002c46:	2a25      	cmp	r2, #37	; 0x25
 8002c48:	d1f9      	bne.n	8002c3e <_vfiprintf_r+0x96>
 8002c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8002c4e:	d00b      	beq.n	8002c68 <_vfiprintf_r+0xc0>
 8002c50:	465b      	mov	r3, fp
 8002c52:	4622      	mov	r2, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	4630      	mov	r0, r6
 8002c58:	f7ff ff93 	bl	8002b82 <__sfputs_r>
 8002c5c:	3001      	adds	r0, #1
 8002c5e:	f000 80aa 	beq.w	8002db6 <_vfiprintf_r+0x20e>
 8002c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c64:	445a      	add	r2, fp
 8002c66:	9209      	str	r2, [sp, #36]	; 0x24
 8002c68:	f89a 3000 	ldrb.w	r3, [sl]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80a2 	beq.w	8002db6 <_vfiprintf_r+0x20e>
 8002c72:	2300      	movs	r3, #0
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c7c:	f10a 0a01 	add.w	sl, sl, #1
 8002c80:	9304      	str	r3, [sp, #16]
 8002c82:	9307      	str	r3, [sp, #28]
 8002c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c88:	931a      	str	r3, [sp, #104]	; 0x68
 8002c8a:	4654      	mov	r4, sl
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c92:	4858      	ldr	r0, [pc, #352]	; (8002df4 <_vfiprintf_r+0x24c>)
 8002c94:	f000 fcc2 	bl	800361c <memchr>
 8002c98:	9a04      	ldr	r2, [sp, #16]
 8002c9a:	b9d8      	cbnz	r0, 8002cd4 <_vfiprintf_r+0x12c>
 8002c9c:	06d1      	lsls	r1, r2, #27
 8002c9e:	bf44      	itt	mi
 8002ca0:	2320      	movmi	r3, #32
 8002ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ca6:	0713      	lsls	r3, r2, #28
 8002ca8:	bf44      	itt	mi
 8002caa:	232b      	movmi	r3, #43	; 0x2b
 8002cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb6:	d015      	beq.n	8002ce4 <_vfiprintf_r+0x13c>
 8002cb8:	4654      	mov	r4, sl
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f04f 0c0a 	mov.w	ip, #10
 8002cc0:	9a07      	ldr	r2, [sp, #28]
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cc8:	3b30      	subs	r3, #48	; 0x30
 8002cca:	2b09      	cmp	r3, #9
 8002ccc:	d94e      	bls.n	8002d6c <_vfiprintf_r+0x1c4>
 8002cce:	b1b0      	cbz	r0, 8002cfe <_vfiprintf_r+0x156>
 8002cd0:	9207      	str	r2, [sp, #28]
 8002cd2:	e014      	b.n	8002cfe <_vfiprintf_r+0x156>
 8002cd4:	eba0 0308 	sub.w	r3, r0, r8
 8002cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	46a2      	mov	sl, r4
 8002ce0:	9304      	str	r3, [sp, #16]
 8002ce2:	e7d2      	b.n	8002c8a <_vfiprintf_r+0xe2>
 8002ce4:	9b03      	ldr	r3, [sp, #12]
 8002ce6:	1d19      	adds	r1, r3, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	9103      	str	r1, [sp, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bfbb      	ittet	lt
 8002cf0:	425b      	neglt	r3, r3
 8002cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8002cf6:	9307      	strge	r3, [sp, #28]
 8002cf8:	9307      	strlt	r3, [sp, #28]
 8002cfa:	bfb8      	it	lt
 8002cfc:	9204      	strlt	r2, [sp, #16]
 8002cfe:	7823      	ldrb	r3, [r4, #0]
 8002d00:	2b2e      	cmp	r3, #46	; 0x2e
 8002d02:	d10c      	bne.n	8002d1e <_vfiprintf_r+0x176>
 8002d04:	7863      	ldrb	r3, [r4, #1]
 8002d06:	2b2a      	cmp	r3, #42	; 0x2a
 8002d08:	d135      	bne.n	8002d76 <_vfiprintf_r+0x1ce>
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	3402      	adds	r4, #2
 8002d0e:	1d1a      	adds	r2, r3, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	9203      	str	r2, [sp, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bfb8      	it	lt
 8002d18:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d1c:	9305      	str	r3, [sp, #20]
 8002d1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002df8 <_vfiprintf_r+0x250>
 8002d22:	2203      	movs	r2, #3
 8002d24:	4650      	mov	r0, sl
 8002d26:	7821      	ldrb	r1, [r4, #0]
 8002d28:	f000 fc78 	bl	800361c <memchr>
 8002d2c:	b140      	cbz	r0, 8002d40 <_vfiprintf_r+0x198>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	eba0 000a 	sub.w	r0, r0, sl
 8002d34:	fa03 f000 	lsl.w	r0, r3, r0
 8002d38:	9b04      	ldr	r3, [sp, #16]
 8002d3a:	3401      	adds	r4, #1
 8002d3c:	4303      	orrs	r3, r0
 8002d3e:	9304      	str	r3, [sp, #16]
 8002d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d44:	2206      	movs	r2, #6
 8002d46:	482d      	ldr	r0, [pc, #180]	; (8002dfc <_vfiprintf_r+0x254>)
 8002d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d4c:	f000 fc66 	bl	800361c <memchr>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d03f      	beq.n	8002dd4 <_vfiprintf_r+0x22c>
 8002d54:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <_vfiprintf_r+0x258>)
 8002d56:	bb1b      	cbnz	r3, 8002da0 <_vfiprintf_r+0x1f8>
 8002d58:	9b03      	ldr	r3, [sp, #12]
 8002d5a:	3307      	adds	r3, #7
 8002d5c:	f023 0307 	bic.w	r3, r3, #7
 8002d60:	3308      	adds	r3, #8
 8002d62:	9303      	str	r3, [sp, #12]
 8002d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d66:	443b      	add	r3, r7
 8002d68:	9309      	str	r3, [sp, #36]	; 0x24
 8002d6a:	e767      	b.n	8002c3c <_vfiprintf_r+0x94>
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	2001      	movs	r0, #1
 8002d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d74:	e7a5      	b.n	8002cc2 <_vfiprintf_r+0x11a>
 8002d76:	2300      	movs	r3, #0
 8002d78:	f04f 0c0a 	mov.w	ip, #10
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	3401      	adds	r4, #1
 8002d80:	9305      	str	r3, [sp, #20]
 8002d82:	4620      	mov	r0, r4
 8002d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d88:	3a30      	subs	r2, #48	; 0x30
 8002d8a:	2a09      	cmp	r2, #9
 8002d8c:	d903      	bls.n	8002d96 <_vfiprintf_r+0x1ee>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0c5      	beq.n	8002d1e <_vfiprintf_r+0x176>
 8002d92:	9105      	str	r1, [sp, #20]
 8002d94:	e7c3      	b.n	8002d1e <_vfiprintf_r+0x176>
 8002d96:	4604      	mov	r4, r0
 8002d98:	2301      	movs	r3, #1
 8002d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d9e:	e7f0      	b.n	8002d82 <_vfiprintf_r+0x1da>
 8002da0:	ab03      	add	r3, sp, #12
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	462a      	mov	r2, r5
 8002da6:	4630      	mov	r0, r6
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <_vfiprintf_r+0x25c>)
 8002daa:	a904      	add	r1, sp, #16
 8002dac:	f3af 8000 	nop.w
 8002db0:	4607      	mov	r7, r0
 8002db2:	1c78      	adds	r0, r7, #1
 8002db4:	d1d6      	bne.n	8002d64 <_vfiprintf_r+0x1bc>
 8002db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002db8:	07d9      	lsls	r1, r3, #31
 8002dba:	d405      	bmi.n	8002dc8 <_vfiprintf_r+0x220>
 8002dbc:	89ab      	ldrh	r3, [r5, #12]
 8002dbe:	059a      	lsls	r2, r3, #22
 8002dc0:	d402      	bmi.n	8002dc8 <_vfiprintf_r+0x220>
 8002dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002dc4:	f7ff fde3 	bl	800298e <__retarget_lock_release_recursive>
 8002dc8:	89ab      	ldrh	r3, [r5, #12]
 8002dca:	065b      	lsls	r3, r3, #25
 8002dcc:	f53f af12 	bmi.w	8002bf4 <_vfiprintf_r+0x4c>
 8002dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dd2:	e711      	b.n	8002bf8 <_vfiprintf_r+0x50>
 8002dd4:	ab03      	add	r3, sp, #12
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	462a      	mov	r2, r5
 8002dda:	4630      	mov	r0, r6
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <_vfiprintf_r+0x25c>)
 8002dde:	a904      	add	r1, sp, #16
 8002de0:	f000 f882 	bl	8002ee8 <_printf_i>
 8002de4:	e7e4      	b.n	8002db0 <_vfiprintf_r+0x208>
 8002de6:	bf00      	nop
 8002de8:	0800388c 	.word	0x0800388c
 8002dec:	080038ac 	.word	0x080038ac
 8002df0:	0800386c 	.word	0x0800386c
 8002df4:	080038cc 	.word	0x080038cc
 8002df8:	080038d2 	.word	0x080038d2
 8002dfc:	080038d6 	.word	0x080038d6
 8002e00:	00000000 	.word	0x00000000
 8002e04:	08002b83 	.word	0x08002b83

08002e08 <_printf_common>:
 8002e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e0c:	4616      	mov	r6, r2
 8002e0e:	4699      	mov	r9, r3
 8002e10:	688a      	ldr	r2, [r1, #8]
 8002e12:	690b      	ldr	r3, [r1, #16]
 8002e14:	4607      	mov	r7, r0
 8002e16:	4293      	cmp	r3, r2
 8002e18:	bfb8      	it	lt
 8002e1a:	4613      	movlt	r3, r2
 8002e1c:	6033      	str	r3, [r6, #0]
 8002e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e22:	460c      	mov	r4, r1
 8002e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e28:	b10a      	cbz	r2, 8002e2e <_printf_common+0x26>
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	6033      	str	r3, [r6, #0]
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	0699      	lsls	r1, r3, #26
 8002e32:	bf42      	ittt	mi
 8002e34:	6833      	ldrmi	r3, [r6, #0]
 8002e36:	3302      	addmi	r3, #2
 8002e38:	6033      	strmi	r3, [r6, #0]
 8002e3a:	6825      	ldr	r5, [r4, #0]
 8002e3c:	f015 0506 	ands.w	r5, r5, #6
 8002e40:	d106      	bne.n	8002e50 <_printf_common+0x48>
 8002e42:	f104 0a19 	add.w	sl, r4, #25
 8002e46:	68e3      	ldr	r3, [r4, #12]
 8002e48:	6832      	ldr	r2, [r6, #0]
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	42ab      	cmp	r3, r5
 8002e4e:	dc28      	bgt.n	8002ea2 <_printf_common+0x9a>
 8002e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e54:	1e13      	subs	r3, r2, #0
 8002e56:	6822      	ldr	r2, [r4, #0]
 8002e58:	bf18      	it	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	0692      	lsls	r2, r2, #26
 8002e5e:	d42d      	bmi.n	8002ebc <_printf_common+0xb4>
 8002e60:	4649      	mov	r1, r9
 8002e62:	4638      	mov	r0, r7
 8002e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e68:	47c0      	blx	r8
 8002e6a:	3001      	adds	r0, #1
 8002e6c:	d020      	beq.n	8002eb0 <_printf_common+0xa8>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	68e5      	ldr	r5, [r4, #12]
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf18      	it	ne
 8002e7a:	2500      	movne	r5, #0
 8002e7c:	6832      	ldr	r2, [r6, #0]
 8002e7e:	f04f 0600 	mov.w	r6, #0
 8002e82:	68a3      	ldr	r3, [r4, #8]
 8002e84:	bf08      	it	eq
 8002e86:	1aad      	subeq	r5, r5, r2
 8002e88:	6922      	ldr	r2, [r4, #16]
 8002e8a:	bf08      	it	eq
 8002e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bfc4      	itt	gt
 8002e94:	1a9b      	subgt	r3, r3, r2
 8002e96:	18ed      	addgt	r5, r5, r3
 8002e98:	341a      	adds	r4, #26
 8002e9a:	42b5      	cmp	r5, r6
 8002e9c:	d11a      	bne.n	8002ed4 <_printf_common+0xcc>
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	e008      	b.n	8002eb4 <_printf_common+0xac>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	4652      	mov	r2, sl
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	47c0      	blx	r8
 8002eac:	3001      	adds	r0, #1
 8002eae:	d103      	bne.n	8002eb8 <_printf_common+0xb0>
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb8:	3501      	adds	r5, #1
 8002eba:	e7c4      	b.n	8002e46 <_printf_common+0x3e>
 8002ebc:	2030      	movs	r0, #48	; 0x30
 8002ebe:	18e1      	adds	r1, r4, r3
 8002ec0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eca:	4422      	add	r2, r4
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ed2:	e7c5      	b.n	8002e60 <_printf_common+0x58>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4638      	mov	r0, r7
 8002edc:	47c0      	blx	r8
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d0e6      	beq.n	8002eb0 <_printf_common+0xa8>
 8002ee2:	3601      	adds	r6, #1
 8002ee4:	e7d9      	b.n	8002e9a <_printf_common+0x92>
	...

08002ee8 <_printf_i>:
 8002ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002eec:	7e0f      	ldrb	r7, [r1, #24]
 8002eee:	4691      	mov	r9, r2
 8002ef0:	2f78      	cmp	r7, #120	; 0x78
 8002ef2:	4680      	mov	r8, r0
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	469a      	mov	sl, r3
 8002ef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002efe:	d807      	bhi.n	8002f10 <_printf_i+0x28>
 8002f00:	2f62      	cmp	r7, #98	; 0x62
 8002f02:	d80a      	bhi.n	8002f1a <_printf_i+0x32>
 8002f04:	2f00      	cmp	r7, #0
 8002f06:	f000 80d9 	beq.w	80030bc <_printf_i+0x1d4>
 8002f0a:	2f58      	cmp	r7, #88	; 0x58
 8002f0c:	f000 80a4 	beq.w	8003058 <_printf_i+0x170>
 8002f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f18:	e03a      	b.n	8002f90 <_printf_i+0xa8>
 8002f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f1e:	2b15      	cmp	r3, #21
 8002f20:	d8f6      	bhi.n	8002f10 <_printf_i+0x28>
 8002f22:	a101      	add	r1, pc, #4	; (adr r1, 8002f28 <_printf_i+0x40>)
 8002f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f28:	08002f81 	.word	0x08002f81
 8002f2c:	08002f95 	.word	0x08002f95
 8002f30:	08002f11 	.word	0x08002f11
 8002f34:	08002f11 	.word	0x08002f11
 8002f38:	08002f11 	.word	0x08002f11
 8002f3c:	08002f11 	.word	0x08002f11
 8002f40:	08002f95 	.word	0x08002f95
 8002f44:	08002f11 	.word	0x08002f11
 8002f48:	08002f11 	.word	0x08002f11
 8002f4c:	08002f11 	.word	0x08002f11
 8002f50:	08002f11 	.word	0x08002f11
 8002f54:	080030a3 	.word	0x080030a3
 8002f58:	08002fc5 	.word	0x08002fc5
 8002f5c:	08003085 	.word	0x08003085
 8002f60:	08002f11 	.word	0x08002f11
 8002f64:	08002f11 	.word	0x08002f11
 8002f68:	080030c5 	.word	0x080030c5
 8002f6c:	08002f11 	.word	0x08002f11
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002f11 	.word	0x08002f11
 8002f78:	08002f11 	.word	0x08002f11
 8002f7c:	0800308d 	.word	0x0800308d
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	1d1a      	adds	r2, r3, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	602a      	str	r2, [r5, #0]
 8002f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0a4      	b.n	80030de <_printf_i+0x1f6>
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	6829      	ldr	r1, [r5, #0]
 8002f98:	0606      	lsls	r6, r0, #24
 8002f9a:	f101 0304 	add.w	r3, r1, #4
 8002f9e:	d50a      	bpl.n	8002fb6 <_printf_i+0xce>
 8002fa0:	680e      	ldr	r6, [r1, #0]
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	2e00      	cmp	r6, #0
 8002fa6:	da03      	bge.n	8002fb0 <_printf_i+0xc8>
 8002fa8:	232d      	movs	r3, #45	; 0x2d
 8002faa:	4276      	negs	r6, r6
 8002fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fb0:	230a      	movs	r3, #10
 8002fb2:	485e      	ldr	r0, [pc, #376]	; (800312c <_printf_i+0x244>)
 8002fb4:	e019      	b.n	8002fea <_printf_i+0x102>
 8002fb6:	680e      	ldr	r6, [r1, #0]
 8002fb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fbc:	602b      	str	r3, [r5, #0]
 8002fbe:	bf18      	it	ne
 8002fc0:	b236      	sxthne	r6, r6
 8002fc2:	e7ef      	b.n	8002fa4 <_printf_i+0xbc>
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	6820      	ldr	r0, [r4, #0]
 8002fc8:	1d19      	adds	r1, r3, #4
 8002fca:	6029      	str	r1, [r5, #0]
 8002fcc:	0601      	lsls	r1, r0, #24
 8002fce:	d501      	bpl.n	8002fd4 <_printf_i+0xec>
 8002fd0:	681e      	ldr	r6, [r3, #0]
 8002fd2:	e002      	b.n	8002fda <_printf_i+0xf2>
 8002fd4:	0646      	lsls	r6, r0, #25
 8002fd6:	d5fb      	bpl.n	8002fd0 <_printf_i+0xe8>
 8002fd8:	881e      	ldrh	r6, [r3, #0]
 8002fda:	2f6f      	cmp	r7, #111	; 0x6f
 8002fdc:	bf0c      	ite	eq
 8002fde:	2308      	moveq	r3, #8
 8002fe0:	230a      	movne	r3, #10
 8002fe2:	4852      	ldr	r0, [pc, #328]	; (800312c <_printf_i+0x244>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fea:	6865      	ldr	r5, [r4, #4]
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	bfa8      	it	ge
 8002ff0:	6821      	ldrge	r1, [r4, #0]
 8002ff2:	60a5      	str	r5, [r4, #8]
 8002ff4:	bfa4      	itt	ge
 8002ff6:	f021 0104 	bicge.w	r1, r1, #4
 8002ffa:	6021      	strge	r1, [r4, #0]
 8002ffc:	b90e      	cbnz	r6, 8003002 <_printf_i+0x11a>
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	d04d      	beq.n	800309e <_printf_i+0x1b6>
 8003002:	4615      	mov	r5, r2
 8003004:	fbb6 f1f3 	udiv	r1, r6, r3
 8003008:	fb03 6711 	mls	r7, r3, r1, r6
 800300c:	5dc7      	ldrb	r7, [r0, r7]
 800300e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003012:	4637      	mov	r7, r6
 8003014:	42bb      	cmp	r3, r7
 8003016:	460e      	mov	r6, r1
 8003018:	d9f4      	bls.n	8003004 <_printf_i+0x11c>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d10b      	bne.n	8003036 <_printf_i+0x14e>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	07de      	lsls	r6, r3, #31
 8003022:	d508      	bpl.n	8003036 <_printf_i+0x14e>
 8003024:	6923      	ldr	r3, [r4, #16]
 8003026:	6861      	ldr	r1, [r4, #4]
 8003028:	4299      	cmp	r1, r3
 800302a:	bfde      	ittt	le
 800302c:	2330      	movle	r3, #48	; 0x30
 800302e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003032:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003036:	1b52      	subs	r2, r2, r5
 8003038:	6122      	str	r2, [r4, #16]
 800303a:	464b      	mov	r3, r9
 800303c:	4621      	mov	r1, r4
 800303e:	4640      	mov	r0, r8
 8003040:	f8cd a000 	str.w	sl, [sp]
 8003044:	aa03      	add	r2, sp, #12
 8003046:	f7ff fedf 	bl	8002e08 <_printf_common>
 800304a:	3001      	adds	r0, #1
 800304c:	d14c      	bne.n	80030e8 <_printf_i+0x200>
 800304e:	f04f 30ff 	mov.w	r0, #4294967295
 8003052:	b004      	add	sp, #16
 8003054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003058:	4834      	ldr	r0, [pc, #208]	; (800312c <_printf_i+0x244>)
 800305a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800305e:	6829      	ldr	r1, [r5, #0]
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	f851 6b04 	ldr.w	r6, [r1], #4
 8003066:	6029      	str	r1, [r5, #0]
 8003068:	061d      	lsls	r5, r3, #24
 800306a:	d514      	bpl.n	8003096 <_printf_i+0x1ae>
 800306c:	07df      	lsls	r7, r3, #31
 800306e:	bf44      	itt	mi
 8003070:	f043 0320 	orrmi.w	r3, r3, #32
 8003074:	6023      	strmi	r3, [r4, #0]
 8003076:	b91e      	cbnz	r6, 8003080 <_printf_i+0x198>
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	f023 0320 	bic.w	r3, r3, #32
 800307e:	6023      	str	r3, [r4, #0]
 8003080:	2310      	movs	r3, #16
 8003082:	e7af      	b.n	8002fe4 <_printf_i+0xfc>
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	f043 0320 	orr.w	r3, r3, #32
 800308a:	6023      	str	r3, [r4, #0]
 800308c:	2378      	movs	r3, #120	; 0x78
 800308e:	4828      	ldr	r0, [pc, #160]	; (8003130 <_printf_i+0x248>)
 8003090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003094:	e7e3      	b.n	800305e <_printf_i+0x176>
 8003096:	0659      	lsls	r1, r3, #25
 8003098:	bf48      	it	mi
 800309a:	b2b6      	uxthmi	r6, r6
 800309c:	e7e6      	b.n	800306c <_printf_i+0x184>
 800309e:	4615      	mov	r5, r2
 80030a0:	e7bb      	b.n	800301a <_printf_i+0x132>
 80030a2:	682b      	ldr	r3, [r5, #0]
 80030a4:	6826      	ldr	r6, [r4, #0]
 80030a6:	1d18      	adds	r0, r3, #4
 80030a8:	6961      	ldr	r1, [r4, #20]
 80030aa:	6028      	str	r0, [r5, #0]
 80030ac:	0635      	lsls	r5, r6, #24
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	d501      	bpl.n	80030b6 <_printf_i+0x1ce>
 80030b2:	6019      	str	r1, [r3, #0]
 80030b4:	e002      	b.n	80030bc <_printf_i+0x1d4>
 80030b6:	0670      	lsls	r0, r6, #25
 80030b8:	d5fb      	bpl.n	80030b2 <_printf_i+0x1ca>
 80030ba:	8019      	strh	r1, [r3, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	4615      	mov	r5, r2
 80030c0:	6123      	str	r3, [r4, #16]
 80030c2:	e7ba      	b.n	800303a <_printf_i+0x152>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	2100      	movs	r1, #0
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	602a      	str	r2, [r5, #0]
 80030cc:	681d      	ldr	r5, [r3, #0]
 80030ce:	6862      	ldr	r2, [r4, #4]
 80030d0:	4628      	mov	r0, r5
 80030d2:	f000 faa3 	bl	800361c <memchr>
 80030d6:	b108      	cbz	r0, 80030dc <_printf_i+0x1f4>
 80030d8:	1b40      	subs	r0, r0, r5
 80030da:	6060      	str	r0, [r4, #4]
 80030dc:	6863      	ldr	r3, [r4, #4]
 80030de:	6123      	str	r3, [r4, #16]
 80030e0:	2300      	movs	r3, #0
 80030e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e6:	e7a8      	b.n	800303a <_printf_i+0x152>
 80030e8:	462a      	mov	r2, r5
 80030ea:	4649      	mov	r1, r9
 80030ec:	4640      	mov	r0, r8
 80030ee:	6923      	ldr	r3, [r4, #16]
 80030f0:	47d0      	blx	sl
 80030f2:	3001      	adds	r0, #1
 80030f4:	d0ab      	beq.n	800304e <_printf_i+0x166>
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	079b      	lsls	r3, r3, #30
 80030fa:	d413      	bmi.n	8003124 <_printf_i+0x23c>
 80030fc:	68e0      	ldr	r0, [r4, #12]
 80030fe:	9b03      	ldr	r3, [sp, #12]
 8003100:	4298      	cmp	r0, r3
 8003102:	bfb8      	it	lt
 8003104:	4618      	movlt	r0, r3
 8003106:	e7a4      	b.n	8003052 <_printf_i+0x16a>
 8003108:	2301      	movs	r3, #1
 800310a:	4632      	mov	r2, r6
 800310c:	4649      	mov	r1, r9
 800310e:	4640      	mov	r0, r8
 8003110:	47d0      	blx	sl
 8003112:	3001      	adds	r0, #1
 8003114:	d09b      	beq.n	800304e <_printf_i+0x166>
 8003116:	3501      	adds	r5, #1
 8003118:	68e3      	ldr	r3, [r4, #12]
 800311a:	9903      	ldr	r1, [sp, #12]
 800311c:	1a5b      	subs	r3, r3, r1
 800311e:	42ab      	cmp	r3, r5
 8003120:	dcf2      	bgt.n	8003108 <_printf_i+0x220>
 8003122:	e7eb      	b.n	80030fc <_printf_i+0x214>
 8003124:	2500      	movs	r5, #0
 8003126:	f104 0619 	add.w	r6, r4, #25
 800312a:	e7f5      	b.n	8003118 <_printf_i+0x230>
 800312c:	080038dd 	.word	0x080038dd
 8003130:	080038ee 	.word	0x080038ee

08003134 <_sbrk_r>:
 8003134:	b538      	push	{r3, r4, r5, lr}
 8003136:	2300      	movs	r3, #0
 8003138:	4d05      	ldr	r5, [pc, #20]	; (8003150 <_sbrk_r+0x1c>)
 800313a:	4604      	mov	r4, r0
 800313c:	4608      	mov	r0, r1
 800313e:	602b      	str	r3, [r5, #0]
 8003140:	f7fd fb70 	bl	8000824 <_sbrk>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_sbrk_r+0x1a>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	b103      	cbz	r3, 800314e <_sbrk_r+0x1a>
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20000138 	.word	0x20000138

08003154 <__sread>:
 8003154:	b510      	push	{r4, lr}
 8003156:	460c      	mov	r4, r1
 8003158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315c:	f000 fa78 	bl	8003650 <_read_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	bfab      	itete	ge
 8003164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003166:	89a3      	ldrhlt	r3, [r4, #12]
 8003168:	181b      	addge	r3, r3, r0
 800316a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800316e:	bfac      	ite	ge
 8003170:	6563      	strge	r3, [r4, #84]	; 0x54
 8003172:	81a3      	strhlt	r3, [r4, #12]
 8003174:	bd10      	pop	{r4, pc}

08003176 <__swrite>:
 8003176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800317a:	461f      	mov	r7, r3
 800317c:	898b      	ldrh	r3, [r1, #12]
 800317e:	4605      	mov	r5, r0
 8003180:	05db      	lsls	r3, r3, #23
 8003182:	460c      	mov	r4, r1
 8003184:	4616      	mov	r6, r2
 8003186:	d505      	bpl.n	8003194 <__swrite+0x1e>
 8003188:	2302      	movs	r3, #2
 800318a:	2200      	movs	r2, #0
 800318c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003190:	f000 f9cc 	bl	800352c <_lseek_r>
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	4632      	mov	r2, r6
 8003198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	4628      	mov	r0, r5
 80031a0:	463b      	mov	r3, r7
 80031a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031aa:	f000 b869 	b.w	8003280 <_write_r>

080031ae <__sseek>:
 80031ae:	b510      	push	{r4, lr}
 80031b0:	460c      	mov	r4, r1
 80031b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b6:	f000 f9b9 	bl	800352c <_lseek_r>
 80031ba:	1c43      	adds	r3, r0, #1
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	bf15      	itete	ne
 80031c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80031c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031ca:	81a3      	strheq	r3, [r4, #12]
 80031cc:	bf18      	it	ne
 80031ce:	81a3      	strhne	r3, [r4, #12]
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <__sclose>:
 80031d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d6:	f000 b8db 	b.w	8003390 <_close_r>
	...

080031dc <__swbuf_r>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	460e      	mov	r6, r1
 80031e0:	4614      	mov	r4, r2
 80031e2:	4605      	mov	r5, r0
 80031e4:	b118      	cbz	r0, 80031ee <__swbuf_r+0x12>
 80031e6:	6983      	ldr	r3, [r0, #24]
 80031e8:	b90b      	cbnz	r3, 80031ee <__swbuf_r+0x12>
 80031ea:	f7ff fb1f 	bl	800282c <__sinit>
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <__swbuf_r+0x98>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	d12b      	bne.n	800324c <__swbuf_r+0x70>
 80031f4:	686c      	ldr	r4, [r5, #4]
 80031f6:	69a3      	ldr	r3, [r4, #24]
 80031f8:	60a3      	str	r3, [r4, #8]
 80031fa:	89a3      	ldrh	r3, [r4, #12]
 80031fc:	071a      	lsls	r2, r3, #28
 80031fe:	d52f      	bpl.n	8003260 <__swbuf_r+0x84>
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	b36b      	cbz	r3, 8003260 <__swbuf_r+0x84>
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	6820      	ldr	r0, [r4, #0]
 8003208:	b2f6      	uxtb	r6, r6
 800320a:	1ac0      	subs	r0, r0, r3
 800320c:	6963      	ldr	r3, [r4, #20]
 800320e:	4637      	mov	r7, r6
 8003210:	4283      	cmp	r3, r0
 8003212:	dc04      	bgt.n	800321e <__swbuf_r+0x42>
 8003214:	4621      	mov	r1, r4
 8003216:	4628      	mov	r0, r5
 8003218:	f000 f94c 	bl	80034b4 <_fflush_r>
 800321c:	bb30      	cbnz	r0, 800326c <__swbuf_r+0x90>
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	3001      	adds	r0, #1
 8003222:	3b01      	subs	r3, #1
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	6022      	str	r2, [r4, #0]
 800322c:	701e      	strb	r6, [r3, #0]
 800322e:	6963      	ldr	r3, [r4, #20]
 8003230:	4283      	cmp	r3, r0
 8003232:	d004      	beq.n	800323e <__swbuf_r+0x62>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	07db      	lsls	r3, r3, #31
 8003238:	d506      	bpl.n	8003248 <__swbuf_r+0x6c>
 800323a:	2e0a      	cmp	r6, #10
 800323c:	d104      	bne.n	8003248 <__swbuf_r+0x6c>
 800323e:	4621      	mov	r1, r4
 8003240:	4628      	mov	r0, r5
 8003242:	f000 f937 	bl	80034b4 <_fflush_r>
 8003246:	b988      	cbnz	r0, 800326c <__swbuf_r+0x90>
 8003248:	4638      	mov	r0, r7
 800324a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <__swbuf_r+0x9c>)
 800324e:	429c      	cmp	r4, r3
 8003250:	d101      	bne.n	8003256 <__swbuf_r+0x7a>
 8003252:	68ac      	ldr	r4, [r5, #8]
 8003254:	e7cf      	b.n	80031f6 <__swbuf_r+0x1a>
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <__swbuf_r+0xa0>)
 8003258:	429c      	cmp	r4, r3
 800325a:	bf08      	it	eq
 800325c:	68ec      	ldreq	r4, [r5, #12]
 800325e:	e7ca      	b.n	80031f6 <__swbuf_r+0x1a>
 8003260:	4621      	mov	r1, r4
 8003262:	4628      	mov	r0, r5
 8003264:	f000 f81e 	bl	80032a4 <__swsetup_r>
 8003268:	2800      	cmp	r0, #0
 800326a:	d0cb      	beq.n	8003204 <__swbuf_r+0x28>
 800326c:	f04f 37ff 	mov.w	r7, #4294967295
 8003270:	e7ea      	b.n	8003248 <__swbuf_r+0x6c>
 8003272:	bf00      	nop
 8003274:	0800388c 	.word	0x0800388c
 8003278:	080038ac 	.word	0x080038ac
 800327c:	0800386c 	.word	0x0800386c

08003280 <_write_r>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	2200      	movs	r2, #0
 800328a:	4d05      	ldr	r5, [pc, #20]	; (80032a0 <_write_r+0x20>)
 800328c:	602a      	str	r2, [r5, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	f7fd fa7b 	bl	800078a <_write>
 8003294:	1c43      	adds	r3, r0, #1
 8003296:	d102      	bne.n	800329e <_write_r+0x1e>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	b103      	cbz	r3, 800329e <_write_r+0x1e>
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	bd38      	pop	{r3, r4, r5, pc}
 80032a0:	20000138 	.word	0x20000138

080032a4 <__swsetup_r>:
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <__swsetup_r+0xcc>)
 80032a6:	b570      	push	{r4, r5, r6, lr}
 80032a8:	681d      	ldr	r5, [r3, #0]
 80032aa:	4606      	mov	r6, r0
 80032ac:	460c      	mov	r4, r1
 80032ae:	b125      	cbz	r5, 80032ba <__swsetup_r+0x16>
 80032b0:	69ab      	ldr	r3, [r5, #24]
 80032b2:	b913      	cbnz	r3, 80032ba <__swsetup_r+0x16>
 80032b4:	4628      	mov	r0, r5
 80032b6:	f7ff fab9 	bl	800282c <__sinit>
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <__swsetup_r+0xd0>)
 80032bc:	429c      	cmp	r4, r3
 80032be:	d10f      	bne.n	80032e0 <__swsetup_r+0x3c>
 80032c0:	686c      	ldr	r4, [r5, #4]
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032c8:	0719      	lsls	r1, r3, #28
 80032ca:	d42c      	bmi.n	8003326 <__swsetup_r+0x82>
 80032cc:	06dd      	lsls	r5, r3, #27
 80032ce:	d411      	bmi.n	80032f4 <__swsetup_r+0x50>
 80032d0:	2309      	movs	r3, #9
 80032d2:	6033      	str	r3, [r6, #0]
 80032d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	e03e      	b.n	800335e <__swsetup_r+0xba>
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <__swsetup_r+0xd4>)
 80032e2:	429c      	cmp	r4, r3
 80032e4:	d101      	bne.n	80032ea <__swsetup_r+0x46>
 80032e6:	68ac      	ldr	r4, [r5, #8]
 80032e8:	e7eb      	b.n	80032c2 <__swsetup_r+0x1e>
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <__swsetup_r+0xd8>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	bf08      	it	eq
 80032f0:	68ec      	ldreq	r4, [r5, #12]
 80032f2:	e7e6      	b.n	80032c2 <__swsetup_r+0x1e>
 80032f4:	0758      	lsls	r0, r3, #29
 80032f6:	d512      	bpl.n	800331e <__swsetup_r+0x7a>
 80032f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032fa:	b141      	cbz	r1, 800330e <__swsetup_r+0x6a>
 80032fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003300:	4299      	cmp	r1, r3
 8003302:	d002      	beq.n	800330a <__swsetup_r+0x66>
 8003304:	4630      	mov	r0, r6
 8003306:	f7ff fb4b 	bl	80029a0 <_free_r>
 800330a:	2300      	movs	r3, #0
 800330c:	6363      	str	r3, [r4, #52]	; 0x34
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	2300      	movs	r3, #0
 8003318:	6063      	str	r3, [r4, #4]
 800331a:	6923      	ldr	r3, [r4, #16]
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	89a3      	ldrh	r3, [r4, #12]
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	81a3      	strh	r3, [r4, #12]
 8003326:	6923      	ldr	r3, [r4, #16]
 8003328:	b94b      	cbnz	r3, 800333e <__swsetup_r+0x9a>
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003334:	d003      	beq.n	800333e <__swsetup_r+0x9a>
 8003336:	4621      	mov	r1, r4
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f92f 	bl	800359c <__smakebuf_r>
 800333e:	89a0      	ldrh	r0, [r4, #12]
 8003340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003344:	f010 0301 	ands.w	r3, r0, #1
 8003348:	d00a      	beq.n	8003360 <__swsetup_r+0xbc>
 800334a:	2300      	movs	r3, #0
 800334c:	60a3      	str	r3, [r4, #8]
 800334e:	6963      	ldr	r3, [r4, #20]
 8003350:	425b      	negs	r3, r3
 8003352:	61a3      	str	r3, [r4, #24]
 8003354:	6923      	ldr	r3, [r4, #16]
 8003356:	b943      	cbnz	r3, 800336a <__swsetup_r+0xc6>
 8003358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800335c:	d1ba      	bne.n	80032d4 <__swsetup_r+0x30>
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	0781      	lsls	r1, r0, #30
 8003362:	bf58      	it	pl
 8003364:	6963      	ldrpl	r3, [r4, #20]
 8003366:	60a3      	str	r3, [r4, #8]
 8003368:	e7f4      	b.n	8003354 <__swsetup_r+0xb0>
 800336a:	2000      	movs	r0, #0
 800336c:	e7f7      	b.n	800335e <__swsetup_r+0xba>
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c
 8003374:	0800388c 	.word	0x0800388c
 8003378:	080038ac 	.word	0x080038ac
 800337c:	0800386c 	.word	0x0800386c

08003380 <abort>:
 8003380:	2006      	movs	r0, #6
 8003382:	b508      	push	{r3, lr}
 8003384:	f000 f99e 	bl	80036c4 <raise>
 8003388:	2001      	movs	r0, #1
 800338a:	f7fd f9d7 	bl	800073c <_exit>
	...

08003390 <_close_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	2300      	movs	r3, #0
 8003394:	4d05      	ldr	r5, [pc, #20]	; (80033ac <_close_r+0x1c>)
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	f7fd fa11 	bl	80007c2 <_close>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_close_r+0x1a>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_close_r+0x1a>
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	20000138 	.word	0x20000138

080033b0 <__sflush_r>:
 80033b0:	898a      	ldrh	r2, [r1, #12]
 80033b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b4:	4605      	mov	r5, r0
 80033b6:	0710      	lsls	r0, r2, #28
 80033b8:	460c      	mov	r4, r1
 80033ba:	d457      	bmi.n	800346c <__sflush_r+0xbc>
 80033bc:	684b      	ldr	r3, [r1, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dc04      	bgt.n	80033cc <__sflush_r+0x1c>
 80033c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	dc01      	bgt.n	80033cc <__sflush_r+0x1c>
 80033c8:	2000      	movs	r0, #0
 80033ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ce:	2e00      	cmp	r6, #0
 80033d0:	d0fa      	beq.n	80033c8 <__sflush_r+0x18>
 80033d2:	2300      	movs	r3, #0
 80033d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033d8:	682f      	ldr	r7, [r5, #0]
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	d032      	beq.n	8003444 <__sflush_r+0x94>
 80033de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	075a      	lsls	r2, r3, #29
 80033e4:	d505      	bpl.n	80033f2 <__sflush_r+0x42>
 80033e6:	6863      	ldr	r3, [r4, #4]
 80033e8:	1ac0      	subs	r0, r0, r3
 80033ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ec:	b10b      	cbz	r3, 80033f2 <__sflush_r+0x42>
 80033ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033f0:	1ac0      	subs	r0, r0, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	4602      	mov	r2, r0
 80033f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033f8:	4628      	mov	r0, r5
 80033fa:	6a21      	ldr	r1, [r4, #32]
 80033fc:	47b0      	blx	r6
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	d106      	bne.n	8003412 <__sflush_r+0x62>
 8003404:	6829      	ldr	r1, [r5, #0]
 8003406:	291d      	cmp	r1, #29
 8003408:	d82c      	bhi.n	8003464 <__sflush_r+0xb4>
 800340a:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <__sflush_r+0x100>)
 800340c:	40ca      	lsrs	r2, r1
 800340e:	07d6      	lsls	r6, r2, #31
 8003410:	d528      	bpl.n	8003464 <__sflush_r+0xb4>
 8003412:	2200      	movs	r2, #0
 8003414:	6062      	str	r2, [r4, #4]
 8003416:	6922      	ldr	r2, [r4, #16]
 8003418:	04d9      	lsls	r1, r3, #19
 800341a:	6022      	str	r2, [r4, #0]
 800341c:	d504      	bpl.n	8003428 <__sflush_r+0x78>
 800341e:	1c42      	adds	r2, r0, #1
 8003420:	d101      	bne.n	8003426 <__sflush_r+0x76>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	b903      	cbnz	r3, 8003428 <__sflush_r+0x78>
 8003426:	6560      	str	r0, [r4, #84]	; 0x54
 8003428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800342a:	602f      	str	r7, [r5, #0]
 800342c:	2900      	cmp	r1, #0
 800342e:	d0cb      	beq.n	80033c8 <__sflush_r+0x18>
 8003430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003434:	4299      	cmp	r1, r3
 8003436:	d002      	beq.n	800343e <__sflush_r+0x8e>
 8003438:	4628      	mov	r0, r5
 800343a:	f7ff fab1 	bl	80029a0 <_free_r>
 800343e:	2000      	movs	r0, #0
 8003440:	6360      	str	r0, [r4, #52]	; 0x34
 8003442:	e7c2      	b.n	80033ca <__sflush_r+0x1a>
 8003444:	6a21      	ldr	r1, [r4, #32]
 8003446:	2301      	movs	r3, #1
 8003448:	4628      	mov	r0, r5
 800344a:	47b0      	blx	r6
 800344c:	1c41      	adds	r1, r0, #1
 800344e:	d1c7      	bne.n	80033e0 <__sflush_r+0x30>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0c4      	beq.n	80033e0 <__sflush_r+0x30>
 8003456:	2b1d      	cmp	r3, #29
 8003458:	d001      	beq.n	800345e <__sflush_r+0xae>
 800345a:	2b16      	cmp	r3, #22
 800345c:	d101      	bne.n	8003462 <__sflush_r+0xb2>
 800345e:	602f      	str	r7, [r5, #0]
 8003460:	e7b2      	b.n	80033c8 <__sflush_r+0x18>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003468:	81a3      	strh	r3, [r4, #12]
 800346a:	e7ae      	b.n	80033ca <__sflush_r+0x1a>
 800346c:	690f      	ldr	r7, [r1, #16]
 800346e:	2f00      	cmp	r7, #0
 8003470:	d0aa      	beq.n	80033c8 <__sflush_r+0x18>
 8003472:	0793      	lsls	r3, r2, #30
 8003474:	bf18      	it	ne
 8003476:	2300      	movne	r3, #0
 8003478:	680e      	ldr	r6, [r1, #0]
 800347a:	bf08      	it	eq
 800347c:	694b      	ldreq	r3, [r1, #20]
 800347e:	1bf6      	subs	r6, r6, r7
 8003480:	600f      	str	r7, [r1, #0]
 8003482:	608b      	str	r3, [r1, #8]
 8003484:	2e00      	cmp	r6, #0
 8003486:	dd9f      	ble.n	80033c8 <__sflush_r+0x18>
 8003488:	4633      	mov	r3, r6
 800348a:	463a      	mov	r2, r7
 800348c:	4628      	mov	r0, r5
 800348e:	6a21      	ldr	r1, [r4, #32]
 8003490:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003494:	47e0      	blx	ip
 8003496:	2800      	cmp	r0, #0
 8003498:	dc06      	bgt.n	80034a8 <__sflush_r+0xf8>
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	e790      	b.n	80033ca <__sflush_r+0x1a>
 80034a8:	4407      	add	r7, r0
 80034aa:	1a36      	subs	r6, r6, r0
 80034ac:	e7ea      	b.n	8003484 <__sflush_r+0xd4>
 80034ae:	bf00      	nop
 80034b0:	20400001 	.word	0x20400001

080034b4 <_fflush_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	690b      	ldr	r3, [r1, #16]
 80034b8:	4605      	mov	r5, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	b913      	cbnz	r3, 80034c4 <_fflush_r+0x10>
 80034be:	2500      	movs	r5, #0
 80034c0:	4628      	mov	r0, r5
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	b118      	cbz	r0, 80034ce <_fflush_r+0x1a>
 80034c6:	6983      	ldr	r3, [r0, #24]
 80034c8:	b90b      	cbnz	r3, 80034ce <_fflush_r+0x1a>
 80034ca:	f7ff f9af 	bl	800282c <__sinit>
 80034ce:	4b14      	ldr	r3, [pc, #80]	; (8003520 <_fflush_r+0x6c>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	d11b      	bne.n	800350c <_fflush_r+0x58>
 80034d4:	686c      	ldr	r4, [r5, #4]
 80034d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ef      	beq.n	80034be <_fflush_r+0xa>
 80034de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034e0:	07d0      	lsls	r0, r2, #31
 80034e2:	d404      	bmi.n	80034ee <_fflush_r+0x3a>
 80034e4:	0599      	lsls	r1, r3, #22
 80034e6:	d402      	bmi.n	80034ee <_fflush_r+0x3a>
 80034e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ea:	f7ff fa4f 	bl	800298c <__retarget_lock_acquire_recursive>
 80034ee:	4628      	mov	r0, r5
 80034f0:	4621      	mov	r1, r4
 80034f2:	f7ff ff5d 	bl	80033b0 <__sflush_r>
 80034f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034f8:	4605      	mov	r5, r0
 80034fa:	07da      	lsls	r2, r3, #31
 80034fc:	d4e0      	bmi.n	80034c0 <_fflush_r+0xc>
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	059b      	lsls	r3, r3, #22
 8003502:	d4dd      	bmi.n	80034c0 <_fflush_r+0xc>
 8003504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003506:	f7ff fa42 	bl	800298e <__retarget_lock_release_recursive>
 800350a:	e7d9      	b.n	80034c0 <_fflush_r+0xc>
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <_fflush_r+0x70>)
 800350e:	429c      	cmp	r4, r3
 8003510:	d101      	bne.n	8003516 <_fflush_r+0x62>
 8003512:	68ac      	ldr	r4, [r5, #8]
 8003514:	e7df      	b.n	80034d6 <_fflush_r+0x22>
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <_fflush_r+0x74>)
 8003518:	429c      	cmp	r4, r3
 800351a:	bf08      	it	eq
 800351c:	68ec      	ldreq	r4, [r5, #12]
 800351e:	e7da      	b.n	80034d6 <_fflush_r+0x22>
 8003520:	0800388c 	.word	0x0800388c
 8003524:	080038ac 	.word	0x080038ac
 8003528:	0800386c 	.word	0x0800386c

0800352c <_lseek_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	2200      	movs	r2, #0
 8003536:	4d05      	ldr	r5, [pc, #20]	; (800354c <_lseek_r+0x20>)
 8003538:	602a      	str	r2, [r5, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f7fd f965 	bl	800080a <_lseek>
 8003540:	1c43      	adds	r3, r0, #1
 8003542:	d102      	bne.n	800354a <_lseek_r+0x1e>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	b103      	cbz	r3, 800354a <_lseek_r+0x1e>
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	bd38      	pop	{r3, r4, r5, pc}
 800354c:	20000138 	.word	0x20000138

08003550 <__swhatbuf_r>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	460e      	mov	r6, r1
 8003554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003558:	4614      	mov	r4, r2
 800355a:	2900      	cmp	r1, #0
 800355c:	461d      	mov	r5, r3
 800355e:	b096      	sub	sp, #88	; 0x58
 8003560:	da08      	bge.n	8003574 <__swhatbuf_r+0x24>
 8003562:	2200      	movs	r2, #0
 8003564:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003568:	602a      	str	r2, [r5, #0]
 800356a:	061a      	lsls	r2, r3, #24
 800356c:	d410      	bmi.n	8003590 <__swhatbuf_r+0x40>
 800356e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003572:	e00e      	b.n	8003592 <__swhatbuf_r+0x42>
 8003574:	466a      	mov	r2, sp
 8003576:	f000 f8c1 	bl	80036fc <_fstat_r>
 800357a:	2800      	cmp	r0, #0
 800357c:	dbf1      	blt.n	8003562 <__swhatbuf_r+0x12>
 800357e:	9a01      	ldr	r2, [sp, #4]
 8003580:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003584:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003588:	425a      	negs	r2, r3
 800358a:	415a      	adcs	r2, r3
 800358c:	602a      	str	r2, [r5, #0]
 800358e:	e7ee      	b.n	800356e <__swhatbuf_r+0x1e>
 8003590:	2340      	movs	r3, #64	; 0x40
 8003592:	2000      	movs	r0, #0
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	b016      	add	sp, #88	; 0x58
 8003598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800359c <__smakebuf_r>:
 800359c:	898b      	ldrh	r3, [r1, #12]
 800359e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035a0:	079d      	lsls	r5, r3, #30
 80035a2:	4606      	mov	r6, r0
 80035a4:	460c      	mov	r4, r1
 80035a6:	d507      	bpl.n	80035b8 <__smakebuf_r+0x1c>
 80035a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	6123      	str	r3, [r4, #16]
 80035b0:	2301      	movs	r3, #1
 80035b2:	6163      	str	r3, [r4, #20]
 80035b4:	b002      	add	sp, #8
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	466a      	mov	r2, sp
 80035ba:	ab01      	add	r3, sp, #4
 80035bc:	f7ff ffc8 	bl	8003550 <__swhatbuf_r>
 80035c0:	9900      	ldr	r1, [sp, #0]
 80035c2:	4605      	mov	r5, r0
 80035c4:	4630      	mov	r0, r6
 80035c6:	f7ff fa53 	bl	8002a70 <_malloc_r>
 80035ca:	b948      	cbnz	r0, 80035e0 <__smakebuf_r+0x44>
 80035cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d0:	059a      	lsls	r2, r3, #22
 80035d2:	d4ef      	bmi.n	80035b4 <__smakebuf_r+0x18>
 80035d4:	f023 0303 	bic.w	r3, r3, #3
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	81a3      	strh	r3, [r4, #12]
 80035de:	e7e3      	b.n	80035a8 <__smakebuf_r+0xc>
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <__smakebuf_r+0x7c>)
 80035e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80035e4:	89a3      	ldrh	r3, [r4, #12]
 80035e6:	6020      	str	r0, [r4, #0]
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	9b00      	ldr	r3, [sp, #0]
 80035f0:	6120      	str	r0, [r4, #16]
 80035f2:	6163      	str	r3, [r4, #20]
 80035f4:	9b01      	ldr	r3, [sp, #4]
 80035f6:	b15b      	cbz	r3, 8003610 <__smakebuf_r+0x74>
 80035f8:	4630      	mov	r0, r6
 80035fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035fe:	f000 f88f 	bl	8003720 <_isatty_r>
 8003602:	b128      	cbz	r0, 8003610 <__smakebuf_r+0x74>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	89a0      	ldrh	r0, [r4, #12]
 8003612:	4305      	orrs	r5, r0
 8003614:	81a5      	strh	r5, [r4, #12]
 8003616:	e7cd      	b.n	80035b4 <__smakebuf_r+0x18>
 8003618:	080027c5 	.word	0x080027c5

0800361c <memchr>:
 800361c:	4603      	mov	r3, r0
 800361e:	b510      	push	{r4, lr}
 8003620:	b2c9      	uxtb	r1, r1
 8003622:	4402      	add	r2, r0
 8003624:	4293      	cmp	r3, r2
 8003626:	4618      	mov	r0, r3
 8003628:	d101      	bne.n	800362e <memchr+0x12>
 800362a:	2000      	movs	r0, #0
 800362c:	e003      	b.n	8003636 <memchr+0x1a>
 800362e:	7804      	ldrb	r4, [r0, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	428c      	cmp	r4, r1
 8003634:	d1f6      	bne.n	8003624 <memchr+0x8>
 8003636:	bd10      	pop	{r4, pc}

08003638 <__malloc_lock>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__malloc_lock+0x8>)
 800363a:	f7ff b9a7 	b.w	800298c <__retarget_lock_acquire_recursive>
 800363e:	bf00      	nop
 8003640:	2000012c 	.word	0x2000012c

08003644 <__malloc_unlock>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__malloc_unlock+0x8>)
 8003646:	f7ff b9a2 	b.w	800298e <__retarget_lock_release_recursive>
 800364a:	bf00      	nop
 800364c:	2000012c 	.word	0x2000012c

08003650 <_read_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	2200      	movs	r2, #0
 800365a:	4d05      	ldr	r5, [pc, #20]	; (8003670 <_read_r+0x20>)
 800365c:	602a      	str	r2, [r5, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fd f876 	bl	8000750 <_read>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d102      	bne.n	800366e <_read_r+0x1e>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	b103      	cbz	r3, 800366e <_read_r+0x1e>
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000138 	.word	0x20000138

08003674 <_raise_r>:
 8003674:	291f      	cmp	r1, #31
 8003676:	b538      	push	{r3, r4, r5, lr}
 8003678:	4604      	mov	r4, r0
 800367a:	460d      	mov	r5, r1
 800367c:	d904      	bls.n	8003688 <_raise_r+0x14>
 800367e:	2316      	movs	r3, #22
 8003680:	6003      	str	r3, [r0, #0]
 8003682:	f04f 30ff 	mov.w	r0, #4294967295
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800368a:	b112      	cbz	r2, 8003692 <_raise_r+0x1e>
 800368c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003690:	b94b      	cbnz	r3, 80036a6 <_raise_r+0x32>
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f830 	bl	80036f8 <_getpid_r>
 8003698:	462a      	mov	r2, r5
 800369a:	4601      	mov	r1, r0
 800369c:	4620      	mov	r0, r4
 800369e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036a2:	f000 b817 	b.w	80036d4 <_kill_r>
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d00a      	beq.n	80036c0 <_raise_r+0x4c>
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	d103      	bne.n	80036b6 <_raise_r+0x42>
 80036ae:	2316      	movs	r3, #22
 80036b0:	6003      	str	r3, [r0, #0]
 80036b2:	2001      	movs	r0, #1
 80036b4:	e7e7      	b.n	8003686 <_raise_r+0x12>
 80036b6:	2400      	movs	r4, #0
 80036b8:	4628      	mov	r0, r5
 80036ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80036be:	4798      	blx	r3
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7e0      	b.n	8003686 <_raise_r+0x12>

080036c4 <raise>:
 80036c4:	4b02      	ldr	r3, [pc, #8]	; (80036d0 <raise+0xc>)
 80036c6:	4601      	mov	r1, r0
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	f7ff bfd3 	b.w	8003674 <_raise_r>
 80036ce:	bf00      	nop
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <_kill_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	2300      	movs	r3, #0
 80036d8:	4d06      	ldr	r5, [pc, #24]	; (80036f4 <_kill_r+0x20>)
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	f7fd f81b 	bl	800071c <_kill>
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	d102      	bne.n	80036f0 <_kill_r+0x1c>
 80036ea:	682b      	ldr	r3, [r5, #0]
 80036ec:	b103      	cbz	r3, 80036f0 <_kill_r+0x1c>
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
 80036f2:	bf00      	nop
 80036f4:	20000138 	.word	0x20000138

080036f8 <_getpid_r>:
 80036f8:	f7fd b809 	b.w	800070e <_getpid>

080036fc <_fstat_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	2300      	movs	r3, #0
 8003700:	4d06      	ldr	r5, [pc, #24]	; (800371c <_fstat_r+0x20>)
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	602b      	str	r3, [r5, #0]
 800370a:	f7fd f865 	bl	80007d8 <_fstat>
 800370e:	1c43      	adds	r3, r0, #1
 8003710:	d102      	bne.n	8003718 <_fstat_r+0x1c>
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	b103      	cbz	r3, 8003718 <_fstat_r+0x1c>
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	bd38      	pop	{r3, r4, r5, pc}
 800371a:	bf00      	nop
 800371c:	20000138 	.word	0x20000138

08003720 <_isatty_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	2300      	movs	r3, #0
 8003724:	4d05      	ldr	r5, [pc, #20]	; (800373c <_isatty_r+0x1c>)
 8003726:	4604      	mov	r4, r0
 8003728:	4608      	mov	r0, r1
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	f7fd f863 	bl	80007f6 <_isatty>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_isatty_r+0x1a>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_isatty_r+0x1a>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	20000138 	.word	0x20000138

08003740 <_init>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr

0800374c <_fini>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr
