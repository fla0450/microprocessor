
pwm1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004404  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004740  08004740  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004740  08004740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004744  08004744  00014744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080047b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080047b8  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2fd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3d  00000000  00000000  0002c396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ca  00000000  00000000  0002f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccab  00000000  00000000  0004794a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc53  00000000  00000000  000545f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee4  00000000  00000000  000e0298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080044f8 	.word	0x080044f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080044f8 	.word	0x080044f8

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f002 f873 	bl	8002248 <HAL_UART_Transmit>
   if (ch == '\n') {
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
      HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f002 f869 	bl	8002248 <HAL_UART_Transmit>
   }
   return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000d4 	.word	0x200000d4
 8000184:	08004510 	.word	0x08004510

08000188 <__io_getchar>:
	led_ccr1 = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_1);
	led_arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
	printf("LED_ARR : %d, LED_CCR1 : %d\n\n", led_arr, led_ccr1);
}

int __io_getchar(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000192:	2300      	movs	r3, #0
 8000194:	603b      	str	r3, [r7, #0]
 8000196:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <__io_getchar+0x48>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	603b      	str	r3, [r7, #0]
 800019e:	4b0c      	ldr	r3, [pc, #48]	; (80001d0 <__io_getchar+0x48>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	603b      	str	r3, [r7, #0]
 80001a6:	683b      	ldr	r3, [r7, #0]
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80001a8:	1df9      	adds	r1, r7, #7
 80001aa:	f04f 33ff 	mov.w	r3, #4294967295
 80001ae:	2201      	movs	r2, #1
 80001b0:	4807      	ldr	r0, [pc, #28]	; (80001d0 <__io_getchar+0x48>)
 80001b2:	f002 f8cc 	bl	800234e <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 80001b6:	1df9      	adds	r1, r7, #7
 80001b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001bc:	2201      	movs	r2, #1
 80001be:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__io_getchar+0x48>)
 80001c0:	f002 f842 	bl	8002248 <HAL_UART_Transmit>
  // 입력 내용을 바로 출력
  return ch;
 80001c4:	79fb      	ldrb	r3, [r7, #7]
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	200000d4 	.word	0x200000d4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fb36 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f83c 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f93a 	bl	8000458 <MX_GPIO_Init>
  MX_TIM3_Init();
 80001e4:	f000 f87e 	bl	80002e4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001e8:	f000 f90c 	bl	8000404 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80001ec:	2100      	movs	r1, #0
 80001ee:	4813      	ldr	r0, [pc, #76]	; (800023c <main+0x68>)
 80001f0:	f001 faac 	bl	800174c <HAL_TIM_PWM_Start>
  setvbuf(stdin, NULL, _IONBF, 0);  // 버퍼링 정책 사용 금지
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <main+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	6858      	ldr	r0, [r3, #4]
 80001fa:	2300      	movs	r3, #0
 80001fc:	2202      	movs	r2, #2
 80001fe:	2100      	movs	r1, #0
 8000200:	f002 fb0c 	bl	800281c <setvbuf>
		  HAL_Delay(500);
	  }
  }
#endif
#if 1
printf("ARR & CCR1 VALUE = ");
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <main+0x70>)
 8000206:	f002 fa63 	bl	80026d0 <iprintf>
scanf("%d %d", &input_arr, &input_ccr1);
 800020a:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <main+0x74>)
 800020c:	490f      	ldr	r1, [pc, #60]	; (800024c <main+0x78>)
 800020e:	4810      	ldr	r0, [pc, #64]	; (8000250 <main+0x7c>)
 8000210:	f002 faec 	bl	80027ec <iscanf>
printf("\n\n");
 8000214:	480f      	ldr	r0, [pc, #60]	; (8000254 <main+0x80>)
 8000216:	f002 fae1 	bl	80027dc <puts>
__HAL_TIM_SET_AUTORELOAD(&htim3, input_arr);
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <main+0x78>)
 800021c:	881a      	ldrh	r2, [r3, #0]
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <main+0x68>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	62da      	str	r2, [r3, #44]	; 0x2c
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <main+0x78>)
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <main+0x68>)
 800022c:	60da      	str	r2, [r3, #12]
__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, input_ccr1);
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <main+0x74>)
 8000230:	881a      	ldrh	r2, [r3, #0]
 8000232:	4b02      	ldr	r3, [pc, #8]	; (800023c <main+0x68>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
printf("ARR & CCR1 VALUE = ");
 8000238:	e7e4      	b.n	8000204 <main+0x30>
 800023a:	bf00      	nop
 800023c:	2000008c 	.word	0x2000008c
 8000240:	2000000c 	.word	0x2000000c
 8000244:	08004534 	.word	0x08004534
 8000248:	2000011e 	.word	0x2000011e
 800024c:	2000011c 	.word	0x2000011c
 8000250:	08004548 	.word	0x08004548
 8000254:	08004550 	.word	0x08004550

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fa2a 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800027e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000282:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028c:	2302      	movs	r3, #2
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000296:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fd9b 	bl	8000ddc <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ac:	f000 f902 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f808 	bl	80012e0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d6:	f000 f8ed 	bl	80004b4 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	; 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08e      	sub	sp, #56	; 0x38
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	f107 0320 	add.w	r3, r7, #32
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]
 8000312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000314:	4b39      	ldr	r3, [pc, #228]	; (80003fc <MX_TIM3_Init+0x118>)
 8000316:	4a3a      	ldr	r2, [pc, #232]	; (8000400 <MX_TIM3_Init+0x11c>)
 8000318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <MX_TIM3_Init+0x118>)
 800031c:	2247      	movs	r2, #71	; 0x47
 800031e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000320:	4b36      	ldr	r3, [pc, #216]	; (80003fc <MX_TIM3_Init+0x118>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000326:	4b35      	ldr	r3, [pc, #212]	; (80003fc <MX_TIM3_Init+0x118>)
 8000328:	f240 32e7 	movw	r2, #999	; 0x3e7
 800032c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032e:	4b33      	ldr	r3, [pc, #204]	; (80003fc <MX_TIM3_Init+0x118>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000334:	4b31      	ldr	r3, [pc, #196]	; (80003fc <MX_TIM3_Init+0x118>)
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800033a:	4830      	ldr	r0, [pc, #192]	; (80003fc <MX_TIM3_Init+0x118>)
 800033c:	f001 f95e 	bl	80015fc <HAL_TIM_Base_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000346:	f000 f8b5 	bl	80004b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800034a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000354:	4619      	mov	r1, r3
 8000356:	4829      	ldr	r0, [pc, #164]	; (80003fc <MX_TIM3_Init+0x118>)
 8000358:	f001 fb5c 	bl	8001a14 <HAL_TIM_ConfigClockSource>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000362:	f000 f8a7 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000366:	4825      	ldr	r0, [pc, #148]	; (80003fc <MX_TIM3_Init+0x118>)
 8000368:	f001 f997 	bl	800169a <HAL_TIM_PWM_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000372:	f000 f89f 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000376:	2300      	movs	r3, #0
 8000378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037a:	2300      	movs	r3, #0
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800037e:	f107 0320 	add.w	r3, r7, #32
 8000382:	4619      	mov	r1, r3
 8000384:	481d      	ldr	r0, [pc, #116]	; (80003fc <MX_TIM3_Init+0x118>)
 8000386:	f001 feb1 	bl	80020ec <HAL_TIMEx_MasterConfigSynchronization>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000390:	f000 f890 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000394:	2360      	movs	r3, #96	; 0x60
 8000396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000398:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800039c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	2200      	movs	r2, #0
 80003aa:	4619      	mov	r1, r3
 80003ac:	4813      	ldr	r0, [pc, #76]	; (80003fc <MX_TIM3_Init+0x118>)
 80003ae:	f001 fa6f 	bl	8001890 <HAL_TIM_PWM_ConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80003b8:	f000 f87c 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2204      	movs	r2, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_TIM3_Init+0x118>)
 80003c8:	f001 fa62 	bl	8001890 <HAL_TIM_PWM_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80003d2:	f000 f86f 	bl	80004b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2208      	movs	r2, #8
 80003da:	4619      	mov	r1, r3
 80003dc:	4807      	ldr	r0, [pc, #28]	; (80003fc <MX_TIM3_Init+0x118>)
 80003de:	f001 fa57 	bl	8001890 <HAL_TIM_PWM_ConfigChannel>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80003e8:	f000 f864 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003ec:	4803      	ldr	r0, [pc, #12]	; (80003fc <MX_TIM3_Init+0x118>)
 80003ee:	f000 f8a7 	bl	8000540 <HAL_TIM_MspPostInit>

}
 80003f2:	bf00      	nop
 80003f4:	3738      	adds	r7, #56	; 0x38
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	40000400 	.word	0x40000400

08000404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000408:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <MX_USART2_UART_Init+0x50>)
 800040c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 8000410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800041c:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000428:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 800042a:	220c      	movs	r2, #12
 800042c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_USART2_UART_Init+0x4c>)
 800043c:	f001 feb4 	bl	80021a8 <HAL_UART_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000446:	f000 f835 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200000d4 	.word	0x200000d4
 8000454:	40004400 	.word	0x40004400

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000464:	f043 0310 	orr.w	r3, r3, #16
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_GPIO_Init+0x58>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0310 	and.w	r3, r3, #16
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <MX_GPIO_Init+0x58>)
 800047c:	f043 0320 	orr.w	r3, r3, #32
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0320 	and.w	r3, r3, #32
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <MX_GPIO_Init+0x58>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MX_GPIO_Init+0x58>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_MspInit+0x40>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_MspInit+0x40>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_MspInit+0x40>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_MspInit+0x40>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <HAL_MspInit+0x40>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_MspInit+0x40>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <HAL_TIM_Base_MspInit+0x34>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d10b      	bne.n	800052e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_TIM_Base_MspInit+0x38>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_TIM_Base_MspInit+0x38>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_TIM_Base_MspInit+0x38>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40000400 	.word	0x40000400
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <HAL_TIM_MspPostInit+0x80>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d12a      	bne.n	80005b6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_TIM_MspPostInit+0x84>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <HAL_TIM_MspPostInit+0x84>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_TIM_MspPostInit+0x84>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0310 	and.w	r3, r3, #16
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000578:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800057c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <HAL_TIM_MspPostInit+0x88>)
 800058e:	f000 faa1 	bl	8000ad4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_TIM_MspPostInit+0x8c>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80005a6:	61fb      	str	r3, [r7, #28]
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <HAL_TIM_MspPostInit+0x8c>)
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40000400 	.word	0x40000400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40011000 	.word	0x40011000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <HAL_UART_MspInit+0x88>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d12f      	bne.n	8000650 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <HAL_UART_MspInit+0x8c>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <HAL_UART_MspInit+0x8c>)
 80005f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <HAL_UART_MspInit+0x8c>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <HAL_UART_MspInit+0x8c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <HAL_UART_MspInit+0x8c>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_UART_MspInit+0x8c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000620:	2304      	movs	r3, #4
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	2303      	movs	r3, #3
 800062a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <HAL_UART_MspInit+0x90>)
 8000634:	f000 fa4e 	bl	8000ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000638:	2308      	movs	r3, #8
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_UART_MspInit+0x90>)
 800064c:	f000 fa42 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40004400 	.word	0x40004400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f913 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e00a      	b.n	80006da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c4:	f7ff fd60 	bl	8000188 <__io_getchar>
 80006c8:	4601      	mov	r1, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	60ba      	str	r2, [r7, #8]
 80006d0:	b2ca      	uxtb	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	dbf0      	blt.n	80006c4 <_read+0x12>
  }

  return len;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e009      	b.n	8000712 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	60ba      	str	r2, [r7, #8]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fd20 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3301      	adds	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbf1      	blt.n	80006fe <_write+0x12>
  }
  return len;
 800071a:	687b      	ldr	r3, [r7, #4]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_close>:

int _close(int file)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800074a:	605a      	str	r2, [r3, #4]
  return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <_isatty>:

int _isatty(int file)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000760:	2301      	movs	r3, #1
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f001 ff5a 	bl	800266c <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20005000 	.word	0x20005000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	20000120 	.word	0x20000120
 80007ec:	20000138 	.word	0x20000138

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007fc:	f7ff fff8 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000802:	490c      	ldr	r1, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000818:	4c09      	ldr	r4, [pc, #36]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000826:	f001 ff27 	bl	8002678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fcd3 	bl	80001d4 <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000838:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 800083c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000840:	20000138 	.word	0x20000138

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f907 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	200f      	movs	r0, #15
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fe2c 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f911 	bl	8000aba <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f8e7 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000124 	.word	0x20000124

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000124 	.word	0x20000124

0800090c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <__NVIC_SetPriorityGrouping+0x44>)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	60d3      	str	r3, [r2, #12]
}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__NVIC_GetPriorityGrouping+0x18>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 0307 	and.w	r3, r3, #7
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	; 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff90 	bl	8000970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff49 	bl	800090c <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff5e 	bl	8000954 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff90 	bl	80009c4 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5f 	bl	8000970 <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffb0 	bl	8000a28 <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b08b      	sub	sp, #44	; 0x2c
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae6:	e169      	b.n	8000dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	4013      	ands	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	f040 8158 	bne.w	8000db6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	4a9a      	ldr	r2, [pc, #616]	; (8000d74 <HAL_GPIO_Init+0x2a0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d05e      	beq.n	8000bce <HAL_GPIO_Init+0xfa>
 8000b10:	4a98      	ldr	r2, [pc, #608]	; (8000d74 <HAL_GPIO_Init+0x2a0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d875      	bhi.n	8000c02 <HAL_GPIO_Init+0x12e>
 8000b16:	4a98      	ldr	r2, [pc, #608]	; (8000d78 <HAL_GPIO_Init+0x2a4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d058      	beq.n	8000bce <HAL_GPIO_Init+0xfa>
 8000b1c:	4a96      	ldr	r2, [pc, #600]	; (8000d78 <HAL_GPIO_Init+0x2a4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d86f      	bhi.n	8000c02 <HAL_GPIO_Init+0x12e>
 8000b22:	4a96      	ldr	r2, [pc, #600]	; (8000d7c <HAL_GPIO_Init+0x2a8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d052      	beq.n	8000bce <HAL_GPIO_Init+0xfa>
 8000b28:	4a94      	ldr	r2, [pc, #592]	; (8000d7c <HAL_GPIO_Init+0x2a8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d869      	bhi.n	8000c02 <HAL_GPIO_Init+0x12e>
 8000b2e:	4a94      	ldr	r2, [pc, #592]	; (8000d80 <HAL_GPIO_Init+0x2ac>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d04c      	beq.n	8000bce <HAL_GPIO_Init+0xfa>
 8000b34:	4a92      	ldr	r2, [pc, #584]	; (8000d80 <HAL_GPIO_Init+0x2ac>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d863      	bhi.n	8000c02 <HAL_GPIO_Init+0x12e>
 8000b3a:	4a92      	ldr	r2, [pc, #584]	; (8000d84 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d046      	beq.n	8000bce <HAL_GPIO_Init+0xfa>
 8000b40:	4a90      	ldr	r2, [pc, #576]	; (8000d84 <HAL_GPIO_Init+0x2b0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d85d      	bhi.n	8000c02 <HAL_GPIO_Init+0x12e>
 8000b46:	2b12      	cmp	r3, #18
 8000b48:	d82a      	bhi.n	8000ba0 <HAL_GPIO_Init+0xcc>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d859      	bhi.n	8000c02 <HAL_GPIO_Init+0x12e>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <HAL_GPIO_Init+0x80>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000bcf 	.word	0x08000bcf
 8000b58:	08000ba9 	.word	0x08000ba9
 8000b5c:	08000bbb 	.word	0x08000bbb
 8000b60:	08000bfd 	.word	0x08000bfd
 8000b64:	08000c03 	.word	0x08000c03
 8000b68:	08000c03 	.word	0x08000c03
 8000b6c:	08000c03 	.word	0x08000c03
 8000b70:	08000c03 	.word	0x08000c03
 8000b74:	08000c03 	.word	0x08000c03
 8000b78:	08000c03 	.word	0x08000c03
 8000b7c:	08000c03 	.word	0x08000c03
 8000b80:	08000c03 	.word	0x08000c03
 8000b84:	08000c03 	.word	0x08000c03
 8000b88:	08000c03 	.word	0x08000c03
 8000b8c:	08000c03 	.word	0x08000c03
 8000b90:	08000c03 	.word	0x08000c03
 8000b94:	08000c03 	.word	0x08000c03
 8000b98:	08000bb1 	.word	0x08000bb1
 8000b9c:	08000bc5 	.word	0x08000bc5
 8000ba0:	4a79      	ldr	r2, [pc, #484]	; (8000d88 <HAL_GPIO_Init+0x2b4>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d013      	beq.n	8000bce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ba6:	e02c      	b.n	8000c02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	623b      	str	r3, [r7, #32]
          break;
 8000bae:	e029      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e024      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	3308      	adds	r3, #8
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e01f      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	330c      	adds	r3, #12
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e01a      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	623b      	str	r3, [r7, #32]
          break;
 8000bda:	e013      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d105      	bne.n	8000bf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be4:	2308      	movs	r3, #8
 8000be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	611a      	str	r2, [r3, #16]
          break;
 8000bee:	e009      	b.n	8000c04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	615a      	str	r2, [r3, #20]
          break;
 8000bfa:	e003      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
          break;
 8000c00:	e000      	b.n	8000c04 <HAL_GPIO_Init+0x130>
          break;
 8000c02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	2bff      	cmp	r3, #255	; 0xff
 8000c08:	d801      	bhi.n	8000c0e <HAL_GPIO_Init+0x13a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	e001      	b.n	8000c12 <HAL_GPIO_Init+0x13e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3304      	adds	r3, #4
 8000c12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2bff      	cmp	r3, #255	; 0xff
 8000c18:	d802      	bhi.n	8000c20 <HAL_GPIO_Init+0x14c>
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	e002      	b.n	8000c26 <HAL_GPIO_Init+0x152>
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	3b08      	subs	r3, #8
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	401a      	ands	r2, r3
 8000c38:	6a39      	ldr	r1, [r7, #32]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	431a      	orrs	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c54:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <HAL_GPIO_Init+0x2b8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a4c      	ldr	r2, [pc, #304]	; (8000d8c <HAL_GPIO_Init+0x2b8>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b4a      	ldr	r3, [pc, #296]	; (8000d8c <HAL_GPIO_Init+0x2b8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c6c:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x2bc>)
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3302      	adds	r3, #2
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	220f      	movs	r2, #15
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a40      	ldr	r2, [pc, #256]	; (8000d94 <HAL_GPIO_Init+0x2c0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d013      	beq.n	8000cc0 <HAL_GPIO_Init+0x1ec>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a3f      	ldr	r2, [pc, #252]	; (8000d98 <HAL_GPIO_Init+0x2c4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d00d      	beq.n	8000cbc <HAL_GPIO_Init+0x1e8>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <HAL_GPIO_Init+0x2c8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d007      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e4>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <HAL_GPIO_Init+0x2cc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d101      	bne.n	8000cb4 <HAL_GPIO_Init+0x1e0>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e006      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e004      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cd2:	492f      	ldr	r1, [pc, #188]	; (8000d90 <HAL_GPIO_Init+0x2bc>)
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	492c      	ldr	r1, [pc, #176]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	4928      	ldr	r1, [pc, #160]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	4922      	ldr	r1, [pc, #136]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60cb      	str	r3, [r1, #12]
 8000d20:	e006      	b.n	8000d30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	491e      	ldr	r1, [pc, #120]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d3c:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	4918      	ldr	r1, [pc, #96]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	604b      	str	r3, [r1, #4]
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4914      	ldr	r1, [pc, #80]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d021      	beq.n	8000da8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	490e      	ldr	r1, [pc, #56]	; (8000da4 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	e021      	b.n	8000db6 <HAL_GPIO_Init+0x2e2>
 8000d72:	bf00      	nop
 8000d74:	10320000 	.word	0x10320000
 8000d78:	10310000 	.word	0x10310000
 8000d7c:	10220000 	.word	0x10220000
 8000d80:	10210000 	.word	0x10210000
 8000d84:	10120000 	.word	0x10120000
 8000d88:	10110000 	.word	0x10110000
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000
 8000d94:	40010800 	.word	0x40010800
 8000d98:	40010c00 	.word	0x40010c00
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	40011400 	.word	0x40011400
 8000da4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4909      	ldr	r1, [pc, #36]	; (8000dd8 <HAL_GPIO_Init+0x304>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	3301      	adds	r3, #1
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f47f ae8e 	bne.w	8000ae8 <HAL_GPIO_Init+0x14>
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	372c      	adds	r7, #44	; 0x2c
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40010400 	.word	0x40010400

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e272      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8087 	beq.w	8000f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	4b92      	ldr	r3, [pc, #584]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e08:	4b8f      	ldr	r3, [pc, #572]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d112      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
 8000e14:	4b8c      	ldr	r3, [pc, #560]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d10b      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d06c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x12c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d168      	bne.n	8000f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e24c      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x76>
 8000e44:	4b80      	ldr	r3, [pc, #512]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a7f      	ldr	r2, [pc, #508]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x98>
 8000e5a:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7a      	ldr	r2, [pc, #488]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b78      	ldr	r3, [pc, #480]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a77      	ldr	r2, [pc, #476]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01d      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0xbc>
 8000e7e:	4b72      	ldr	r3, [pc, #456]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a71      	ldr	r2, [pc, #452]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b68      	ldr	r3, [pc, #416]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a67      	ldr	r2, [pc, #412]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fd1e 	bl	80008f8 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fd1a 	bl	80008f8 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e200      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe4>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fd0a 	bl	80008f8 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fd06 	bl	80008f8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e1ec      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x10c>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d063      	beq.n	8000fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f16:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d11c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
 8000f2e:	4b46      	ldr	r3, [pc, #280]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d116      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	4b43      	ldr	r3, [pc, #268]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d001      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e1c0      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4939      	ldr	r1, [pc, #228]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	e03a      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fcbf 	bl	80008f8 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fcbb 	bl	80008f8 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e1a1      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4927      	ldr	r1, [pc, #156]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e015      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fc9e 	bl	80008f8 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc9a 	bl	80008f8 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e180      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03a      	beq.n	8001060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d019      	beq.n	8001026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc7e 	bl	80008f8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc7a 	bl	80008f8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e160      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 face 	bl	80015c0 <RCC_Delay>
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fc64 	bl	80008f8 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001032:	e00f      	b.n	8001054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fc60 	bl	80008f8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d908      	bls.n	8001054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e146      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	42420000 	.word	0x42420000
 8001050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b92      	ldr	r3, [pc, #584]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e9      	bne.n	8001034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a6 	beq.w	80011ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b8b      	ldr	r3, [pc, #556]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10d      	bne.n	800109a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001096:	2301      	movs	r3, #1
 8001098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d118      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a6:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7e      	ldr	r2, [pc, #504]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fc21 	bl	80008f8 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ba:	f7ff fc1d 	bl	80008f8 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e103      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b75      	ldr	r3, [pc, #468]	; (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x312>
 80010e0:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a6e      	ldr	r2, [pc, #440]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e02d      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x334>
 80010f6:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a69      	ldr	r2, [pc, #420]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a66      	ldr	r2, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e01c      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d10c      	bne.n	8001132 <HAL_RCC_OscConfig+0x356>
 8001118:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a60      	ldr	r2, [pc, #384]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a5d      	ldr	r2, [pc, #372]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	e00b      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a5a      	ldr	r2, [pc, #360]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	4b58      	ldr	r3, [pc, #352]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a57      	ldr	r2, [pc, #348]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d015      	beq.n	800117e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fbd1 	bl	80008f8 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115a:	f7ff fbcd 	bl	80008f8 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3288 	movw	r2, #5000	; 0x1388
 8001168:	4293      	cmp	r3, r2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0b1      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0ee      	beq.n	800115a <HAL_RCC_OscConfig+0x37e>
 800117c:	e014      	b.n	80011a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbbb 	bl	80008f8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fbb7 	bl	80008f8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e09b      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ee      	bne.n	8001186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d105      	bne.n	80011ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8087 	beq.w	80012d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d061      	beq.n	8001294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d146      	bne.n	8001266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d8:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fb8b 	bl	80008f8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fb87 	bl	80008f8 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e06d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d108      	bne.n	8001220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4921      	ldr	r1, [pc, #132]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a19      	ldr	r1, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	430b      	orrs	r3, r1
 8001232:	491b      	ldr	r1, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb5b 	bl	80008f8 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb57 	bl	80008f8 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e03d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x46a>
 8001264:	e035      	b.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb44 	bl	80008f8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fb40 	bl	80008f8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e026      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x498>
 8001292:	e01e      	b.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e019      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_OscConfig+0x500>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0d0      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d910      	bls.n	8001324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4965      	ldr	r1, [pc, #404]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0b8      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800133c:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800135e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	494d      	ldr	r1, [pc, #308]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d040      	beq.n	8001400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e07f      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e073      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e06b      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 0203 	bic.w	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4936      	ldr	r1, [pc, #216]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fa92 	bl	80008f8 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d8:	f7ff fa8e 	bl	80008f8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e053      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 020c 	and.w	r2, r3, #12
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d1eb      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d210      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 0207 	bic.w	r2, r3, #7
 8001416:	4922      	ldr	r1, [pc, #136]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e032      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4916      	ldr	r1, [pc, #88]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	490e      	ldr	r1, [pc, #56]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146e:	f000 f821 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 8001472:	4602      	mov	r2, r0
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	490a      	ldr	r1, [pc, #40]	; (80014a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001480:	5ccb      	ldrb	r3, [r1, r3]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_RCC_ClockConfig+0x1cc>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f9f0 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08004560 	.word	0x08004560
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_RCC_GetSysClockFreq+0x94>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x30>
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0x36>
 80014e2:	e027      	b.n	8001534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_GetSysClockFreq+0x98>)
 80014e6:	613b      	str	r3, [r7, #16]
      break;
 80014e8:	e027      	b.n	800153a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d010      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_RCC_GetSysClockFreq+0x94>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0c5b      	lsrs	r3, r3, #17
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	fb03 f202 	mul.w	r2, r3, r2
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e004      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	613b      	str	r3, [r7, #16]
      break;
 8001532:	e002      	b.n	800153a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetSysClockFreq+0x98>)
 8001536:	613b      	str	r3, [r7, #16]
      break;
 8001538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800153a:	693b      	ldr	r3, [r7, #16]
}
 800153c:	4618      	mov	r0, r3
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	007a1200 	.word	0x007a1200
 8001550:	08004578 	.word	0x08004578
 8001554:	08004588 	.word	0x08004588
 8001558:	003d0900 	.word	0x003d0900

0800155c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_RCC_GetHCLKFreq+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001574:	f7ff fff2 	bl	800155c <HAL_RCC_GetHCLKFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	08004570 	.word	0x08004570

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff ffde 	bl	800155c <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0adb      	lsrs	r3, r3, #11
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08004570 	.word	0x08004570

080015c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <RCC_Delay+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <RCC_Delay+0x38>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015dc:	bf00      	nop
  }
  while (Delay --);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <RCC_Delay+0x1c>
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e041      	b.n	8001692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ff6e 	bl	8000504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3304      	adds	r3, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f000 fab2 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e041      	b.n	8001730 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f839 	bl	8001738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4610      	mov	r0, r2
 80016da:	f000 fa63 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
	...

0800174c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_TIM_PWM_Start+0x24>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e022      	b.n	80017b6 <HAL_TIM_PWM_Start+0x6a>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b04      	cmp	r3, #4
 8001774:	d109      	bne.n	800178a <HAL_TIM_PWM_Start+0x3e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	e015      	b.n	80017b6 <HAL_TIM_PWM_Start+0x6a>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d109      	bne.n	80017a4 <HAL_TIM_PWM_Start+0x58>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	e008      	b.n	80017b6 <HAL_TIM_PWM_Start+0x6a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e05e      	b.n	800187c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <HAL_TIM_PWM_Start+0x82>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017cc:	e013      	b.n	80017f6 <HAL_TIM_PWM_Start+0xaa>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d104      	bne.n	80017de <HAL_TIM_PWM_Start+0x92>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017dc:	e00b      	b.n	80017f6 <HAL_TIM_PWM_Start+0xaa>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d104      	bne.n	80017ee <HAL_TIM_PWM_Start+0xa2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ec:	e003      	b.n	80017f6 <HAL_TIM_PWM_Start+0xaa>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	6839      	ldr	r1, [r7, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fc50 	bl	80020a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <HAL_TIM_PWM_Start+0x138>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d107      	bne.n	800181e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <HAL_TIM_PWM_Start+0x138>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d00e      	beq.n	8001846 <HAL_TIM_PWM_Start+0xfa>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d009      	beq.n	8001846 <HAL_TIM_PWM_Start+0xfa>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_TIM_PWM_Start+0x13c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d004      	beq.n	8001846 <HAL_TIM_PWM_Start+0xfa>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_TIM_PWM_Start+0x140>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d111      	bne.n	800186a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b06      	cmp	r3, #6
 8001856:	d010      	beq.n	800187a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001868:	e007      	b.n	800187a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40000400 	.word	0x40000400
 800188c:	40000800 	.word	0x40000800

08001890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0ae      	b.n	8001a0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	f200 809f 	bhi.w	80019fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	080018f9 	.word	0x080018f9
 80018c8:	080019fd 	.word	0x080019fd
 80018cc:	080019fd 	.word	0x080019fd
 80018d0:	080019fd 	.word	0x080019fd
 80018d4:	08001939 	.word	0x08001939
 80018d8:	080019fd 	.word	0x080019fd
 80018dc:	080019fd 	.word	0x080019fd
 80018e0:	080019fd 	.word	0x080019fd
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	080019fd 	.word	0x080019fd
 80018ec:	080019fd 	.word	0x080019fd
 80018f0:	080019fd 	.word	0x080019fd
 80018f4:	080019bb 	.word	0x080019bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9b2 	bl	8001c68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0208 	orr.w	r2, r2, #8
 8001912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0204 	bic.w	r2, r2, #4
 8001922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6999      	ldr	r1, [r3, #24]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	619a      	str	r2, [r3, #24]
      break;
 8001936:	e064      	b.n	8001a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f9f8 	bl	8001d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6999      	ldr	r1, [r3, #24]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	021a      	lsls	r2, r3, #8
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
      break;
 8001978:	e043      	b.n	8001a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fa41 	bl	8001e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	69da      	ldr	r2, [r3, #28]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0208 	orr.w	r2, r2, #8
 8001994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0204 	bic.w	r2, r2, #4
 80019a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69d9      	ldr	r1, [r3, #28]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	61da      	str	r2, [r3, #28]
      break;
 80019b8:	e023      	b.n	8001a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fa8b 	bl	8001edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69da      	ldr	r2, [r3, #28]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69da      	ldr	r2, [r3, #28]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69d9      	ldr	r1, [r3, #28]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	021a      	lsls	r2, r3, #8
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	61da      	str	r2, [r3, #28]
      break;
 80019fa:	e002      	b.n	8001a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	75fb      	strb	r3, [r7, #23]
      break;
 8001a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_TIM_ConfigClockSource+0x1c>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e0b4      	b.n	8001b9a <HAL_TIM_ConfigClockSource+0x186>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a68:	d03e      	beq.n	8001ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6e:	f200 8087 	bhi.w	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a76:	f000 8086 	beq.w	8001b86 <HAL_TIM_ConfigClockSource+0x172>
 8001a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7e:	d87f      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001a80:	2b70      	cmp	r3, #112	; 0x70
 8001a82:	d01a      	beq.n	8001aba <HAL_TIM_ConfigClockSource+0xa6>
 8001a84:	2b70      	cmp	r3, #112	; 0x70
 8001a86:	d87b      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001a88:	2b60      	cmp	r3, #96	; 0x60
 8001a8a:	d050      	beq.n	8001b2e <HAL_TIM_ConfigClockSource+0x11a>
 8001a8c:	2b60      	cmp	r3, #96	; 0x60
 8001a8e:	d877      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001a90:	2b50      	cmp	r3, #80	; 0x50
 8001a92:	d03c      	beq.n	8001b0e <HAL_TIM_ConfigClockSource+0xfa>
 8001a94:	2b50      	cmp	r3, #80	; 0x50
 8001a96:	d873      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001a98:	2b40      	cmp	r3, #64	; 0x40
 8001a9a:	d058      	beq.n	8001b4e <HAL_TIM_ConfigClockSource+0x13a>
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d86f      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa0:	2b30      	cmp	r3, #48	; 0x30
 8001aa2:	d064      	beq.n	8001b6e <HAL_TIM_ConfigClockSource+0x15a>
 8001aa4:	2b30      	cmp	r3, #48	; 0x30
 8001aa6:	d86b      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d060      	beq.n	8001b6e <HAL_TIM_ConfigClockSource+0x15a>
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d867      	bhi.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d05c      	beq.n	8001b6e <HAL_TIM_ConfigClockSource+0x15a>
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d05a      	beq.n	8001b6e <HAL_TIM_ConfigClockSource+0x15a>
 8001ab8:	e062      	b.n	8001b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f000 facc 	bl	8002066 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	609a      	str	r2, [r3, #8]
      break;
 8001ae6:	e04f      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6899      	ldr	r1, [r3, #8]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f000 fab5 	bl	8002066 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b0a:	609a      	str	r2, [r3, #8]
      break;
 8001b0c:	e03c      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f000 fa2c 	bl	8001f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2150      	movs	r1, #80	; 0x50
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fa83 	bl	8002032 <TIM_ITRx_SetConfig>
      break;
 8001b2c:	e02c      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f000 fa4a 	bl	8001fd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2160      	movs	r1, #96	; 0x60
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fa73 	bl	8002032 <TIM_ITRx_SetConfig>
      break;
 8001b4c:	e01c      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f000 fa0c 	bl	8001f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2140      	movs	r1, #64	; 0x40
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fa63 	bl	8002032 <TIM_ITRx_SetConfig>
      break;
 8001b6c:	e00c      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f000 fa5a 	bl	8002032 <TIM_ITRx_SetConfig>
      break;
 8001b7e:	e003      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      break;
 8001b84:	e000      	b.n	8001b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00b      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d007      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <TIM_Base_SetConfig+0xbc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <TIM_Base_SetConfig+0xc0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00b      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d007      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <TIM_Base_SetConfig+0xbc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <TIM_Base_SetConfig+0xc0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d103      	bne.n	8001c4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	615a      	str	r2, [r3, #20]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800

08001c68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f023 0201 	bic.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f023 0302 	bic.w	r3, r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <TIM_OC1_SetConfig+0xc8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d10c      	bne.n	8001cde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f023 0308 	bic.w	r3, r3, #8
 8001cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <TIM_OC1_SetConfig+0xc8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d111      	bne.n	8001d0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	621a      	str	r2, [r3, #32]
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40012c00 	.word	0x40012c00

08001d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f023 0210 	bic.w	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f023 0320 	bic.w	r3, r3, #32
 8001d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <TIM_OC2_SetConfig+0xd0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d10d      	bne.n	8001db0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <TIM_OC2_SetConfig+0xd0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d113      	bne.n	8001de0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	621a      	str	r2, [r3, #32]
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40012c00 	.word	0x40012c00

08001e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <TIM_OC3_SetConfig+0xd0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10d      	bne.n	8001e82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <TIM_OC3_SetConfig+0xd0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d113      	bne.n	8001eb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	621a      	str	r2, [r3, #32]
}
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40012c00 	.word	0x40012c00

08001edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	031b      	lsls	r3, r3, #12
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <TIM_OC4_SetConfig+0x98>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d109      	bne.n	8001f50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	621a      	str	r2, [r3, #32]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40012c00 	.word	0x40012c00

08001f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f023 0201 	bic.w	r2, r3, #1
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f023 030a 	bic.w	r3, r3, #10
 8001fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	621a      	str	r2, [r3, #32]
}
 8001fca:	bf00      	nop
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f023 0210 	bic.w	r2, r3, #16
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	031b      	lsls	r3, r3, #12
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002010:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	621a      	str	r2, [r3, #32]
}
 8002028:	bf00      	nop
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	f043 0307 	orr.w	r3, r3, #7
 8002054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002066:	b480      	push	{r7}
 8002068:	b087      	sub	sp, #28
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002080:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	431a      	orrs	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4313      	orrs	r3, r2
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	609a      	str	r2, [r3, #8]
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2201      	movs	r2, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	621a      	str	r2, [r3, #32]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002100:	2302      	movs	r3, #2
 8002102:	e046      	b.n	8002192 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002150:	d009      	beq.n	8002166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10c      	bne.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800216c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4313      	orrs	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800

080021a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e042      	b.n	8002240 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe f9fe 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f9af 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	d16d      	bne.n	8002344 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Transmit+0x2c>
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e066      	b.n	8002346 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2221      	movs	r2, #33	; 0x21
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002286:	f7fe fb37 	bl	80008f8 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a0:	d108      	bne.n	80022b4 <HAL_UART_Transmit+0x6c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e003      	b.n	80022bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022bc:	e02a      	b.n	8002314 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f8d2 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e036      	b.n	8002346 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10b      	bne.n	80022f6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3302      	adds	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e007      	b.n	8002306 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1cf      	bne.n	80022be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2200      	movs	r2, #0
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f8a2 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e006      	b.n	8002346 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b08a      	sub	sp, #40	; 0x28
 8002352:	af02      	add	r7, sp, #8
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	d17c      	bne.n	8002468 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_UART_Receive+0x2c>
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e075      	b.n	800246a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2222      	movs	r2, #34	; 0x22
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002392:	f7fe fab1 	bl	80008f8 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	88fa      	ldrh	r2, [r7, #6]
 800239c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ac:	d108      	bne.n	80023c0 <HAL_UART_Receive+0x72>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d104      	bne.n	80023c0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e003      	b.n	80023c8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80023c8:	e043      	b.n	8002452 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2120      	movs	r1, #32
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f84c 	bl	8002472 <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e042      	b.n	800246a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	3302      	adds	r3, #2
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e01f      	b.n	8002444 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d007      	beq.n	800241e <HAL_UART_Receive+0xd0>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_UART_Receive+0xde>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d106      	bne.n	800242c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e008      	b.n	800243e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002438:	b2da      	uxtb	r2, r3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1b6      	bne.n	80023ca <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b090      	sub	sp, #64	; 0x40
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002482:	e050      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d04c      	beq.n	8002526 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002492:	f7fe fa31 	bl	80008f8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800249e:	429a      	cmp	r2, r3
 80024a0:	d241      	bcs.n	8002526 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	330c      	adds	r3, #12
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	330c      	adds	r3, #12
 80024c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024c2:	637a      	str	r2, [r7, #52]	; 0x34
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e5      	bne.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3314      	adds	r3, #20
 80024dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	613b      	str	r3, [r7, #16]
   return(result);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3314      	adds	r3, #20
 80024f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024f6:	623a      	str	r2, [r7, #32]
 80024f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	69f9      	ldr	r1, [r7, #28]
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	61bb      	str	r3, [r7, #24]
   return(result);
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e5      	bne.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e00f      	b.n	8002546 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	429a      	cmp	r2, r3
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	429a      	cmp	r2, r3
 8002542:	d09f      	beq.n	8002484 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3740      	adds	r7, #64	; 0x40
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800258a:	f023 030c 	bic.w	r3, r3, #12
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	430b      	orrs	r3, r1
 8002596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <UART_SetConfig+0x114>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025b8:	f7fe ffee 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	e002      	b.n	80025c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025c0:	f7fe ffd6 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <UART_SetConfig+0x118>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	0119      	lsls	r1, r3, #4
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <UART_SetConfig+0x118>)
 80025fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2064      	movs	r0, #100	; 0x64
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	3332      	adds	r3, #50	; 0x32
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <UART_SetConfig+0x118>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261c:	4419      	add	r1, r3
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <UART_SetConfig+0x118>)
 8002636:	fba3 0302 	umull	r0, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	; 0x32
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <UART_SetConfig+0x118>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 020f 	and.w	r2, r3, #15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	440a      	add	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40013800 	.word	0x40013800
 8002668:	51eb851f 	.word	0x51eb851f

0800266c <__errno>:
 800266c:	4b01      	ldr	r3, [pc, #4]	; (8002674 <__errno+0x8>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000000c 	.word	0x2000000c

08002678 <__libc_init_array>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	2600      	movs	r6, #0
 800267c:	4d0c      	ldr	r5, [pc, #48]	; (80026b0 <__libc_init_array+0x38>)
 800267e:	4c0d      	ldr	r4, [pc, #52]	; (80026b4 <__libc_init_array+0x3c>)
 8002680:	1b64      	subs	r4, r4, r5
 8002682:	10a4      	asrs	r4, r4, #2
 8002684:	42a6      	cmp	r6, r4
 8002686:	d109      	bne.n	800269c <__libc_init_array+0x24>
 8002688:	f001 ff36 	bl	80044f8 <_init>
 800268c:	2600      	movs	r6, #0
 800268e:	4d0a      	ldr	r5, [pc, #40]	; (80026b8 <__libc_init_array+0x40>)
 8002690:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <__libc_init_array+0x44>)
 8002692:	1b64      	subs	r4, r4, r5
 8002694:	10a4      	asrs	r4, r4, #2
 8002696:	42a6      	cmp	r6, r4
 8002698:	d105      	bne.n	80026a6 <__libc_init_array+0x2e>
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a0:	4798      	blx	r3
 80026a2:	3601      	adds	r6, #1
 80026a4:	e7ee      	b.n	8002684 <__libc_init_array+0xc>
 80026a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026aa:	4798      	blx	r3
 80026ac:	3601      	adds	r6, #1
 80026ae:	e7f2      	b.n	8002696 <__libc_init_array+0x1e>
 80026b0:	08004740 	.word	0x08004740
 80026b4:	08004740 	.word	0x08004740
 80026b8:	08004740 	.word	0x08004740
 80026bc:	08004744 	.word	0x08004744

080026c0 <memset>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <iprintf>:
 80026d0:	b40f      	push	{r0, r1, r2, r3}
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <iprintf+0x2c>)
 80026d4:	b513      	push	{r0, r1, r4, lr}
 80026d6:	681c      	ldr	r4, [r3, #0]
 80026d8:	b124      	cbz	r4, 80026e4 <iprintf+0x14>
 80026da:	69a3      	ldr	r3, [r4, #24]
 80026dc:	b913      	cbnz	r3, 80026e4 <iprintf+0x14>
 80026de:	4620      	mov	r0, r4
 80026e0:	f000 fb4a 	bl	8002d78 <__sinit>
 80026e4:	ab05      	add	r3, sp, #20
 80026e6:	4620      	mov	r0, r4
 80026e8:	9a04      	ldr	r2, [sp, #16]
 80026ea:	68a1      	ldr	r1, [r4, #8]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	f000 fd71 	bl	80031d4 <_vfiprintf_r>
 80026f2:	b002      	add	sp, #8
 80026f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f8:	b004      	add	sp, #16
 80026fa:	4770      	bx	lr
 80026fc:	2000000c 	.word	0x2000000c

08002700 <_puts_r>:
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	460e      	mov	r6, r1
 8002704:	4605      	mov	r5, r0
 8002706:	b118      	cbz	r0, 8002710 <_puts_r+0x10>
 8002708:	6983      	ldr	r3, [r0, #24]
 800270a:	b90b      	cbnz	r3, 8002710 <_puts_r+0x10>
 800270c:	f000 fb34 	bl	8002d78 <__sinit>
 8002710:	69ab      	ldr	r3, [r5, #24]
 8002712:	68ac      	ldr	r4, [r5, #8]
 8002714:	b913      	cbnz	r3, 800271c <_puts_r+0x1c>
 8002716:	4628      	mov	r0, r5
 8002718:	f000 fb2e 	bl	8002d78 <__sinit>
 800271c:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <_puts_r+0xd0>)
 800271e:	429c      	cmp	r4, r3
 8002720:	d120      	bne.n	8002764 <_puts_r+0x64>
 8002722:	686c      	ldr	r4, [r5, #4]
 8002724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002726:	07db      	lsls	r3, r3, #31
 8002728:	d405      	bmi.n	8002736 <_puts_r+0x36>
 800272a:	89a3      	ldrh	r3, [r4, #12]
 800272c:	0598      	lsls	r0, r3, #22
 800272e:	d402      	bmi.n	8002736 <_puts_r+0x36>
 8002730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002732:	f000 fbdc 	bl	8002eee <__retarget_lock_acquire_recursive>
 8002736:	89a3      	ldrh	r3, [r4, #12]
 8002738:	0719      	lsls	r1, r3, #28
 800273a:	d51d      	bpl.n	8002778 <_puts_r+0x78>
 800273c:	6923      	ldr	r3, [r4, #16]
 800273e:	b1db      	cbz	r3, 8002778 <_puts_r+0x78>
 8002740:	3e01      	subs	r6, #1
 8002742:	68a3      	ldr	r3, [r4, #8]
 8002744:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002748:	3b01      	subs	r3, #1
 800274a:	60a3      	str	r3, [r4, #8]
 800274c:	bb39      	cbnz	r1, 800279e <_puts_r+0x9e>
 800274e:	2b00      	cmp	r3, #0
 8002750:	da38      	bge.n	80027c4 <_puts_r+0xc4>
 8002752:	4622      	mov	r2, r4
 8002754:	210a      	movs	r1, #10
 8002756:	4628      	mov	r0, r5
 8002758:	f000 f926 	bl	80029a8 <__swbuf_r>
 800275c:	3001      	adds	r0, #1
 800275e:	d011      	beq.n	8002784 <_puts_r+0x84>
 8002760:	250a      	movs	r5, #10
 8002762:	e011      	b.n	8002788 <_puts_r+0x88>
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <_puts_r+0xd4>)
 8002766:	429c      	cmp	r4, r3
 8002768:	d101      	bne.n	800276e <_puts_r+0x6e>
 800276a:	68ac      	ldr	r4, [r5, #8]
 800276c:	e7da      	b.n	8002724 <_puts_r+0x24>
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <_puts_r+0xd8>)
 8002770:	429c      	cmp	r4, r3
 8002772:	bf08      	it	eq
 8002774:	68ec      	ldreq	r4, [r5, #12]
 8002776:	e7d5      	b.n	8002724 <_puts_r+0x24>
 8002778:	4621      	mov	r1, r4
 800277a:	4628      	mov	r0, r5
 800277c:	f000 f966 	bl	8002a4c <__swsetup_r>
 8002780:	2800      	cmp	r0, #0
 8002782:	d0dd      	beq.n	8002740 <_puts_r+0x40>
 8002784:	f04f 35ff 	mov.w	r5, #4294967295
 8002788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800278a:	07da      	lsls	r2, r3, #31
 800278c:	d405      	bmi.n	800279a <_puts_r+0x9a>
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	059b      	lsls	r3, r3, #22
 8002792:	d402      	bmi.n	800279a <_puts_r+0x9a>
 8002794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002796:	f000 fbab 	bl	8002ef0 <__retarget_lock_release_recursive>
 800279a:	4628      	mov	r0, r5
 800279c:	bd70      	pop	{r4, r5, r6, pc}
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da04      	bge.n	80027ac <_puts_r+0xac>
 80027a2:	69a2      	ldr	r2, [r4, #24]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dc06      	bgt.n	80027b6 <_puts_r+0xb6>
 80027a8:	290a      	cmp	r1, #10
 80027aa:	d004      	beq.n	80027b6 <_puts_r+0xb6>
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	6022      	str	r2, [r4, #0]
 80027b2:	7019      	strb	r1, [r3, #0]
 80027b4:	e7c5      	b.n	8002742 <_puts_r+0x42>
 80027b6:	4622      	mov	r2, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	f000 f8f5 	bl	80029a8 <__swbuf_r>
 80027be:	3001      	adds	r0, #1
 80027c0:	d1bf      	bne.n	8002742 <_puts_r+0x42>
 80027c2:	e7df      	b.n	8002784 <_puts_r+0x84>
 80027c4:	250a      	movs	r5, #10
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	6022      	str	r2, [r4, #0]
 80027cc:	701d      	strb	r5, [r3, #0]
 80027ce:	e7db      	b.n	8002788 <_puts_r+0x88>
 80027d0:	080045b0 	.word	0x080045b0
 80027d4:	080045d0 	.word	0x080045d0
 80027d8:	08004590 	.word	0x08004590

080027dc <puts>:
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <puts+0xc>)
 80027de:	4601      	mov	r1, r0
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	f7ff bf8d 	b.w	8002700 <_puts_r>
 80027e6:	bf00      	nop
 80027e8:	2000000c 	.word	0x2000000c

080027ec <iscanf>:
 80027ec:	b40f      	push	{r0, r1, r2, r3}
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <iscanf+0x2c>)
 80027f0:	b513      	push	{r0, r1, r4, lr}
 80027f2:	681c      	ldr	r4, [r3, #0]
 80027f4:	b124      	cbz	r4, 8002800 <iscanf+0x14>
 80027f6:	69a3      	ldr	r3, [r4, #24]
 80027f8:	b913      	cbnz	r3, 8002800 <iscanf+0x14>
 80027fa:	4620      	mov	r0, r4
 80027fc:	f000 fabc 	bl	8002d78 <__sinit>
 8002800:	ab05      	add	r3, sp, #20
 8002802:	4620      	mov	r0, r4
 8002804:	9a04      	ldr	r2, [sp, #16]
 8002806:	6861      	ldr	r1, [r4, #4]
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	f001 f94f 	bl	8003aac <_vfiscanf_r>
 800280e:	b002      	add	sp, #8
 8002810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002814:	b004      	add	sp, #16
 8002816:	4770      	bx	lr
 8002818:	2000000c 	.word	0x2000000c

0800281c <setvbuf>:
 800281c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002820:	461d      	mov	r5, r3
 8002822:	4b5d      	ldr	r3, [pc, #372]	; (8002998 <setvbuf+0x17c>)
 8002824:	4604      	mov	r4, r0
 8002826:	681f      	ldr	r7, [r3, #0]
 8002828:	460e      	mov	r6, r1
 800282a:	4690      	mov	r8, r2
 800282c:	b127      	cbz	r7, 8002838 <setvbuf+0x1c>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	b913      	cbnz	r3, 8002838 <setvbuf+0x1c>
 8002832:	4638      	mov	r0, r7
 8002834:	f000 faa0 	bl	8002d78 <__sinit>
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <setvbuf+0x180>)
 800283a:	429c      	cmp	r4, r3
 800283c:	d167      	bne.n	800290e <setvbuf+0xf2>
 800283e:	687c      	ldr	r4, [r7, #4]
 8002840:	f1b8 0f02 	cmp.w	r8, #2
 8002844:	d006      	beq.n	8002854 <setvbuf+0x38>
 8002846:	f1b8 0f01 	cmp.w	r8, #1
 800284a:	f200 809f 	bhi.w	800298c <setvbuf+0x170>
 800284e:	2d00      	cmp	r5, #0
 8002850:	f2c0 809c 	blt.w	800298c <setvbuf+0x170>
 8002854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002856:	07db      	lsls	r3, r3, #31
 8002858:	d405      	bmi.n	8002866 <setvbuf+0x4a>
 800285a:	89a3      	ldrh	r3, [r4, #12]
 800285c:	0598      	lsls	r0, r3, #22
 800285e:	d402      	bmi.n	8002866 <setvbuf+0x4a>
 8002860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002862:	f000 fb44 	bl	8002eee <__retarget_lock_acquire_recursive>
 8002866:	4621      	mov	r1, r4
 8002868:	4638      	mov	r0, r7
 800286a:	f000 f9df 	bl	8002c2c <_fflush_r>
 800286e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002870:	b141      	cbz	r1, 8002884 <setvbuf+0x68>
 8002872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002876:	4299      	cmp	r1, r3
 8002878:	d002      	beq.n	8002880 <setvbuf+0x64>
 800287a:	4638      	mov	r0, r7
 800287c:	f000 fba6 	bl	8002fcc <_free_r>
 8002880:	2300      	movs	r3, #0
 8002882:	6363      	str	r3, [r4, #52]	; 0x34
 8002884:	2300      	movs	r3, #0
 8002886:	61a3      	str	r3, [r4, #24]
 8002888:	6063      	str	r3, [r4, #4]
 800288a:	89a3      	ldrh	r3, [r4, #12]
 800288c:	0619      	lsls	r1, r3, #24
 800288e:	d503      	bpl.n	8002898 <setvbuf+0x7c>
 8002890:	4638      	mov	r0, r7
 8002892:	6921      	ldr	r1, [r4, #16]
 8002894:	f000 fb9a 	bl	8002fcc <_free_r>
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	f1b8 0f02 	cmp.w	r8, #2
 800289e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	81a3      	strh	r3, [r4, #12]
 80028a8:	d06c      	beq.n	8002984 <setvbuf+0x168>
 80028aa:	ab01      	add	r3, sp, #4
 80028ac:	466a      	mov	r2, sp
 80028ae:	4621      	mov	r1, r4
 80028b0:	4638      	mov	r0, r7
 80028b2:	f000 fb1e 	bl	8002ef2 <__swhatbuf_r>
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	4318      	orrs	r0, r3
 80028ba:	81a0      	strh	r0, [r4, #12]
 80028bc:	2d00      	cmp	r5, #0
 80028be:	d130      	bne.n	8002922 <setvbuf+0x106>
 80028c0:	9d00      	ldr	r5, [sp, #0]
 80028c2:	4628      	mov	r0, r5
 80028c4:	f000 fb7a 	bl	8002fbc <malloc>
 80028c8:	4606      	mov	r6, r0
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d155      	bne.n	800297a <setvbuf+0x15e>
 80028ce:	f8dd 9000 	ldr.w	r9, [sp]
 80028d2:	45a9      	cmp	r9, r5
 80028d4:	d14a      	bne.n	800296c <setvbuf+0x150>
 80028d6:	f04f 35ff 	mov.w	r5, #4294967295
 80028da:	2200      	movs	r2, #0
 80028dc:	60a2      	str	r2, [r4, #8]
 80028de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80028e2:	6022      	str	r2, [r4, #0]
 80028e4:	6122      	str	r2, [r4, #16]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028ec:	6162      	str	r2, [r4, #20]
 80028ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	07d2      	lsls	r2, r2, #31
 80028f6:	81a3      	strh	r3, [r4, #12]
 80028f8:	d405      	bmi.n	8002906 <setvbuf+0xea>
 80028fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80028fe:	d102      	bne.n	8002906 <setvbuf+0xea>
 8002900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002902:	f000 faf5 	bl	8002ef0 <__retarget_lock_release_recursive>
 8002906:	4628      	mov	r0, r5
 8002908:	b003      	add	sp, #12
 800290a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <setvbuf+0x184>)
 8002910:	429c      	cmp	r4, r3
 8002912:	d101      	bne.n	8002918 <setvbuf+0xfc>
 8002914:	68bc      	ldr	r4, [r7, #8]
 8002916:	e793      	b.n	8002840 <setvbuf+0x24>
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <setvbuf+0x188>)
 800291a:	429c      	cmp	r4, r3
 800291c:	bf08      	it	eq
 800291e:	68fc      	ldreq	r4, [r7, #12]
 8002920:	e78e      	b.n	8002840 <setvbuf+0x24>
 8002922:	2e00      	cmp	r6, #0
 8002924:	d0cd      	beq.n	80028c2 <setvbuf+0xa6>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	b913      	cbnz	r3, 8002930 <setvbuf+0x114>
 800292a:	4638      	mov	r0, r7
 800292c:	f000 fa24 	bl	8002d78 <__sinit>
 8002930:	f1b8 0f01 	cmp.w	r8, #1
 8002934:	bf08      	it	eq
 8002936:	89a3      	ldrheq	r3, [r4, #12]
 8002938:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800293c:	bf04      	itt	eq
 800293e:	f043 0301 	orreq.w	r3, r3, #1
 8002942:	81a3      	strheq	r3, [r4, #12]
 8002944:	89a2      	ldrh	r2, [r4, #12]
 8002946:	6026      	str	r6, [r4, #0]
 8002948:	f012 0308 	ands.w	r3, r2, #8
 800294c:	d01c      	beq.n	8002988 <setvbuf+0x16c>
 800294e:	07d3      	lsls	r3, r2, #31
 8002950:	bf41      	itttt	mi
 8002952:	2300      	movmi	r3, #0
 8002954:	426d      	negmi	r5, r5
 8002956:	60a3      	strmi	r3, [r4, #8]
 8002958:	61a5      	strmi	r5, [r4, #24]
 800295a:	bf58      	it	pl
 800295c:	60a5      	strpl	r5, [r4, #8]
 800295e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002960:	f015 0501 	ands.w	r5, r5, #1
 8002964:	d115      	bne.n	8002992 <setvbuf+0x176>
 8002966:	f412 7f00 	tst.w	r2, #512	; 0x200
 800296a:	e7c8      	b.n	80028fe <setvbuf+0xe2>
 800296c:	4648      	mov	r0, r9
 800296e:	f000 fb25 	bl	8002fbc <malloc>
 8002972:	4606      	mov	r6, r0
 8002974:	2800      	cmp	r0, #0
 8002976:	d0ae      	beq.n	80028d6 <setvbuf+0xba>
 8002978:	464d      	mov	r5, r9
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002980:	81a3      	strh	r3, [r4, #12]
 8002982:	e7d0      	b.n	8002926 <setvbuf+0x10a>
 8002984:	2500      	movs	r5, #0
 8002986:	e7a8      	b.n	80028da <setvbuf+0xbe>
 8002988:	60a3      	str	r3, [r4, #8]
 800298a:	e7e8      	b.n	800295e <setvbuf+0x142>
 800298c:	f04f 35ff 	mov.w	r5, #4294967295
 8002990:	e7b9      	b.n	8002906 <setvbuf+0xea>
 8002992:	2500      	movs	r5, #0
 8002994:	e7b7      	b.n	8002906 <setvbuf+0xea>
 8002996:	bf00      	nop
 8002998:	2000000c 	.word	0x2000000c
 800299c:	080045b0 	.word	0x080045b0
 80029a0:	080045d0 	.word	0x080045d0
 80029a4:	08004590 	.word	0x08004590

080029a8 <__swbuf_r>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	460e      	mov	r6, r1
 80029ac:	4614      	mov	r4, r2
 80029ae:	4605      	mov	r5, r0
 80029b0:	b118      	cbz	r0, 80029ba <__swbuf_r+0x12>
 80029b2:	6983      	ldr	r3, [r0, #24]
 80029b4:	b90b      	cbnz	r3, 80029ba <__swbuf_r+0x12>
 80029b6:	f000 f9df 	bl	8002d78 <__sinit>
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <__swbuf_r+0x98>)
 80029bc:	429c      	cmp	r4, r3
 80029be:	d12b      	bne.n	8002a18 <__swbuf_r+0x70>
 80029c0:	686c      	ldr	r4, [r5, #4]
 80029c2:	69a3      	ldr	r3, [r4, #24]
 80029c4:	60a3      	str	r3, [r4, #8]
 80029c6:	89a3      	ldrh	r3, [r4, #12]
 80029c8:	071a      	lsls	r2, r3, #28
 80029ca:	d52f      	bpl.n	8002a2c <__swbuf_r+0x84>
 80029cc:	6923      	ldr	r3, [r4, #16]
 80029ce:	b36b      	cbz	r3, 8002a2c <__swbuf_r+0x84>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	6820      	ldr	r0, [r4, #0]
 80029d4:	b2f6      	uxtb	r6, r6
 80029d6:	1ac0      	subs	r0, r0, r3
 80029d8:	6963      	ldr	r3, [r4, #20]
 80029da:	4637      	mov	r7, r6
 80029dc:	4283      	cmp	r3, r0
 80029de:	dc04      	bgt.n	80029ea <__swbuf_r+0x42>
 80029e0:	4621      	mov	r1, r4
 80029e2:	4628      	mov	r0, r5
 80029e4:	f000 f922 	bl	8002c2c <_fflush_r>
 80029e8:	bb30      	cbnz	r0, 8002a38 <__swbuf_r+0x90>
 80029ea:	68a3      	ldr	r3, [r4, #8]
 80029ec:	3001      	adds	r0, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	60a3      	str	r3, [r4, #8]
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	6022      	str	r2, [r4, #0]
 80029f8:	701e      	strb	r6, [r3, #0]
 80029fa:	6963      	ldr	r3, [r4, #20]
 80029fc:	4283      	cmp	r3, r0
 80029fe:	d004      	beq.n	8002a0a <__swbuf_r+0x62>
 8002a00:	89a3      	ldrh	r3, [r4, #12]
 8002a02:	07db      	lsls	r3, r3, #31
 8002a04:	d506      	bpl.n	8002a14 <__swbuf_r+0x6c>
 8002a06:	2e0a      	cmp	r6, #10
 8002a08:	d104      	bne.n	8002a14 <__swbuf_r+0x6c>
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f000 f90d 	bl	8002c2c <_fflush_r>
 8002a12:	b988      	cbnz	r0, 8002a38 <__swbuf_r+0x90>
 8002a14:	4638      	mov	r0, r7
 8002a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <__swbuf_r+0x9c>)
 8002a1a:	429c      	cmp	r4, r3
 8002a1c:	d101      	bne.n	8002a22 <__swbuf_r+0x7a>
 8002a1e:	68ac      	ldr	r4, [r5, #8]
 8002a20:	e7cf      	b.n	80029c2 <__swbuf_r+0x1a>
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <__swbuf_r+0xa0>)
 8002a24:	429c      	cmp	r4, r3
 8002a26:	bf08      	it	eq
 8002a28:	68ec      	ldreq	r4, [r5, #12]
 8002a2a:	e7ca      	b.n	80029c2 <__swbuf_r+0x1a>
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f000 f80c 	bl	8002a4c <__swsetup_r>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d0cb      	beq.n	80029d0 <__swbuf_r+0x28>
 8002a38:	f04f 37ff 	mov.w	r7, #4294967295
 8002a3c:	e7ea      	b.n	8002a14 <__swbuf_r+0x6c>
 8002a3e:	bf00      	nop
 8002a40:	080045b0 	.word	0x080045b0
 8002a44:	080045d0 	.word	0x080045d0
 8002a48:	08004590 	.word	0x08004590

08002a4c <__swsetup_r>:
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <__swsetup_r+0xcc>)
 8002a4e:	b570      	push	{r4, r5, r6, lr}
 8002a50:	681d      	ldr	r5, [r3, #0]
 8002a52:	4606      	mov	r6, r0
 8002a54:	460c      	mov	r4, r1
 8002a56:	b125      	cbz	r5, 8002a62 <__swsetup_r+0x16>
 8002a58:	69ab      	ldr	r3, [r5, #24]
 8002a5a:	b913      	cbnz	r3, 8002a62 <__swsetup_r+0x16>
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f000 f98b 	bl	8002d78 <__sinit>
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <__swsetup_r+0xd0>)
 8002a64:	429c      	cmp	r4, r3
 8002a66:	d10f      	bne.n	8002a88 <__swsetup_r+0x3c>
 8002a68:	686c      	ldr	r4, [r5, #4]
 8002a6a:	89a3      	ldrh	r3, [r4, #12]
 8002a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a70:	0719      	lsls	r1, r3, #28
 8002a72:	d42c      	bmi.n	8002ace <__swsetup_r+0x82>
 8002a74:	06dd      	lsls	r5, r3, #27
 8002a76:	d411      	bmi.n	8002a9c <__swsetup_r+0x50>
 8002a78:	2309      	movs	r3, #9
 8002a7a:	6033      	str	r3, [r6, #0]
 8002a7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	81a3      	strh	r3, [r4, #12]
 8002a86:	e03e      	b.n	8002b06 <__swsetup_r+0xba>
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <__swsetup_r+0xd4>)
 8002a8a:	429c      	cmp	r4, r3
 8002a8c:	d101      	bne.n	8002a92 <__swsetup_r+0x46>
 8002a8e:	68ac      	ldr	r4, [r5, #8]
 8002a90:	e7eb      	b.n	8002a6a <__swsetup_r+0x1e>
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <__swsetup_r+0xd8>)
 8002a94:	429c      	cmp	r4, r3
 8002a96:	bf08      	it	eq
 8002a98:	68ec      	ldreq	r4, [r5, #12]
 8002a9a:	e7e6      	b.n	8002a6a <__swsetup_r+0x1e>
 8002a9c:	0758      	lsls	r0, r3, #29
 8002a9e:	d512      	bpl.n	8002ac6 <__swsetup_r+0x7a>
 8002aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aa2:	b141      	cbz	r1, 8002ab6 <__swsetup_r+0x6a>
 8002aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aa8:	4299      	cmp	r1, r3
 8002aaa:	d002      	beq.n	8002ab2 <__swsetup_r+0x66>
 8002aac:	4630      	mov	r0, r6
 8002aae:	f000 fa8d 	bl	8002fcc <_free_r>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ab6:	89a3      	ldrh	r3, [r4, #12]
 8002ab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002abc:	81a3      	strh	r3, [r4, #12]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	6923      	ldr	r3, [r4, #16]
 8002ac4:	6023      	str	r3, [r4, #0]
 8002ac6:	89a3      	ldrh	r3, [r4, #12]
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	81a3      	strh	r3, [r4, #12]
 8002ace:	6923      	ldr	r3, [r4, #16]
 8002ad0:	b94b      	cbnz	r3, 8002ae6 <__swsetup_r+0x9a>
 8002ad2:	89a3      	ldrh	r3, [r4, #12]
 8002ad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002adc:	d003      	beq.n	8002ae6 <__swsetup_r+0x9a>
 8002ade:	4621      	mov	r1, r4
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	f000 fa2b 	bl	8002f3c <__smakebuf_r>
 8002ae6:	89a0      	ldrh	r0, [r4, #12]
 8002ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002aec:	f010 0301 	ands.w	r3, r0, #1
 8002af0:	d00a      	beq.n	8002b08 <__swsetup_r+0xbc>
 8002af2:	2300      	movs	r3, #0
 8002af4:	60a3      	str	r3, [r4, #8]
 8002af6:	6963      	ldr	r3, [r4, #20]
 8002af8:	425b      	negs	r3, r3
 8002afa:	61a3      	str	r3, [r4, #24]
 8002afc:	6923      	ldr	r3, [r4, #16]
 8002afe:	b943      	cbnz	r3, 8002b12 <__swsetup_r+0xc6>
 8002b00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b04:	d1ba      	bne.n	8002a7c <__swsetup_r+0x30>
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	0781      	lsls	r1, r0, #30
 8002b0a:	bf58      	it	pl
 8002b0c:	6963      	ldrpl	r3, [r4, #20]
 8002b0e:	60a3      	str	r3, [r4, #8]
 8002b10:	e7f4      	b.n	8002afc <__swsetup_r+0xb0>
 8002b12:	2000      	movs	r0, #0
 8002b14:	e7f7      	b.n	8002b06 <__swsetup_r+0xba>
 8002b16:	bf00      	nop
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	080045b0 	.word	0x080045b0
 8002b20:	080045d0 	.word	0x080045d0
 8002b24:	08004590 	.word	0x08004590

08002b28 <__sflush_r>:
 8002b28:	898a      	ldrh	r2, [r1, #12]
 8002b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	0710      	lsls	r0, r2, #28
 8002b30:	460c      	mov	r4, r1
 8002b32:	d457      	bmi.n	8002be4 <__sflush_r+0xbc>
 8002b34:	684b      	ldr	r3, [r1, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	dc04      	bgt.n	8002b44 <__sflush_r+0x1c>
 8002b3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	dc01      	bgt.n	8002b44 <__sflush_r+0x1c>
 8002b40:	2000      	movs	r0, #0
 8002b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b46:	2e00      	cmp	r6, #0
 8002b48:	d0fa      	beq.n	8002b40 <__sflush_r+0x18>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b50:	682f      	ldr	r7, [r5, #0]
 8002b52:	602b      	str	r3, [r5, #0]
 8002b54:	d032      	beq.n	8002bbc <__sflush_r+0x94>
 8002b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	075a      	lsls	r2, r3, #29
 8002b5c:	d505      	bpl.n	8002b6a <__sflush_r+0x42>
 8002b5e:	6863      	ldr	r3, [r4, #4]
 8002b60:	1ac0      	subs	r0, r0, r3
 8002b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b64:	b10b      	cbz	r3, 8002b6a <__sflush_r+0x42>
 8002b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b68:	1ac0      	subs	r0, r0, r3
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b70:	4628      	mov	r0, r5
 8002b72:	6a21      	ldr	r1, [r4, #32]
 8002b74:	47b0      	blx	r6
 8002b76:	1c43      	adds	r3, r0, #1
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	d106      	bne.n	8002b8a <__sflush_r+0x62>
 8002b7c:	6829      	ldr	r1, [r5, #0]
 8002b7e:	291d      	cmp	r1, #29
 8002b80:	d82c      	bhi.n	8002bdc <__sflush_r+0xb4>
 8002b82:	4a29      	ldr	r2, [pc, #164]	; (8002c28 <__sflush_r+0x100>)
 8002b84:	40ca      	lsrs	r2, r1
 8002b86:	07d6      	lsls	r6, r2, #31
 8002b88:	d528      	bpl.n	8002bdc <__sflush_r+0xb4>
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	6062      	str	r2, [r4, #4]
 8002b8e:	6922      	ldr	r2, [r4, #16]
 8002b90:	04d9      	lsls	r1, r3, #19
 8002b92:	6022      	str	r2, [r4, #0]
 8002b94:	d504      	bpl.n	8002ba0 <__sflush_r+0x78>
 8002b96:	1c42      	adds	r2, r0, #1
 8002b98:	d101      	bne.n	8002b9e <__sflush_r+0x76>
 8002b9a:	682b      	ldr	r3, [r5, #0]
 8002b9c:	b903      	cbnz	r3, 8002ba0 <__sflush_r+0x78>
 8002b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8002ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ba2:	602f      	str	r7, [r5, #0]
 8002ba4:	2900      	cmp	r1, #0
 8002ba6:	d0cb      	beq.n	8002b40 <__sflush_r+0x18>
 8002ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bac:	4299      	cmp	r1, r3
 8002bae:	d002      	beq.n	8002bb6 <__sflush_r+0x8e>
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 fa0b 	bl	8002fcc <_free_r>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8002bba:	e7c2      	b.n	8002b42 <__sflush_r+0x1a>
 8002bbc:	6a21      	ldr	r1, [r4, #32]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	47b0      	blx	r6
 8002bc4:	1c41      	adds	r1, r0, #1
 8002bc6:	d1c7      	bne.n	8002b58 <__sflush_r+0x30>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0c4      	beq.n	8002b58 <__sflush_r+0x30>
 8002bce:	2b1d      	cmp	r3, #29
 8002bd0:	d001      	beq.n	8002bd6 <__sflush_r+0xae>
 8002bd2:	2b16      	cmp	r3, #22
 8002bd4:	d101      	bne.n	8002bda <__sflush_r+0xb2>
 8002bd6:	602f      	str	r7, [r5, #0]
 8002bd8:	e7b2      	b.n	8002b40 <__sflush_r+0x18>
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be0:	81a3      	strh	r3, [r4, #12]
 8002be2:	e7ae      	b.n	8002b42 <__sflush_r+0x1a>
 8002be4:	690f      	ldr	r7, [r1, #16]
 8002be6:	2f00      	cmp	r7, #0
 8002be8:	d0aa      	beq.n	8002b40 <__sflush_r+0x18>
 8002bea:	0793      	lsls	r3, r2, #30
 8002bec:	bf18      	it	ne
 8002bee:	2300      	movne	r3, #0
 8002bf0:	680e      	ldr	r6, [r1, #0]
 8002bf2:	bf08      	it	eq
 8002bf4:	694b      	ldreq	r3, [r1, #20]
 8002bf6:	1bf6      	subs	r6, r6, r7
 8002bf8:	600f      	str	r7, [r1, #0]
 8002bfa:	608b      	str	r3, [r1, #8]
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	dd9f      	ble.n	8002b40 <__sflush_r+0x18>
 8002c00:	4633      	mov	r3, r6
 8002c02:	463a      	mov	r2, r7
 8002c04:	4628      	mov	r0, r5
 8002c06:	6a21      	ldr	r1, [r4, #32]
 8002c08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002c0c:	47e0      	blx	ip
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	dc06      	bgt.n	8002c20 <__sflush_r+0xf8>
 8002c12:	89a3      	ldrh	r3, [r4, #12]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	e790      	b.n	8002b42 <__sflush_r+0x1a>
 8002c20:	4407      	add	r7, r0
 8002c22:	1a36      	subs	r6, r6, r0
 8002c24:	e7ea      	b.n	8002bfc <__sflush_r+0xd4>
 8002c26:	bf00      	nop
 8002c28:	20400001 	.word	0x20400001

08002c2c <_fflush_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	690b      	ldr	r3, [r1, #16]
 8002c30:	4605      	mov	r5, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	b913      	cbnz	r3, 8002c3c <_fflush_r+0x10>
 8002c36:	2500      	movs	r5, #0
 8002c38:	4628      	mov	r0, r5
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	b118      	cbz	r0, 8002c46 <_fflush_r+0x1a>
 8002c3e:	6983      	ldr	r3, [r0, #24]
 8002c40:	b90b      	cbnz	r3, 8002c46 <_fflush_r+0x1a>
 8002c42:	f000 f899 	bl	8002d78 <__sinit>
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <_fflush_r+0x6c>)
 8002c48:	429c      	cmp	r4, r3
 8002c4a:	d11b      	bne.n	8002c84 <_fflush_r+0x58>
 8002c4c:	686c      	ldr	r4, [r5, #4]
 8002c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <_fflush_r+0xa>
 8002c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c58:	07d0      	lsls	r0, r2, #31
 8002c5a:	d404      	bmi.n	8002c66 <_fflush_r+0x3a>
 8002c5c:	0599      	lsls	r1, r3, #22
 8002c5e:	d402      	bmi.n	8002c66 <_fflush_r+0x3a>
 8002c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c62:	f000 f944 	bl	8002eee <__retarget_lock_acquire_recursive>
 8002c66:	4628      	mov	r0, r5
 8002c68:	4621      	mov	r1, r4
 8002c6a:	f7ff ff5d 	bl	8002b28 <__sflush_r>
 8002c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c70:	4605      	mov	r5, r0
 8002c72:	07da      	lsls	r2, r3, #31
 8002c74:	d4e0      	bmi.n	8002c38 <_fflush_r+0xc>
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	059b      	lsls	r3, r3, #22
 8002c7a:	d4dd      	bmi.n	8002c38 <_fflush_r+0xc>
 8002c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c7e:	f000 f937 	bl	8002ef0 <__retarget_lock_release_recursive>
 8002c82:	e7d9      	b.n	8002c38 <_fflush_r+0xc>
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <_fflush_r+0x70>)
 8002c86:	429c      	cmp	r4, r3
 8002c88:	d101      	bne.n	8002c8e <_fflush_r+0x62>
 8002c8a:	68ac      	ldr	r4, [r5, #8]
 8002c8c:	e7df      	b.n	8002c4e <_fflush_r+0x22>
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <_fflush_r+0x74>)
 8002c90:	429c      	cmp	r4, r3
 8002c92:	bf08      	it	eq
 8002c94:	68ec      	ldreq	r4, [r5, #12]
 8002c96:	e7da      	b.n	8002c4e <_fflush_r+0x22>
 8002c98:	080045b0 	.word	0x080045b0
 8002c9c:	080045d0 	.word	0x080045d0
 8002ca0:	08004590 	.word	0x08004590

08002ca4 <fflush>:
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	b920      	cbnz	r0, 8002cb2 <fflush+0xe>
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <fflush+0x18>)
 8002caa:	4905      	ldr	r1, [pc, #20]	; (8002cc0 <fflush+0x1c>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	f000 b8fe 	b.w	8002eae <_fwalk_reent>
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <fflush+0x20>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f7ff bfb9 	b.w	8002c2c <_fflush_r>
 8002cba:	bf00      	nop
 8002cbc:	0800458c 	.word	0x0800458c
 8002cc0:	08002c2d 	.word	0x08002c2d
 8002cc4:	2000000c 	.word	0x2000000c

08002cc8 <std>:
 8002cc8:	2300      	movs	r3, #0
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	4604      	mov	r4, r0
 8002cce:	e9c0 3300 	strd	r3, r3, [r0]
 8002cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cd6:	6083      	str	r3, [r0, #8]
 8002cd8:	8181      	strh	r1, [r0, #12]
 8002cda:	6643      	str	r3, [r0, #100]	; 0x64
 8002cdc:	81c2      	strh	r2, [r0, #14]
 8002cde:	6183      	str	r3, [r0, #24]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	305c      	adds	r0, #92	; 0x5c
 8002ce6:	f7ff fceb 	bl	80026c0 <memset>
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <std+0x38>)
 8002cec:	6224      	str	r4, [r4, #32]
 8002cee:	6263      	str	r3, [r4, #36]	; 0x24
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <std+0x3c>)
 8002cf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <std+0x40>)
 8002cf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <std+0x44>)
 8002cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	08003f5d 	.word	0x08003f5d
 8002d04:	08003f7f 	.word	0x08003f7f
 8002d08:	08003fb7 	.word	0x08003fb7
 8002d0c:	08003fdb 	.word	0x08003fdb

08002d10 <_cleanup_r>:
 8002d10:	4901      	ldr	r1, [pc, #4]	; (8002d18 <_cleanup_r+0x8>)
 8002d12:	f000 b8cc 	b.w	8002eae <_fwalk_reent>
 8002d16:	bf00      	nop
 8002d18:	08002c2d 	.word	0x08002c2d

08002d1c <__sfmoreglue>:
 8002d1c:	2268      	movs	r2, #104	; 0x68
 8002d1e:	b570      	push	{r4, r5, r6, lr}
 8002d20:	1e4d      	subs	r5, r1, #1
 8002d22:	4355      	muls	r5, r2
 8002d24:	460e      	mov	r6, r1
 8002d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d2a:	f000 f9b7 	bl	800309c <_malloc_r>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	b140      	cbz	r0, 8002d44 <__sfmoreglue+0x28>
 8002d32:	2100      	movs	r1, #0
 8002d34:	e9c0 1600 	strd	r1, r6, [r0]
 8002d38:	300c      	adds	r0, #12
 8002d3a:	60a0      	str	r0, [r4, #8]
 8002d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d40:	f7ff fcbe 	bl	80026c0 <memset>
 8002d44:	4620      	mov	r0, r4
 8002d46:	bd70      	pop	{r4, r5, r6, pc}

08002d48 <__sfp_lock_acquire>:
 8002d48:	4801      	ldr	r0, [pc, #4]	; (8002d50 <__sfp_lock_acquire+0x8>)
 8002d4a:	f000 b8d0 	b.w	8002eee <__retarget_lock_acquire_recursive>
 8002d4e:	bf00      	nop
 8002d50:	20000129 	.word	0x20000129

08002d54 <__sfp_lock_release>:
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <__sfp_lock_release+0x8>)
 8002d56:	f000 b8cb 	b.w	8002ef0 <__retarget_lock_release_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	20000129 	.word	0x20000129

08002d60 <__sinit_lock_acquire>:
 8002d60:	4801      	ldr	r0, [pc, #4]	; (8002d68 <__sinit_lock_acquire+0x8>)
 8002d62:	f000 b8c4 	b.w	8002eee <__retarget_lock_acquire_recursive>
 8002d66:	bf00      	nop
 8002d68:	2000012a 	.word	0x2000012a

08002d6c <__sinit_lock_release>:
 8002d6c:	4801      	ldr	r0, [pc, #4]	; (8002d74 <__sinit_lock_release+0x8>)
 8002d6e:	f000 b8bf 	b.w	8002ef0 <__retarget_lock_release_recursive>
 8002d72:	bf00      	nop
 8002d74:	2000012a 	.word	0x2000012a

08002d78 <__sinit>:
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	f7ff fff0 	bl	8002d60 <__sinit_lock_acquire>
 8002d80:	69a3      	ldr	r3, [r4, #24]
 8002d82:	b11b      	cbz	r3, 8002d8c <__sinit+0x14>
 8002d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d88:	f7ff bff0 	b.w	8002d6c <__sinit_lock_release>
 8002d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d90:	6523      	str	r3, [r4, #80]	; 0x50
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <__sinit+0x68>)
 8002d94:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <__sinit+0x6c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	bf08      	it	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	4620      	mov	r0, r4
 8002da2:	bf08      	it	eq
 8002da4:	61a3      	streq	r3, [r4, #24]
 8002da6:	f000 f81f 	bl	8002de8 <__sfp>
 8002daa:	6060      	str	r0, [r4, #4]
 8002dac:	4620      	mov	r0, r4
 8002dae:	f000 f81b 	bl	8002de8 <__sfp>
 8002db2:	60a0      	str	r0, [r4, #8]
 8002db4:	4620      	mov	r0, r4
 8002db6:	f000 f817 	bl	8002de8 <__sfp>
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	60e0      	str	r0, [r4, #12]
 8002dc0:	6860      	ldr	r0, [r4, #4]
 8002dc2:	f7ff ff81 	bl	8002cc8 <std>
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	2109      	movs	r1, #9
 8002dca:	68a0      	ldr	r0, [r4, #8]
 8002dcc:	f7ff ff7c 	bl	8002cc8 <std>
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	2112      	movs	r1, #18
 8002dd4:	68e0      	ldr	r0, [r4, #12]
 8002dd6:	f7ff ff77 	bl	8002cc8 <std>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61a3      	str	r3, [r4, #24]
 8002dde:	e7d1      	b.n	8002d84 <__sinit+0xc>
 8002de0:	0800458c 	.word	0x0800458c
 8002de4:	08002d11 	.word	0x08002d11

08002de8 <__sfp>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	4607      	mov	r7, r0
 8002dec:	f7ff ffac 	bl	8002d48 <__sfp_lock_acquire>
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <__sfp+0x84>)
 8002df2:	681e      	ldr	r6, [r3, #0]
 8002df4:	69b3      	ldr	r3, [r6, #24]
 8002df6:	b913      	cbnz	r3, 8002dfe <__sfp+0x16>
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f7ff ffbd 	bl	8002d78 <__sinit>
 8002dfe:	3648      	adds	r6, #72	; 0x48
 8002e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	d503      	bpl.n	8002e10 <__sfp+0x28>
 8002e08:	6833      	ldr	r3, [r6, #0]
 8002e0a:	b30b      	cbz	r3, 8002e50 <__sfp+0x68>
 8002e0c:	6836      	ldr	r6, [r6, #0]
 8002e0e:	e7f7      	b.n	8002e00 <__sfp+0x18>
 8002e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e14:	b9d5      	cbnz	r5, 8002e4c <__sfp+0x64>
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <__sfp+0x88>)
 8002e18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002e1c:	60e3      	str	r3, [r4, #12]
 8002e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8002e20:	f000 f864 	bl	8002eec <__retarget_lock_init_recursive>
 8002e24:	f7ff ff96 	bl	8002d54 <__sfp_lock_release>
 8002e28:	2208      	movs	r2, #8
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e34:	6025      	str	r5, [r4, #0]
 8002e36:	61a5      	str	r5, [r4, #24]
 8002e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e3c:	f7ff fc40 	bl	80026c0 <memset>
 8002e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e48:	4620      	mov	r0, r4
 8002e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e4c:	3468      	adds	r4, #104	; 0x68
 8002e4e:	e7d9      	b.n	8002e04 <__sfp+0x1c>
 8002e50:	2104      	movs	r1, #4
 8002e52:	4638      	mov	r0, r7
 8002e54:	f7ff ff62 	bl	8002d1c <__sfmoreglue>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	6030      	str	r0, [r6, #0]
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d1d5      	bne.n	8002e0c <__sfp+0x24>
 8002e60:	f7ff ff78 	bl	8002d54 <__sfp_lock_release>
 8002e64:	230c      	movs	r3, #12
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	e7ee      	b.n	8002e48 <__sfp+0x60>
 8002e6a:	bf00      	nop
 8002e6c:	0800458c 	.word	0x0800458c
 8002e70:	ffff0001 	.word	0xffff0001

08002e74 <_fwalk>:
 8002e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e78:	460f      	mov	r7, r1
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e80:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002e84:	f1b8 0801 	subs.w	r8, r8, #1
 8002e88:	d505      	bpl.n	8002e96 <_fwalk+0x22>
 8002e8a:	6824      	ldr	r4, [r4, #0]
 8002e8c:	2c00      	cmp	r4, #0
 8002e8e:	d1f7      	bne.n	8002e80 <_fwalk+0xc>
 8002e90:	4630      	mov	r0, r6
 8002e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e96:	89ab      	ldrh	r3, [r5, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d906      	bls.n	8002eaa <_fwalk+0x36>
 8002e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	d002      	beq.n	8002eaa <_fwalk+0x36>
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	47b8      	blx	r7
 8002ea8:	4306      	orrs	r6, r0
 8002eaa:	3568      	adds	r5, #104	; 0x68
 8002eac:	e7ea      	b.n	8002e84 <_fwalk+0x10>

08002eae <_fwalk_reent>:
 8002eae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eb2:	4606      	mov	r6, r0
 8002eb4:	4688      	mov	r8, r1
 8002eb6:	2700      	movs	r7, #0
 8002eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8002ec4:	d505      	bpl.n	8002ed2 <_fwalk_reent+0x24>
 8002ec6:	6824      	ldr	r4, [r4, #0]
 8002ec8:	2c00      	cmp	r4, #0
 8002eca:	d1f7      	bne.n	8002ebc <_fwalk_reent+0xe>
 8002ecc:	4638      	mov	r0, r7
 8002ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ed2:	89ab      	ldrh	r3, [r5, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d907      	bls.n	8002ee8 <_fwalk_reent+0x3a>
 8002ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d003      	beq.n	8002ee8 <_fwalk_reent+0x3a>
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	47c0      	blx	r8
 8002ee6:	4307      	orrs	r7, r0
 8002ee8:	3568      	adds	r5, #104	; 0x68
 8002eea:	e7e9      	b.n	8002ec0 <_fwalk_reent+0x12>

08002eec <__retarget_lock_init_recursive>:
 8002eec:	4770      	bx	lr

08002eee <__retarget_lock_acquire_recursive>:
 8002eee:	4770      	bx	lr

08002ef0 <__retarget_lock_release_recursive>:
 8002ef0:	4770      	bx	lr

08002ef2 <__swhatbuf_r>:
 8002ef2:	b570      	push	{r4, r5, r6, lr}
 8002ef4:	460e      	mov	r6, r1
 8002ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002efa:	4614      	mov	r4, r2
 8002efc:	2900      	cmp	r1, #0
 8002efe:	461d      	mov	r5, r3
 8002f00:	b096      	sub	sp, #88	; 0x58
 8002f02:	da08      	bge.n	8002f16 <__swhatbuf_r+0x24>
 8002f04:	2200      	movs	r2, #0
 8002f06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f0a:	602a      	str	r2, [r5, #0]
 8002f0c:	061a      	lsls	r2, r3, #24
 8002f0e:	d410      	bmi.n	8002f32 <__swhatbuf_r+0x40>
 8002f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f14:	e00e      	b.n	8002f34 <__swhatbuf_r+0x42>
 8002f16:	466a      	mov	r2, sp
 8002f18:	f001 fa48 	bl	80043ac <_fstat_r>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	dbf1      	blt.n	8002f04 <__swhatbuf_r+0x12>
 8002f20:	9a01      	ldr	r2, [sp, #4]
 8002f22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f2a:	425a      	negs	r2, r3
 8002f2c:	415a      	adcs	r2, r3
 8002f2e:	602a      	str	r2, [r5, #0]
 8002f30:	e7ee      	b.n	8002f10 <__swhatbuf_r+0x1e>
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	2000      	movs	r0, #0
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	b016      	add	sp, #88	; 0x58
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}

08002f3c <__smakebuf_r>:
 8002f3c:	898b      	ldrh	r3, [r1, #12]
 8002f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f40:	079d      	lsls	r5, r3, #30
 8002f42:	4606      	mov	r6, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	d507      	bpl.n	8002f58 <__smakebuf_r+0x1c>
 8002f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	2301      	movs	r3, #1
 8002f52:	6163      	str	r3, [r4, #20]
 8002f54:	b002      	add	sp, #8
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	466a      	mov	r2, sp
 8002f5a:	ab01      	add	r3, sp, #4
 8002f5c:	f7ff ffc9 	bl	8002ef2 <__swhatbuf_r>
 8002f60:	9900      	ldr	r1, [sp, #0]
 8002f62:	4605      	mov	r5, r0
 8002f64:	4630      	mov	r0, r6
 8002f66:	f000 f899 	bl	800309c <_malloc_r>
 8002f6a:	b948      	cbnz	r0, 8002f80 <__smakebuf_r+0x44>
 8002f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f70:	059a      	lsls	r2, r3, #22
 8002f72:	d4ef      	bmi.n	8002f54 <__smakebuf_r+0x18>
 8002f74:	f023 0303 	bic.w	r3, r3, #3
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	81a3      	strh	r3, [r4, #12]
 8002f7e:	e7e3      	b.n	8002f48 <__smakebuf_r+0xc>
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <__smakebuf_r+0x7c>)
 8002f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	6020      	str	r0, [r4, #0]
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	9b00      	ldr	r3, [sp, #0]
 8002f90:	6120      	str	r0, [r4, #16]
 8002f92:	6163      	str	r3, [r4, #20]
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	b15b      	cbz	r3, 8002fb0 <__smakebuf_r+0x74>
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f9e:	f001 fa17 	bl	80043d0 <_isatty_r>
 8002fa2:	b128      	cbz	r0, 8002fb0 <__smakebuf_r+0x74>
 8002fa4:	89a3      	ldrh	r3, [r4, #12]
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	89a0      	ldrh	r0, [r4, #12]
 8002fb2:	4305      	orrs	r5, r0
 8002fb4:	81a5      	strh	r5, [r4, #12]
 8002fb6:	e7cd      	b.n	8002f54 <__smakebuf_r+0x18>
 8002fb8:	08002d11 	.word	0x08002d11

08002fbc <malloc>:
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <malloc+0xc>)
 8002fbe:	4601      	mov	r1, r0
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f000 b86b 	b.w	800309c <_malloc_r>
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c

08002fcc <_free_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d040      	beq.n	8003056 <_free_r+0x8a>
 8002fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd8:	1f0c      	subs	r4, r1, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bfb8      	it	lt
 8002fde:	18e4      	addlt	r4, r4, r3
 8002fe0:	f001 fa34 	bl	800444c <__malloc_lock>
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <_free_r+0x8c>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	b933      	cbnz	r3, 8002ff8 <_free_r+0x2c>
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	6014      	str	r4, [r2, #0]
 8002fee:	4628      	mov	r0, r5
 8002ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff4:	f001 ba30 	b.w	8004458 <__malloc_unlock>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d908      	bls.n	800300e <_free_r+0x42>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	1821      	adds	r1, r4, r0
 8003000:	428b      	cmp	r3, r1
 8003002:	bf01      	itttt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	1809      	addeq	r1, r1, r0
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	e7ed      	b.n	8002fea <_free_r+0x1e>
 800300e:	461a      	mov	r2, r3
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b10b      	cbz	r3, 8003018 <_free_r+0x4c>
 8003014:	42a3      	cmp	r3, r4
 8003016:	d9fa      	bls.n	800300e <_free_r+0x42>
 8003018:	6811      	ldr	r1, [r2, #0]
 800301a:	1850      	adds	r0, r2, r1
 800301c:	42a0      	cmp	r0, r4
 800301e:	d10b      	bne.n	8003038 <_free_r+0x6c>
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	4401      	add	r1, r0
 8003024:	1850      	adds	r0, r2, r1
 8003026:	4283      	cmp	r3, r0
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	d1e0      	bne.n	8002fee <_free_r+0x22>
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4401      	add	r1, r0
 8003032:	6011      	str	r1, [r2, #0]
 8003034:	6053      	str	r3, [r2, #4]
 8003036:	e7da      	b.n	8002fee <_free_r+0x22>
 8003038:	d902      	bls.n	8003040 <_free_r+0x74>
 800303a:	230c      	movs	r3, #12
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	e7d6      	b.n	8002fee <_free_r+0x22>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	bf01      	itttt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	1809      	addeq	r1, r1, r0
 800304e:	6021      	streq	r1, [r4, #0]
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6054      	str	r4, [r2, #4]
 8003054:	e7cb      	b.n	8002fee <_free_r+0x22>
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	2000012c 	.word	0x2000012c

0800305c <sbrk_aligned>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4e0e      	ldr	r6, [pc, #56]	; (8003098 <sbrk_aligned+0x3c>)
 8003060:	460c      	mov	r4, r1
 8003062:	6831      	ldr	r1, [r6, #0]
 8003064:	4605      	mov	r5, r0
 8003066:	b911      	cbnz	r1, 800306e <sbrk_aligned+0x12>
 8003068:	f000 ff30 	bl	8003ecc <_sbrk_r>
 800306c:	6030      	str	r0, [r6, #0]
 800306e:	4621      	mov	r1, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 ff2b 	bl	8003ecc <_sbrk_r>
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	d00a      	beq.n	8003090 <sbrk_aligned+0x34>
 800307a:	1cc4      	adds	r4, r0, #3
 800307c:	f024 0403 	bic.w	r4, r4, #3
 8003080:	42a0      	cmp	r0, r4
 8003082:	d007      	beq.n	8003094 <sbrk_aligned+0x38>
 8003084:	1a21      	subs	r1, r4, r0
 8003086:	4628      	mov	r0, r5
 8003088:	f000 ff20 	bl	8003ecc <_sbrk_r>
 800308c:	3001      	adds	r0, #1
 800308e:	d101      	bne.n	8003094 <sbrk_aligned+0x38>
 8003090:	f04f 34ff 	mov.w	r4, #4294967295
 8003094:	4620      	mov	r0, r4
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	20000130 	.word	0x20000130

0800309c <_malloc_r>:
 800309c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a0:	1ccd      	adds	r5, r1, #3
 80030a2:	f025 0503 	bic.w	r5, r5, #3
 80030a6:	3508      	adds	r5, #8
 80030a8:	2d0c      	cmp	r5, #12
 80030aa:	bf38      	it	cc
 80030ac:	250c      	movcc	r5, #12
 80030ae:	2d00      	cmp	r5, #0
 80030b0:	4607      	mov	r7, r0
 80030b2:	db01      	blt.n	80030b8 <_malloc_r+0x1c>
 80030b4:	42a9      	cmp	r1, r5
 80030b6:	d905      	bls.n	80030c4 <_malloc_r+0x28>
 80030b8:	230c      	movs	r3, #12
 80030ba:	2600      	movs	r6, #0
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4630      	mov	r0, r6
 80030c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c4:	4e2e      	ldr	r6, [pc, #184]	; (8003180 <_malloc_r+0xe4>)
 80030c6:	f001 f9c1 	bl	800444c <__malloc_lock>
 80030ca:	6833      	ldr	r3, [r6, #0]
 80030cc:	461c      	mov	r4, r3
 80030ce:	bb34      	cbnz	r4, 800311e <_malloc_r+0x82>
 80030d0:	4629      	mov	r1, r5
 80030d2:	4638      	mov	r0, r7
 80030d4:	f7ff ffc2 	bl	800305c <sbrk_aligned>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	4604      	mov	r4, r0
 80030dc:	d14d      	bne.n	800317a <_malloc_r+0xde>
 80030de:	6834      	ldr	r4, [r6, #0]
 80030e0:	4626      	mov	r6, r4
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d140      	bne.n	8003168 <_malloc_r+0xcc>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	4631      	mov	r1, r6
 80030ea:	4638      	mov	r0, r7
 80030ec:	eb04 0803 	add.w	r8, r4, r3
 80030f0:	f000 feec 	bl	8003ecc <_sbrk_r>
 80030f4:	4580      	cmp	r8, r0
 80030f6:	d13a      	bne.n	800316e <_malloc_r+0xd2>
 80030f8:	6821      	ldr	r1, [r4, #0]
 80030fa:	3503      	adds	r5, #3
 80030fc:	1a6d      	subs	r5, r5, r1
 80030fe:	f025 0503 	bic.w	r5, r5, #3
 8003102:	3508      	adds	r5, #8
 8003104:	2d0c      	cmp	r5, #12
 8003106:	bf38      	it	cc
 8003108:	250c      	movcc	r5, #12
 800310a:	4638      	mov	r0, r7
 800310c:	4629      	mov	r1, r5
 800310e:	f7ff ffa5 	bl	800305c <sbrk_aligned>
 8003112:	3001      	adds	r0, #1
 8003114:	d02b      	beq.n	800316e <_malloc_r+0xd2>
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	442b      	add	r3, r5
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	e00e      	b.n	800313c <_malloc_r+0xa0>
 800311e:	6822      	ldr	r2, [r4, #0]
 8003120:	1b52      	subs	r2, r2, r5
 8003122:	d41e      	bmi.n	8003162 <_malloc_r+0xc6>
 8003124:	2a0b      	cmp	r2, #11
 8003126:	d916      	bls.n	8003156 <_malloc_r+0xba>
 8003128:	1961      	adds	r1, r4, r5
 800312a:	42a3      	cmp	r3, r4
 800312c:	6025      	str	r5, [r4, #0]
 800312e:	bf18      	it	ne
 8003130:	6059      	strne	r1, [r3, #4]
 8003132:	6863      	ldr	r3, [r4, #4]
 8003134:	bf08      	it	eq
 8003136:	6031      	streq	r1, [r6, #0]
 8003138:	5162      	str	r2, [r4, r5]
 800313a:	604b      	str	r3, [r1, #4]
 800313c:	4638      	mov	r0, r7
 800313e:	f104 060b 	add.w	r6, r4, #11
 8003142:	f001 f989 	bl	8004458 <__malloc_unlock>
 8003146:	f026 0607 	bic.w	r6, r6, #7
 800314a:	1d23      	adds	r3, r4, #4
 800314c:	1af2      	subs	r2, r6, r3
 800314e:	d0b6      	beq.n	80030be <_malloc_r+0x22>
 8003150:	1b9b      	subs	r3, r3, r6
 8003152:	50a3      	str	r3, [r4, r2]
 8003154:	e7b3      	b.n	80030be <_malloc_r+0x22>
 8003156:	6862      	ldr	r2, [r4, #4]
 8003158:	42a3      	cmp	r3, r4
 800315a:	bf0c      	ite	eq
 800315c:	6032      	streq	r2, [r6, #0]
 800315e:	605a      	strne	r2, [r3, #4]
 8003160:	e7ec      	b.n	800313c <_malloc_r+0xa0>
 8003162:	4623      	mov	r3, r4
 8003164:	6864      	ldr	r4, [r4, #4]
 8003166:	e7b2      	b.n	80030ce <_malloc_r+0x32>
 8003168:	4634      	mov	r4, r6
 800316a:	6876      	ldr	r6, [r6, #4]
 800316c:	e7b9      	b.n	80030e2 <_malloc_r+0x46>
 800316e:	230c      	movs	r3, #12
 8003170:	4638      	mov	r0, r7
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	f001 f970 	bl	8004458 <__malloc_unlock>
 8003178:	e7a1      	b.n	80030be <_malloc_r+0x22>
 800317a:	6025      	str	r5, [r4, #0]
 800317c:	e7de      	b.n	800313c <_malloc_r+0xa0>
 800317e:	bf00      	nop
 8003180:	2000012c 	.word	0x2000012c

08003184 <__sfputc_r>:
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	b410      	push	{r4}
 8003188:	3b01      	subs	r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	6093      	str	r3, [r2, #8]
 800318e:	da07      	bge.n	80031a0 <__sfputc_r+0x1c>
 8003190:	6994      	ldr	r4, [r2, #24]
 8003192:	42a3      	cmp	r3, r4
 8003194:	db01      	blt.n	800319a <__sfputc_r+0x16>
 8003196:	290a      	cmp	r1, #10
 8003198:	d102      	bne.n	80031a0 <__sfputc_r+0x1c>
 800319a:	bc10      	pop	{r4}
 800319c:	f7ff bc04 	b.w	80029a8 <__swbuf_r>
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	1c58      	adds	r0, r3, #1
 80031a4:	6010      	str	r0, [r2, #0]
 80031a6:	7019      	strb	r1, [r3, #0]
 80031a8:	4608      	mov	r0, r1
 80031aa:	bc10      	pop	{r4}
 80031ac:	4770      	bx	lr

080031ae <__sfputs_r>:
 80031ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b0:	4606      	mov	r6, r0
 80031b2:	460f      	mov	r7, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	18d5      	adds	r5, r2, r3
 80031b8:	42ac      	cmp	r4, r5
 80031ba:	d101      	bne.n	80031c0 <__sfputs_r+0x12>
 80031bc:	2000      	movs	r0, #0
 80031be:	e007      	b.n	80031d0 <__sfputs_r+0x22>
 80031c0:	463a      	mov	r2, r7
 80031c2:	4630      	mov	r0, r6
 80031c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c8:	f7ff ffdc 	bl	8003184 <__sfputc_r>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d1f3      	bne.n	80031b8 <__sfputs_r+0xa>
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031d4 <_vfiprintf_r>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	460d      	mov	r5, r1
 80031da:	4614      	mov	r4, r2
 80031dc:	4698      	mov	r8, r3
 80031de:	4606      	mov	r6, r0
 80031e0:	b09d      	sub	sp, #116	; 0x74
 80031e2:	b118      	cbz	r0, 80031ec <_vfiprintf_r+0x18>
 80031e4:	6983      	ldr	r3, [r0, #24]
 80031e6:	b90b      	cbnz	r3, 80031ec <_vfiprintf_r+0x18>
 80031e8:	f7ff fdc6 	bl	8002d78 <__sinit>
 80031ec:	4b89      	ldr	r3, [pc, #548]	; (8003414 <_vfiprintf_r+0x240>)
 80031ee:	429d      	cmp	r5, r3
 80031f0:	d11b      	bne.n	800322a <_vfiprintf_r+0x56>
 80031f2:	6875      	ldr	r5, [r6, #4]
 80031f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031f6:	07d9      	lsls	r1, r3, #31
 80031f8:	d405      	bmi.n	8003206 <_vfiprintf_r+0x32>
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	059a      	lsls	r2, r3, #22
 80031fe:	d402      	bmi.n	8003206 <_vfiprintf_r+0x32>
 8003200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003202:	f7ff fe74 	bl	8002eee <__retarget_lock_acquire_recursive>
 8003206:	89ab      	ldrh	r3, [r5, #12]
 8003208:	071b      	lsls	r3, r3, #28
 800320a:	d501      	bpl.n	8003210 <_vfiprintf_r+0x3c>
 800320c:	692b      	ldr	r3, [r5, #16]
 800320e:	b9eb      	cbnz	r3, 800324c <_vfiprintf_r+0x78>
 8003210:	4629      	mov	r1, r5
 8003212:	4630      	mov	r0, r6
 8003214:	f7ff fc1a 	bl	8002a4c <__swsetup_r>
 8003218:	b1c0      	cbz	r0, 800324c <_vfiprintf_r+0x78>
 800321a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800321c:	07dc      	lsls	r4, r3, #31
 800321e:	d50e      	bpl.n	800323e <_vfiprintf_r+0x6a>
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	b01d      	add	sp, #116	; 0x74
 8003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322a:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <_vfiprintf_r+0x244>)
 800322c:	429d      	cmp	r5, r3
 800322e:	d101      	bne.n	8003234 <_vfiprintf_r+0x60>
 8003230:	68b5      	ldr	r5, [r6, #8]
 8003232:	e7df      	b.n	80031f4 <_vfiprintf_r+0x20>
 8003234:	4b79      	ldr	r3, [pc, #484]	; (800341c <_vfiprintf_r+0x248>)
 8003236:	429d      	cmp	r5, r3
 8003238:	bf08      	it	eq
 800323a:	68f5      	ldreq	r5, [r6, #12]
 800323c:	e7da      	b.n	80031f4 <_vfiprintf_r+0x20>
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	0598      	lsls	r0, r3, #22
 8003242:	d4ed      	bmi.n	8003220 <_vfiprintf_r+0x4c>
 8003244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003246:	f7ff fe53 	bl	8002ef0 <__retarget_lock_release_recursive>
 800324a:	e7e9      	b.n	8003220 <_vfiprintf_r+0x4c>
 800324c:	2300      	movs	r3, #0
 800324e:	9309      	str	r3, [sp, #36]	; 0x24
 8003250:	2320      	movs	r3, #32
 8003252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003256:	2330      	movs	r3, #48	; 0x30
 8003258:	f04f 0901 	mov.w	r9, #1
 800325c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003260:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003420 <_vfiprintf_r+0x24c>
 8003264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003268:	4623      	mov	r3, r4
 800326a:	469a      	mov	sl, r3
 800326c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003270:	b10a      	cbz	r2, 8003276 <_vfiprintf_r+0xa2>
 8003272:	2a25      	cmp	r2, #37	; 0x25
 8003274:	d1f9      	bne.n	800326a <_vfiprintf_r+0x96>
 8003276:	ebba 0b04 	subs.w	fp, sl, r4
 800327a:	d00b      	beq.n	8003294 <_vfiprintf_r+0xc0>
 800327c:	465b      	mov	r3, fp
 800327e:	4622      	mov	r2, r4
 8003280:	4629      	mov	r1, r5
 8003282:	4630      	mov	r0, r6
 8003284:	f7ff ff93 	bl	80031ae <__sfputs_r>
 8003288:	3001      	adds	r0, #1
 800328a:	f000 80aa 	beq.w	80033e2 <_vfiprintf_r+0x20e>
 800328e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003290:	445a      	add	r2, fp
 8003292:	9209      	str	r2, [sp, #36]	; 0x24
 8003294:	f89a 3000 	ldrb.w	r3, [sl]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80a2 	beq.w	80033e2 <_vfiprintf_r+0x20e>
 800329e:	2300      	movs	r3, #0
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a8:	f10a 0a01 	add.w	sl, sl, #1
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	9307      	str	r3, [sp, #28]
 80032b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032b4:	931a      	str	r3, [sp, #104]	; 0x68
 80032b6:	4654      	mov	r4, sl
 80032b8:	2205      	movs	r2, #5
 80032ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032be:	4858      	ldr	r0, [pc, #352]	; (8003420 <_vfiprintf_r+0x24c>)
 80032c0:	f001 f8a8 	bl	8004414 <memchr>
 80032c4:	9a04      	ldr	r2, [sp, #16]
 80032c6:	b9d8      	cbnz	r0, 8003300 <_vfiprintf_r+0x12c>
 80032c8:	06d1      	lsls	r1, r2, #27
 80032ca:	bf44      	itt	mi
 80032cc:	2320      	movmi	r3, #32
 80032ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032d2:	0713      	lsls	r3, r2, #28
 80032d4:	bf44      	itt	mi
 80032d6:	232b      	movmi	r3, #43	; 0x2b
 80032d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032dc:	f89a 3000 	ldrb.w	r3, [sl]
 80032e0:	2b2a      	cmp	r3, #42	; 0x2a
 80032e2:	d015      	beq.n	8003310 <_vfiprintf_r+0x13c>
 80032e4:	4654      	mov	r4, sl
 80032e6:	2000      	movs	r0, #0
 80032e8:	f04f 0c0a 	mov.w	ip, #10
 80032ec:	9a07      	ldr	r2, [sp, #28]
 80032ee:	4621      	mov	r1, r4
 80032f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032f4:	3b30      	subs	r3, #48	; 0x30
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	d94e      	bls.n	8003398 <_vfiprintf_r+0x1c4>
 80032fa:	b1b0      	cbz	r0, 800332a <_vfiprintf_r+0x156>
 80032fc:	9207      	str	r2, [sp, #28]
 80032fe:	e014      	b.n	800332a <_vfiprintf_r+0x156>
 8003300:	eba0 0308 	sub.w	r3, r0, r8
 8003304:	fa09 f303 	lsl.w	r3, r9, r3
 8003308:	4313      	orrs	r3, r2
 800330a:	46a2      	mov	sl, r4
 800330c:	9304      	str	r3, [sp, #16]
 800330e:	e7d2      	b.n	80032b6 <_vfiprintf_r+0xe2>
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	1d19      	adds	r1, r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9103      	str	r1, [sp, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	bfbb      	ittet	lt
 800331c:	425b      	neglt	r3, r3
 800331e:	f042 0202 	orrlt.w	r2, r2, #2
 8003322:	9307      	strge	r3, [sp, #28]
 8003324:	9307      	strlt	r3, [sp, #28]
 8003326:	bfb8      	it	lt
 8003328:	9204      	strlt	r2, [sp, #16]
 800332a:	7823      	ldrb	r3, [r4, #0]
 800332c:	2b2e      	cmp	r3, #46	; 0x2e
 800332e:	d10c      	bne.n	800334a <_vfiprintf_r+0x176>
 8003330:	7863      	ldrb	r3, [r4, #1]
 8003332:	2b2a      	cmp	r3, #42	; 0x2a
 8003334:	d135      	bne.n	80033a2 <_vfiprintf_r+0x1ce>
 8003336:	9b03      	ldr	r3, [sp, #12]
 8003338:	3402      	adds	r4, #2
 800333a:	1d1a      	adds	r2, r3, #4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	9203      	str	r2, [sp, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	bfb8      	it	lt
 8003344:	f04f 33ff 	movlt.w	r3, #4294967295
 8003348:	9305      	str	r3, [sp, #20]
 800334a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003424 <_vfiprintf_r+0x250>
 800334e:	2203      	movs	r2, #3
 8003350:	4650      	mov	r0, sl
 8003352:	7821      	ldrb	r1, [r4, #0]
 8003354:	f001 f85e 	bl	8004414 <memchr>
 8003358:	b140      	cbz	r0, 800336c <_vfiprintf_r+0x198>
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	eba0 000a 	sub.w	r0, r0, sl
 8003360:	fa03 f000 	lsl.w	r0, r3, r0
 8003364:	9b04      	ldr	r3, [sp, #16]
 8003366:	3401      	adds	r4, #1
 8003368:	4303      	orrs	r3, r0
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003370:	2206      	movs	r2, #6
 8003372:	482d      	ldr	r0, [pc, #180]	; (8003428 <_vfiprintf_r+0x254>)
 8003374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003378:	f001 f84c 	bl	8004414 <memchr>
 800337c:	2800      	cmp	r0, #0
 800337e:	d03f      	beq.n	8003400 <_vfiprintf_r+0x22c>
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <_vfiprintf_r+0x258>)
 8003382:	bb1b      	cbnz	r3, 80033cc <_vfiprintf_r+0x1f8>
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	3307      	adds	r3, #7
 8003388:	f023 0307 	bic.w	r3, r3, #7
 800338c:	3308      	adds	r3, #8
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003392:	443b      	add	r3, r7
 8003394:	9309      	str	r3, [sp, #36]	; 0x24
 8003396:	e767      	b.n	8003268 <_vfiprintf_r+0x94>
 8003398:	460c      	mov	r4, r1
 800339a:	2001      	movs	r0, #1
 800339c:	fb0c 3202 	mla	r2, ip, r2, r3
 80033a0:	e7a5      	b.n	80032ee <_vfiprintf_r+0x11a>
 80033a2:	2300      	movs	r3, #0
 80033a4:	f04f 0c0a 	mov.w	ip, #10
 80033a8:	4619      	mov	r1, r3
 80033aa:	3401      	adds	r4, #1
 80033ac:	9305      	str	r3, [sp, #20]
 80033ae:	4620      	mov	r0, r4
 80033b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033b4:	3a30      	subs	r2, #48	; 0x30
 80033b6:	2a09      	cmp	r2, #9
 80033b8:	d903      	bls.n	80033c2 <_vfiprintf_r+0x1ee>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0c5      	beq.n	800334a <_vfiprintf_r+0x176>
 80033be:	9105      	str	r1, [sp, #20]
 80033c0:	e7c3      	b.n	800334a <_vfiprintf_r+0x176>
 80033c2:	4604      	mov	r4, r0
 80033c4:	2301      	movs	r3, #1
 80033c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ca:	e7f0      	b.n	80033ae <_vfiprintf_r+0x1da>
 80033cc:	ab03      	add	r3, sp, #12
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4630      	mov	r0, r6
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <_vfiprintf_r+0x25c>)
 80033d6:	a904      	add	r1, sp, #16
 80033d8:	f3af 8000 	nop.w
 80033dc:	4607      	mov	r7, r0
 80033de:	1c78      	adds	r0, r7, #1
 80033e0:	d1d6      	bne.n	8003390 <_vfiprintf_r+0x1bc>
 80033e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033e4:	07d9      	lsls	r1, r3, #31
 80033e6:	d405      	bmi.n	80033f4 <_vfiprintf_r+0x220>
 80033e8:	89ab      	ldrh	r3, [r5, #12]
 80033ea:	059a      	lsls	r2, r3, #22
 80033ec:	d402      	bmi.n	80033f4 <_vfiprintf_r+0x220>
 80033ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033f0:	f7ff fd7e 	bl	8002ef0 <__retarget_lock_release_recursive>
 80033f4:	89ab      	ldrh	r3, [r5, #12]
 80033f6:	065b      	lsls	r3, r3, #25
 80033f8:	f53f af12 	bmi.w	8003220 <_vfiprintf_r+0x4c>
 80033fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033fe:	e711      	b.n	8003224 <_vfiprintf_r+0x50>
 8003400:	ab03      	add	r3, sp, #12
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	462a      	mov	r2, r5
 8003406:	4630      	mov	r0, r6
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <_vfiprintf_r+0x25c>)
 800340a:	a904      	add	r1, sp, #16
 800340c:	f000 f882 	bl	8003514 <_printf_i>
 8003410:	e7e4      	b.n	80033dc <_vfiprintf_r+0x208>
 8003412:	bf00      	nop
 8003414:	080045b0 	.word	0x080045b0
 8003418:	080045d0 	.word	0x080045d0
 800341c:	08004590 	.word	0x08004590
 8003420:	080045f0 	.word	0x080045f0
 8003424:	080045f6 	.word	0x080045f6
 8003428:	080045fa 	.word	0x080045fa
 800342c:	00000000 	.word	0x00000000
 8003430:	080031af 	.word	0x080031af

08003434 <_printf_common>:
 8003434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003438:	4616      	mov	r6, r2
 800343a:	4699      	mov	r9, r3
 800343c:	688a      	ldr	r2, [r1, #8]
 800343e:	690b      	ldr	r3, [r1, #16]
 8003440:	4607      	mov	r7, r0
 8003442:	4293      	cmp	r3, r2
 8003444:	bfb8      	it	lt
 8003446:	4613      	movlt	r3, r2
 8003448:	6033      	str	r3, [r6, #0]
 800344a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344e:	460c      	mov	r4, r1
 8003450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003454:	b10a      	cbz	r2, 800345a <_printf_common+0x26>
 8003456:	3301      	adds	r3, #1
 8003458:	6033      	str	r3, [r6, #0]
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0699      	lsls	r1, r3, #26
 800345e:	bf42      	ittt	mi
 8003460:	6833      	ldrmi	r3, [r6, #0]
 8003462:	3302      	addmi	r3, #2
 8003464:	6033      	strmi	r3, [r6, #0]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	f015 0506 	ands.w	r5, r5, #6
 800346c:	d106      	bne.n	800347c <_printf_common+0x48>
 800346e:	f104 0a19 	add.w	sl, r4, #25
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	6832      	ldr	r2, [r6, #0]
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	42ab      	cmp	r3, r5
 800347a:	dc28      	bgt.n	80034ce <_printf_common+0x9a>
 800347c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003480:	1e13      	subs	r3, r2, #0
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	bf18      	it	ne
 8003486:	2301      	movne	r3, #1
 8003488:	0692      	lsls	r2, r2, #26
 800348a:	d42d      	bmi.n	80034e8 <_printf_common+0xb4>
 800348c:	4649      	mov	r1, r9
 800348e:	4638      	mov	r0, r7
 8003490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003494:	47c0      	blx	r8
 8003496:	3001      	adds	r0, #1
 8003498:	d020      	beq.n	80034dc <_printf_common+0xa8>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	68e5      	ldr	r5, [r4, #12]
 800349e:	f003 0306 	and.w	r3, r3, #6
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf18      	it	ne
 80034a6:	2500      	movne	r5, #0
 80034a8:	6832      	ldr	r2, [r6, #0]
 80034aa:	f04f 0600 	mov.w	r6, #0
 80034ae:	68a3      	ldr	r3, [r4, #8]
 80034b0:	bf08      	it	eq
 80034b2:	1aad      	subeq	r5, r5, r2
 80034b4:	6922      	ldr	r2, [r4, #16]
 80034b6:	bf08      	it	eq
 80034b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034bc:	4293      	cmp	r3, r2
 80034be:	bfc4      	itt	gt
 80034c0:	1a9b      	subgt	r3, r3, r2
 80034c2:	18ed      	addgt	r5, r5, r3
 80034c4:	341a      	adds	r4, #26
 80034c6:	42b5      	cmp	r5, r6
 80034c8:	d11a      	bne.n	8003500 <_printf_common+0xcc>
 80034ca:	2000      	movs	r0, #0
 80034cc:	e008      	b.n	80034e0 <_printf_common+0xac>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4652      	mov	r2, sl
 80034d2:	4649      	mov	r1, r9
 80034d4:	4638      	mov	r0, r7
 80034d6:	47c0      	blx	r8
 80034d8:	3001      	adds	r0, #1
 80034da:	d103      	bne.n	80034e4 <_printf_common+0xb0>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e4:	3501      	adds	r5, #1
 80034e6:	e7c4      	b.n	8003472 <_printf_common+0x3e>
 80034e8:	2030      	movs	r0, #48	; 0x30
 80034ea:	18e1      	adds	r1, r4, r3
 80034ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034f6:	4422      	add	r2, r4
 80034f8:	3302      	adds	r3, #2
 80034fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034fe:	e7c5      	b.n	800348c <_printf_common+0x58>
 8003500:	2301      	movs	r3, #1
 8003502:	4622      	mov	r2, r4
 8003504:	4649      	mov	r1, r9
 8003506:	4638      	mov	r0, r7
 8003508:	47c0      	blx	r8
 800350a:	3001      	adds	r0, #1
 800350c:	d0e6      	beq.n	80034dc <_printf_common+0xa8>
 800350e:	3601      	adds	r6, #1
 8003510:	e7d9      	b.n	80034c6 <_printf_common+0x92>
	...

08003514 <_printf_i>:
 8003514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	7e0f      	ldrb	r7, [r1, #24]
 800351a:	4691      	mov	r9, r2
 800351c:	2f78      	cmp	r7, #120	; 0x78
 800351e:	4680      	mov	r8, r0
 8003520:	460c      	mov	r4, r1
 8003522:	469a      	mov	sl, r3
 8003524:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800352a:	d807      	bhi.n	800353c <_printf_i+0x28>
 800352c:	2f62      	cmp	r7, #98	; 0x62
 800352e:	d80a      	bhi.n	8003546 <_printf_i+0x32>
 8003530:	2f00      	cmp	r7, #0
 8003532:	f000 80d9 	beq.w	80036e8 <_printf_i+0x1d4>
 8003536:	2f58      	cmp	r7, #88	; 0x58
 8003538:	f000 80a4 	beq.w	8003684 <_printf_i+0x170>
 800353c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003544:	e03a      	b.n	80035bc <_printf_i+0xa8>
 8003546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800354a:	2b15      	cmp	r3, #21
 800354c:	d8f6      	bhi.n	800353c <_printf_i+0x28>
 800354e:	a101      	add	r1, pc, #4	; (adr r1, 8003554 <_printf_i+0x40>)
 8003550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035c1 	.word	0x080035c1
 800355c:	0800353d 	.word	0x0800353d
 8003560:	0800353d 	.word	0x0800353d
 8003564:	0800353d 	.word	0x0800353d
 8003568:	0800353d 	.word	0x0800353d
 800356c:	080035c1 	.word	0x080035c1
 8003570:	0800353d 	.word	0x0800353d
 8003574:	0800353d 	.word	0x0800353d
 8003578:	0800353d 	.word	0x0800353d
 800357c:	0800353d 	.word	0x0800353d
 8003580:	080036cf 	.word	0x080036cf
 8003584:	080035f1 	.word	0x080035f1
 8003588:	080036b1 	.word	0x080036b1
 800358c:	0800353d 	.word	0x0800353d
 8003590:	0800353d 	.word	0x0800353d
 8003594:	080036f1 	.word	0x080036f1
 8003598:	0800353d 	.word	0x0800353d
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	0800353d 	.word	0x0800353d
 80035a4:	0800353d 	.word	0x0800353d
 80035a8:	080036b9 	.word	0x080036b9
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	602a      	str	r2, [r5, #0]
 80035b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035bc:	2301      	movs	r3, #1
 80035be:	e0a4      	b.n	800370a <_printf_i+0x1f6>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	6829      	ldr	r1, [r5, #0]
 80035c4:	0606      	lsls	r6, r0, #24
 80035c6:	f101 0304 	add.w	r3, r1, #4
 80035ca:	d50a      	bpl.n	80035e2 <_printf_i+0xce>
 80035cc:	680e      	ldr	r6, [r1, #0]
 80035ce:	602b      	str	r3, [r5, #0]
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	da03      	bge.n	80035dc <_printf_i+0xc8>
 80035d4:	232d      	movs	r3, #45	; 0x2d
 80035d6:	4276      	negs	r6, r6
 80035d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035dc:	230a      	movs	r3, #10
 80035de:	485e      	ldr	r0, [pc, #376]	; (8003758 <_printf_i+0x244>)
 80035e0:	e019      	b.n	8003616 <_printf_i+0x102>
 80035e2:	680e      	ldr	r6, [r1, #0]
 80035e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035e8:	602b      	str	r3, [r5, #0]
 80035ea:	bf18      	it	ne
 80035ec:	b236      	sxthne	r6, r6
 80035ee:	e7ef      	b.n	80035d0 <_printf_i+0xbc>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	6029      	str	r1, [r5, #0]
 80035f8:	0601      	lsls	r1, r0, #24
 80035fa:	d501      	bpl.n	8003600 <_printf_i+0xec>
 80035fc:	681e      	ldr	r6, [r3, #0]
 80035fe:	e002      	b.n	8003606 <_printf_i+0xf2>
 8003600:	0646      	lsls	r6, r0, #25
 8003602:	d5fb      	bpl.n	80035fc <_printf_i+0xe8>
 8003604:	881e      	ldrh	r6, [r3, #0]
 8003606:	2f6f      	cmp	r7, #111	; 0x6f
 8003608:	bf0c      	ite	eq
 800360a:	2308      	moveq	r3, #8
 800360c:	230a      	movne	r3, #10
 800360e:	4852      	ldr	r0, [pc, #328]	; (8003758 <_printf_i+0x244>)
 8003610:	2100      	movs	r1, #0
 8003612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003616:	6865      	ldr	r5, [r4, #4]
 8003618:	2d00      	cmp	r5, #0
 800361a:	bfa8      	it	ge
 800361c:	6821      	ldrge	r1, [r4, #0]
 800361e:	60a5      	str	r5, [r4, #8]
 8003620:	bfa4      	itt	ge
 8003622:	f021 0104 	bicge.w	r1, r1, #4
 8003626:	6021      	strge	r1, [r4, #0]
 8003628:	b90e      	cbnz	r6, 800362e <_printf_i+0x11a>
 800362a:	2d00      	cmp	r5, #0
 800362c:	d04d      	beq.n	80036ca <_printf_i+0x1b6>
 800362e:	4615      	mov	r5, r2
 8003630:	fbb6 f1f3 	udiv	r1, r6, r3
 8003634:	fb03 6711 	mls	r7, r3, r1, r6
 8003638:	5dc7      	ldrb	r7, [r0, r7]
 800363a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800363e:	4637      	mov	r7, r6
 8003640:	42bb      	cmp	r3, r7
 8003642:	460e      	mov	r6, r1
 8003644:	d9f4      	bls.n	8003630 <_printf_i+0x11c>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d10b      	bne.n	8003662 <_printf_i+0x14e>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	07de      	lsls	r6, r3, #31
 800364e:	d508      	bpl.n	8003662 <_printf_i+0x14e>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	6861      	ldr	r1, [r4, #4]
 8003654:	4299      	cmp	r1, r3
 8003656:	bfde      	ittt	le
 8003658:	2330      	movle	r3, #48	; 0x30
 800365a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800365e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003662:	1b52      	subs	r2, r2, r5
 8003664:	6122      	str	r2, [r4, #16]
 8003666:	464b      	mov	r3, r9
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f8cd a000 	str.w	sl, [sp]
 8003670:	aa03      	add	r2, sp, #12
 8003672:	f7ff fedf 	bl	8003434 <_printf_common>
 8003676:	3001      	adds	r0, #1
 8003678:	d14c      	bne.n	8003714 <_printf_i+0x200>
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	b004      	add	sp, #16
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	4834      	ldr	r0, [pc, #208]	; (8003758 <_printf_i+0x244>)
 8003686:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800368a:	6829      	ldr	r1, [r5, #0]
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003692:	6029      	str	r1, [r5, #0]
 8003694:	061d      	lsls	r5, r3, #24
 8003696:	d514      	bpl.n	80036c2 <_printf_i+0x1ae>
 8003698:	07df      	lsls	r7, r3, #31
 800369a:	bf44      	itt	mi
 800369c:	f043 0320 	orrmi.w	r3, r3, #32
 80036a0:	6023      	strmi	r3, [r4, #0]
 80036a2:	b91e      	cbnz	r6, 80036ac <_printf_i+0x198>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	f023 0320 	bic.w	r3, r3, #32
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	2310      	movs	r3, #16
 80036ae:	e7af      	b.n	8003610 <_printf_i+0xfc>
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f043 0320 	orr.w	r3, r3, #32
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	2378      	movs	r3, #120	; 0x78
 80036ba:	4828      	ldr	r0, [pc, #160]	; (800375c <_printf_i+0x248>)
 80036bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036c0:	e7e3      	b.n	800368a <_printf_i+0x176>
 80036c2:	0659      	lsls	r1, r3, #25
 80036c4:	bf48      	it	mi
 80036c6:	b2b6      	uxthmi	r6, r6
 80036c8:	e7e6      	b.n	8003698 <_printf_i+0x184>
 80036ca:	4615      	mov	r5, r2
 80036cc:	e7bb      	b.n	8003646 <_printf_i+0x132>
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	6826      	ldr	r6, [r4, #0]
 80036d2:	1d18      	adds	r0, r3, #4
 80036d4:	6961      	ldr	r1, [r4, #20]
 80036d6:	6028      	str	r0, [r5, #0]
 80036d8:	0635      	lsls	r5, r6, #24
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	d501      	bpl.n	80036e2 <_printf_i+0x1ce>
 80036de:	6019      	str	r1, [r3, #0]
 80036e0:	e002      	b.n	80036e8 <_printf_i+0x1d4>
 80036e2:	0670      	lsls	r0, r6, #25
 80036e4:	d5fb      	bpl.n	80036de <_printf_i+0x1ca>
 80036e6:	8019      	strh	r1, [r3, #0]
 80036e8:	2300      	movs	r3, #0
 80036ea:	4615      	mov	r5, r2
 80036ec:	6123      	str	r3, [r4, #16]
 80036ee:	e7ba      	b.n	8003666 <_printf_i+0x152>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	2100      	movs	r1, #0
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	602a      	str	r2, [r5, #0]
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	6862      	ldr	r2, [r4, #4]
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 fe89 	bl	8004414 <memchr>
 8003702:	b108      	cbz	r0, 8003708 <_printf_i+0x1f4>
 8003704:	1b40      	subs	r0, r0, r5
 8003706:	6060      	str	r0, [r4, #4]
 8003708:	6863      	ldr	r3, [r4, #4]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2300      	movs	r3, #0
 800370e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003712:	e7a8      	b.n	8003666 <_printf_i+0x152>
 8003714:	462a      	mov	r2, r5
 8003716:	4649      	mov	r1, r9
 8003718:	4640      	mov	r0, r8
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	47d0      	blx	sl
 800371e:	3001      	adds	r0, #1
 8003720:	d0ab      	beq.n	800367a <_printf_i+0x166>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	079b      	lsls	r3, r3, #30
 8003726:	d413      	bmi.n	8003750 <_printf_i+0x23c>
 8003728:	68e0      	ldr	r0, [r4, #12]
 800372a:	9b03      	ldr	r3, [sp, #12]
 800372c:	4298      	cmp	r0, r3
 800372e:	bfb8      	it	lt
 8003730:	4618      	movlt	r0, r3
 8003732:	e7a4      	b.n	800367e <_printf_i+0x16a>
 8003734:	2301      	movs	r3, #1
 8003736:	4632      	mov	r2, r6
 8003738:	4649      	mov	r1, r9
 800373a:	4640      	mov	r0, r8
 800373c:	47d0      	blx	sl
 800373e:	3001      	adds	r0, #1
 8003740:	d09b      	beq.n	800367a <_printf_i+0x166>
 8003742:	3501      	adds	r5, #1
 8003744:	68e3      	ldr	r3, [r4, #12]
 8003746:	9903      	ldr	r1, [sp, #12]
 8003748:	1a5b      	subs	r3, r3, r1
 800374a:	42ab      	cmp	r3, r5
 800374c:	dcf2      	bgt.n	8003734 <_printf_i+0x220>
 800374e:	e7eb      	b.n	8003728 <_printf_i+0x214>
 8003750:	2500      	movs	r5, #0
 8003752:	f104 0619 	add.w	r6, r4, #25
 8003756:	e7f5      	b.n	8003744 <_printf_i+0x230>
 8003758:	08004601 	.word	0x08004601
 800375c:	08004612 	.word	0x08004612

08003760 <__svfiscanf_r>:
 8003760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003764:	461d      	mov	r5, r3
 8003766:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003768:	4606      	mov	r6, r0
 800376a:	07df      	lsls	r7, r3, #31
 800376c:	460c      	mov	r4, r1
 800376e:	4692      	mov	sl, r2
 8003770:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003774:	d405      	bmi.n	8003782 <__svfiscanf_r+0x22>
 8003776:	898b      	ldrh	r3, [r1, #12]
 8003778:	0598      	lsls	r0, r3, #22
 800377a:	d402      	bmi.n	8003782 <__svfiscanf_r+0x22>
 800377c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800377e:	f7ff fbb6 	bl	8002eee <__retarget_lock_acquire_recursive>
 8003782:	2300      	movs	r3, #0
 8003784:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003788:	4ba6      	ldr	r3, [pc, #664]	; (8003a24 <__svfiscanf_r+0x2c4>)
 800378a:	f10d 0804 	add.w	r8, sp, #4
 800378e:	93a0      	str	r3, [sp, #640]	; 0x280
 8003790:	4ba5      	ldr	r3, [pc, #660]	; (8003a28 <__svfiscanf_r+0x2c8>)
 8003792:	4fa6      	ldr	r7, [pc, #664]	; (8003a2c <__svfiscanf_r+0x2cc>)
 8003794:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8003a30 <__svfiscanf_r+0x2d0>
 8003798:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800379c:	93a1      	str	r3, [sp, #644]	; 0x284
 800379e:	9500      	str	r5, [sp, #0]
 80037a0:	f89a 3000 	ldrb.w	r3, [sl]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8173 	beq.w	8003a90 <__svfiscanf_r+0x330>
 80037aa:	5dd9      	ldrb	r1, [r3, r7]
 80037ac:	f10a 0501 	add.w	r5, sl, #1
 80037b0:	f011 0108 	ands.w	r1, r1, #8
 80037b4:	d019      	beq.n	80037ea <__svfiscanf_r+0x8a>
 80037b6:	6863      	ldr	r3, [r4, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dd0f      	ble.n	80037dc <__svfiscanf_r+0x7c>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	5cba      	ldrb	r2, [r7, r2]
 80037c2:	0711      	lsls	r1, r2, #28
 80037c4:	d401      	bmi.n	80037ca <__svfiscanf_r+0x6a>
 80037c6:	46aa      	mov	sl, r5
 80037c8:	e7ea      	b.n	80037a0 <__svfiscanf_r+0x40>
 80037ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80037cc:	3301      	adds	r3, #1
 80037ce:	3201      	adds	r2, #1
 80037d0:	9245      	str	r2, [sp, #276]	; 0x114
 80037d2:	6862      	ldr	r2, [r4, #4]
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	3a01      	subs	r2, #1
 80037d8:	6062      	str	r2, [r4, #4]
 80037da:	e7ec      	b.n	80037b6 <__svfiscanf_r+0x56>
 80037dc:	4621      	mov	r1, r4
 80037de:	4630      	mov	r0, r6
 80037e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80037e2:	4798      	blx	r3
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d0e9      	beq.n	80037bc <__svfiscanf_r+0x5c>
 80037e8:	e7ed      	b.n	80037c6 <__svfiscanf_r+0x66>
 80037ea:	2b25      	cmp	r3, #37	; 0x25
 80037ec:	d012      	beq.n	8003814 <__svfiscanf_r+0xb4>
 80037ee:	469a      	mov	sl, r3
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f340 8095 	ble.w	8003922 <__svfiscanf_r+0x1c2>
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	7813      	ldrb	r3, [r2, #0]
 80037fc:	4553      	cmp	r3, sl
 80037fe:	f040 8147 	bne.w	8003a90 <__svfiscanf_r+0x330>
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	3201      	adds	r2, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	6063      	str	r3, [r4, #4]
 800380a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800380c:	6022      	str	r2, [r4, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	9345      	str	r3, [sp, #276]	; 0x114
 8003812:	e7d8      	b.n	80037c6 <__svfiscanf_r+0x66>
 8003814:	9141      	str	r1, [sp, #260]	; 0x104
 8003816:	9143      	str	r1, [sp, #268]	; 0x10c
 8003818:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800381c:	220a      	movs	r2, #10
 800381e:	2b2a      	cmp	r3, #42	; 0x2a
 8003820:	bf02      	ittt	eq
 8003822:	2310      	moveq	r3, #16
 8003824:	f10a 0502 	addeq.w	r5, sl, #2
 8003828:	9341      	streq	r3, [sp, #260]	; 0x104
 800382a:	46aa      	mov	sl, r5
 800382c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003830:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003834:	2b09      	cmp	r3, #9
 8003836:	d91e      	bls.n	8003876 <__svfiscanf_r+0x116>
 8003838:	2203      	movs	r2, #3
 800383a:	487d      	ldr	r0, [pc, #500]	; (8003a30 <__svfiscanf_r+0x2d0>)
 800383c:	f000 fdea 	bl	8004414 <memchr>
 8003840:	b140      	cbz	r0, 8003854 <__svfiscanf_r+0xf4>
 8003842:	2301      	movs	r3, #1
 8003844:	4655      	mov	r5, sl
 8003846:	eba0 0009 	sub.w	r0, r0, r9
 800384a:	fa03 f000 	lsl.w	r0, r3, r0
 800384e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003850:	4318      	orrs	r0, r3
 8003852:	9041      	str	r0, [sp, #260]	; 0x104
 8003854:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003858:	2b78      	cmp	r3, #120	; 0x78
 800385a:	d807      	bhi.n	800386c <__svfiscanf_r+0x10c>
 800385c:	2b57      	cmp	r3, #87	; 0x57
 800385e:	d811      	bhi.n	8003884 <__svfiscanf_r+0x124>
 8003860:	2b25      	cmp	r3, #37	; 0x25
 8003862:	d0c4      	beq.n	80037ee <__svfiscanf_r+0x8e>
 8003864:	d858      	bhi.n	8003918 <__svfiscanf_r+0x1b8>
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80c8 	beq.w	80039fc <__svfiscanf_r+0x29c>
 800386c:	2303      	movs	r3, #3
 800386e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003870:	230a      	movs	r3, #10
 8003872:	9342      	str	r3, [sp, #264]	; 0x108
 8003874:	e07c      	b.n	8003970 <__svfiscanf_r+0x210>
 8003876:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003878:	4655      	mov	r5, sl
 800387a:	fb02 1103 	mla	r1, r2, r3, r1
 800387e:	3930      	subs	r1, #48	; 0x30
 8003880:	9143      	str	r1, [sp, #268]	; 0x10c
 8003882:	e7d2      	b.n	800382a <__svfiscanf_r+0xca>
 8003884:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003888:	2a20      	cmp	r2, #32
 800388a:	d8ef      	bhi.n	800386c <__svfiscanf_r+0x10c>
 800388c:	a101      	add	r1, pc, #4	; (adr r1, 8003894 <__svfiscanf_r+0x134>)
 800388e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003892:	bf00      	nop
 8003894:	0800395b 	.word	0x0800395b
 8003898:	0800386d 	.word	0x0800386d
 800389c:	0800386d 	.word	0x0800386d
 80038a0:	080039b9 	.word	0x080039b9
 80038a4:	0800386d 	.word	0x0800386d
 80038a8:	0800386d 	.word	0x0800386d
 80038ac:	0800386d 	.word	0x0800386d
 80038b0:	0800386d 	.word	0x0800386d
 80038b4:	0800386d 	.word	0x0800386d
 80038b8:	0800386d 	.word	0x0800386d
 80038bc:	0800386d 	.word	0x0800386d
 80038c0:	080039cf 	.word	0x080039cf
 80038c4:	080039a5 	.word	0x080039a5
 80038c8:	0800391f 	.word	0x0800391f
 80038cc:	0800391f 	.word	0x0800391f
 80038d0:	0800391f 	.word	0x0800391f
 80038d4:	0800386d 	.word	0x0800386d
 80038d8:	080039a9 	.word	0x080039a9
 80038dc:	0800386d 	.word	0x0800386d
 80038e0:	0800386d 	.word	0x0800386d
 80038e4:	0800386d 	.word	0x0800386d
 80038e8:	0800386d 	.word	0x0800386d
 80038ec:	080039df 	.word	0x080039df
 80038f0:	080039b1 	.word	0x080039b1
 80038f4:	08003953 	.word	0x08003953
 80038f8:	0800386d 	.word	0x0800386d
 80038fc:	0800386d 	.word	0x0800386d
 8003900:	080039db 	.word	0x080039db
 8003904:	0800386d 	.word	0x0800386d
 8003908:	080039a5 	.word	0x080039a5
 800390c:	0800386d 	.word	0x0800386d
 8003910:	0800386d 	.word	0x0800386d
 8003914:	0800395b 	.word	0x0800395b
 8003918:	3b45      	subs	r3, #69	; 0x45
 800391a:	2b02      	cmp	r3, #2
 800391c:	d8a6      	bhi.n	800386c <__svfiscanf_r+0x10c>
 800391e:	2305      	movs	r3, #5
 8003920:	e025      	b.n	800396e <__svfiscanf_r+0x20e>
 8003922:	4621      	mov	r1, r4
 8003924:	4630      	mov	r0, r6
 8003926:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003928:	4798      	blx	r3
 800392a:	2800      	cmp	r0, #0
 800392c:	f43f af64 	beq.w	80037f8 <__svfiscanf_r+0x98>
 8003930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003932:	07da      	lsls	r2, r3, #31
 8003934:	f140 80a4 	bpl.w	8003a80 <__svfiscanf_r+0x320>
 8003938:	9844      	ldr	r0, [sp, #272]	; 0x110
 800393a:	2800      	cmp	r0, #0
 800393c:	d067      	beq.n	8003a0e <__svfiscanf_r+0x2ae>
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003944:	bf18      	it	ne
 8003946:	f04f 30ff 	movne.w	r0, #4294967295
 800394a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003952:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	9241      	str	r2, [sp, #260]	; 0x104
 800395a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	9241      	str	r2, [sp, #260]	; 0x104
 8003962:	2210      	movs	r2, #16
 8003964:	2b6f      	cmp	r3, #111	; 0x6f
 8003966:	bf34      	ite	cc
 8003968:	2303      	movcc	r3, #3
 800396a:	2304      	movcs	r3, #4
 800396c:	9242      	str	r2, [sp, #264]	; 0x108
 800396e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	dd4e      	ble.n	8003a14 <__svfiscanf_r+0x2b4>
 8003976:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003978:	065b      	lsls	r3, r3, #25
 800397a:	d404      	bmi.n	8003986 <__svfiscanf_r+0x226>
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	5cba      	ldrb	r2, [r7, r2]
 8003982:	0710      	lsls	r0, r2, #28
 8003984:	d456      	bmi.n	8003a34 <__svfiscanf_r+0x2d4>
 8003986:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003988:	2b02      	cmp	r3, #2
 800398a:	dc65      	bgt.n	8003a58 <__svfiscanf_r+0x2f8>
 800398c:	466b      	mov	r3, sp
 800398e:	4622      	mov	r2, r4
 8003990:	4630      	mov	r0, r6
 8003992:	a941      	add	r1, sp, #260	; 0x104
 8003994:	f000 f8b2 	bl	8003afc <_scanf_chars>
 8003998:	2801      	cmp	r0, #1
 800399a:	d079      	beq.n	8003a90 <__svfiscanf_r+0x330>
 800399c:	2802      	cmp	r0, #2
 800399e:	f47f af12 	bne.w	80037c6 <__svfiscanf_r+0x66>
 80039a2:	e7c5      	b.n	8003930 <__svfiscanf_r+0x1d0>
 80039a4:	220a      	movs	r2, #10
 80039a6:	e7dd      	b.n	8003964 <__svfiscanf_r+0x204>
 80039a8:	2300      	movs	r3, #0
 80039aa:	9342      	str	r3, [sp, #264]	; 0x108
 80039ac:	2303      	movs	r3, #3
 80039ae:	e7de      	b.n	800396e <__svfiscanf_r+0x20e>
 80039b0:	2308      	movs	r3, #8
 80039b2:	9342      	str	r3, [sp, #264]	; 0x108
 80039b4:	2304      	movs	r3, #4
 80039b6:	e7da      	b.n	800396e <__svfiscanf_r+0x20e>
 80039b8:	4629      	mov	r1, r5
 80039ba:	4640      	mov	r0, r8
 80039bc:	f000 fa96 	bl	8003eec <__sccl>
 80039c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039c2:	4605      	mov	r5, r0
 80039c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c8:	9341      	str	r3, [sp, #260]	; 0x104
 80039ca:	2301      	movs	r3, #1
 80039cc:	e7cf      	b.n	800396e <__svfiscanf_r+0x20e>
 80039ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d4:	9341      	str	r3, [sp, #260]	; 0x104
 80039d6:	2300      	movs	r3, #0
 80039d8:	e7c9      	b.n	800396e <__svfiscanf_r+0x20e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e7c7      	b.n	800396e <__svfiscanf_r+0x20e>
 80039de:	9841      	ldr	r0, [sp, #260]	; 0x104
 80039e0:	06c3      	lsls	r3, r0, #27
 80039e2:	f53f aef0 	bmi.w	80037c6 <__svfiscanf_r+0x66>
 80039e6:	9b00      	ldr	r3, [sp, #0]
 80039e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80039ea:	1d19      	adds	r1, r3, #4
 80039ec:	9100      	str	r1, [sp, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f010 0f01 	tst.w	r0, #1
 80039f4:	bf14      	ite	ne
 80039f6:	801a      	strhne	r2, [r3, #0]
 80039f8:	601a      	streq	r2, [r3, #0]
 80039fa:	e6e4      	b.n	80037c6 <__svfiscanf_r+0x66>
 80039fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039fe:	07d8      	lsls	r0, r3, #31
 8003a00:	d405      	bmi.n	8003a0e <__svfiscanf_r+0x2ae>
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	0599      	lsls	r1, r3, #22
 8003a06:	d402      	bmi.n	8003a0e <__svfiscanf_r+0x2ae>
 8003a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a0a:	f7ff fa71 	bl	8002ef0 <__retarget_lock_release_recursive>
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a12:	e79a      	b.n	800394a <__svfiscanf_r+0x1ea>
 8003a14:	4621      	mov	r1, r4
 8003a16:	4630      	mov	r0, r6
 8003a18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a1a:	4798      	blx	r3
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d0aa      	beq.n	8003976 <__svfiscanf_r+0x216>
 8003a20:	e786      	b.n	8003930 <__svfiscanf_r+0x1d0>
 8003a22:	bf00      	nop
 8003a24:	08004239 	.word	0x08004239
 8003a28:	08003db5 	.word	0x08003db5
 8003a2c:	0800463f 	.word	0x0800463f
 8003a30:	080045f6 	.word	0x080045f6
 8003a34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a36:	3201      	adds	r2, #1
 8003a38:	9245      	str	r2, [sp, #276]	; 0x114
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	6062      	str	r2, [r4, #4]
 8003a42:	dd02      	ble.n	8003a4a <__svfiscanf_r+0x2ea>
 8003a44:	3301      	adds	r3, #1
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	e798      	b.n	800397c <__svfiscanf_r+0x21c>
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a50:	4798      	blx	r3
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d092      	beq.n	800397c <__svfiscanf_r+0x21c>
 8003a56:	e76b      	b.n	8003930 <__svfiscanf_r+0x1d0>
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	dc06      	bgt.n	8003a6a <__svfiscanf_r+0x30a>
 8003a5c:	466b      	mov	r3, sp
 8003a5e:	4622      	mov	r2, r4
 8003a60:	4630      	mov	r0, r6
 8003a62:	a941      	add	r1, sp, #260	; 0x104
 8003a64:	f000 f8a4 	bl	8003bb0 <_scanf_i>
 8003a68:	e796      	b.n	8003998 <__svfiscanf_r+0x238>
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <__svfiscanf_r+0x348>)
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f43f aeaa 	beq.w	80037c6 <__svfiscanf_r+0x66>
 8003a72:	466b      	mov	r3, sp
 8003a74:	4622      	mov	r2, r4
 8003a76:	4630      	mov	r0, r6
 8003a78:	a941      	add	r1, sp, #260	; 0x104
 8003a7a:	f3af 8000 	nop.w
 8003a7e:	e78b      	b.n	8003998 <__svfiscanf_r+0x238>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	0599      	lsls	r1, r3, #22
 8003a84:	f53f af58 	bmi.w	8003938 <__svfiscanf_r+0x1d8>
 8003a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a8a:	f7ff fa31 	bl	8002ef0 <__retarget_lock_release_recursive>
 8003a8e:	e753      	b.n	8003938 <__svfiscanf_r+0x1d8>
 8003a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a92:	07da      	lsls	r2, r3, #31
 8003a94:	d405      	bmi.n	8003aa2 <__svfiscanf_r+0x342>
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	059b      	lsls	r3, r3, #22
 8003a9a:	d402      	bmi.n	8003aa2 <__svfiscanf_r+0x342>
 8003a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a9e:	f7ff fa27 	bl	8002ef0 <__retarget_lock_release_recursive>
 8003aa2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003aa4:	e751      	b.n	800394a <__svfiscanf_r+0x1ea>
 8003aa6:	bf00      	nop
 8003aa8:	00000000 	.word	0x00000000

08003aac <_vfiscanf_r>:
 8003aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	4616      	mov	r6, r2
 8003ab4:	461f      	mov	r7, r3
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	b118      	cbz	r0, 8003ac2 <_vfiscanf_r+0x16>
 8003aba:	6983      	ldr	r3, [r0, #24]
 8003abc:	b90b      	cbnz	r3, 8003ac2 <_vfiscanf_r+0x16>
 8003abe:	f7ff f95b 	bl	8002d78 <__sinit>
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <_vfiscanf_r+0x44>)
 8003ac4:	429c      	cmp	r4, r3
 8003ac6:	d108      	bne.n	8003ada <_vfiscanf_r+0x2e>
 8003ac8:	686c      	ldr	r4, [r5, #4]
 8003aca:	463b      	mov	r3, r7
 8003acc:	4632      	mov	r2, r6
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad6:	f7ff be43 	b.w	8003760 <__svfiscanf_r>
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <_vfiscanf_r+0x48>)
 8003adc:	429c      	cmp	r4, r3
 8003ade:	d101      	bne.n	8003ae4 <_vfiscanf_r+0x38>
 8003ae0:	68ac      	ldr	r4, [r5, #8]
 8003ae2:	e7f2      	b.n	8003aca <_vfiscanf_r+0x1e>
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <_vfiscanf_r+0x4c>)
 8003ae6:	429c      	cmp	r4, r3
 8003ae8:	bf08      	it	eq
 8003aea:	68ec      	ldreq	r4, [r5, #12]
 8003aec:	e7ed      	b.n	8003aca <_vfiscanf_r+0x1e>
 8003aee:	bf00      	nop
 8003af0:	080045b0 	.word	0x080045b0
 8003af4:	080045d0 	.word	0x080045d0
 8003af8:	08004590 	.word	0x08004590

08003afc <_scanf_chars>:
 8003afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b00:	4615      	mov	r5, r2
 8003b02:	688a      	ldr	r2, [r1, #8]
 8003b04:	4680      	mov	r8, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	b932      	cbnz	r2, 8003b18 <_scanf_chars+0x1c>
 8003b0a:	698a      	ldr	r2, [r1, #24]
 8003b0c:	2a00      	cmp	r2, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2201      	moveq	r2, #1
 8003b12:	f04f 32ff 	movne.w	r2, #4294967295
 8003b16:	608a      	str	r2, [r1, #8]
 8003b18:	2700      	movs	r7, #0
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003bac <_scanf_chars+0xb0>
 8003b20:	06d1      	lsls	r1, r2, #27
 8003b22:	bf5f      	itttt	pl
 8003b24:	681a      	ldrpl	r2, [r3, #0]
 8003b26:	1d11      	addpl	r1, r2, #4
 8003b28:	6019      	strpl	r1, [r3, #0]
 8003b2a:	6816      	ldrpl	r6, [r2, #0]
 8003b2c:	69a0      	ldr	r0, [r4, #24]
 8003b2e:	b188      	cbz	r0, 8003b54 <_scanf_chars+0x58>
 8003b30:	2801      	cmp	r0, #1
 8003b32:	d107      	bne.n	8003b44 <_scanf_chars+0x48>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	6963      	ldr	r3, [r4, #20]
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	b953      	cbnz	r3, 8003b54 <_scanf_chars+0x58>
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	d031      	beq.n	8003ba6 <_scanf_chars+0xaa>
 8003b42:	e022      	b.n	8003b8a <_scanf_chars+0x8e>
 8003b44:	2802      	cmp	r0, #2
 8003b46:	d120      	bne.n	8003b8a <_scanf_chars+0x8e>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	d41a      	bmi.n	8003b8a <_scanf_chars+0x8e>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	3701      	adds	r7, #1
 8003b58:	06da      	lsls	r2, r3, #27
 8003b5a:	bf5e      	ittt	pl
 8003b5c:	682b      	ldrpl	r3, [r5, #0]
 8003b5e:	781b      	ldrbpl	r3, [r3, #0]
 8003b60:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003b64:	682a      	ldr	r2, [r5, #0]
 8003b66:	686b      	ldr	r3, [r5, #4]
 8003b68:	3201      	adds	r2, #1
 8003b6a:	602a      	str	r2, [r5, #0]
 8003b6c:	68a2      	ldr	r2, [r4, #8]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	606b      	str	r3, [r5, #4]
 8003b74:	60a2      	str	r2, [r4, #8]
 8003b76:	b142      	cbz	r2, 8003b8a <_scanf_chars+0x8e>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	dcd7      	bgt.n	8003b2c <_scanf_chars+0x30>
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b84:	4798      	blx	r3
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d0d0      	beq.n	8003b2c <_scanf_chars+0x30>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	f013 0310 	ands.w	r3, r3, #16
 8003b90:	d105      	bne.n	8003b9e <_scanf_chars+0xa2>
 8003b92:	68e2      	ldr	r2, [r4, #12]
 8003b94:	3201      	adds	r2, #1
 8003b96:	60e2      	str	r2, [r4, #12]
 8003b98:	69a2      	ldr	r2, [r4, #24]
 8003b9a:	b102      	cbz	r2, 8003b9e <_scanf_chars+0xa2>
 8003b9c:	7033      	strb	r3, [r6, #0]
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	443b      	add	r3, r7
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003baa:	bf00      	nop
 8003bac:	0800463f 	.word	0x0800463f

08003bb0 <_scanf_i>:
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	4698      	mov	r8, r3
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <_scanf_i+0x1e0>)
 8003bba:	b087      	sub	sp, #28
 8003bbc:	4682      	mov	sl, r0
 8003bbe:	4616      	mov	r6, r2
 8003bc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bc4:	ab03      	add	r3, sp, #12
 8003bc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <_scanf_i+0x1e4>)
 8003bcc:	69a1      	ldr	r1, [r4, #24]
 8003bce:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <_scanf_i+0x1e8>)
 8003bd0:	4627      	mov	r7, r4
 8003bd2:	2903      	cmp	r1, #3
 8003bd4:	bf18      	it	ne
 8003bd6:	461a      	movne	r2, r3
 8003bd8:	68a3      	ldr	r3, [r4, #8]
 8003bda:	9201      	str	r2, [sp, #4]
 8003bdc:	1e5a      	subs	r2, r3, #1
 8003bde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003be2:	bf81      	itttt	hi
 8003be4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003be8:	eb03 0905 	addhi.w	r9, r3, r5
 8003bec:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003bf0:	60a3      	strhi	r3, [r4, #8]
 8003bf2:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003bf6:	bf98      	it	ls
 8003bf8:	f04f 0900 	movls.w	r9, #0
 8003bfc:	463d      	mov	r5, r7
 8003bfe:	f04f 0b00 	mov.w	fp, #0
 8003c02:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	6831      	ldr	r1, [r6, #0]
 8003c0a:	ab03      	add	r3, sp, #12
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	7809      	ldrb	r1, [r1, #0]
 8003c10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003c14:	f000 fbfe 	bl	8004414 <memchr>
 8003c18:	b328      	cbz	r0, 8003c66 <_scanf_i+0xb6>
 8003c1a:	f1bb 0f01 	cmp.w	fp, #1
 8003c1e:	d159      	bne.n	8003cd4 <_scanf_i+0x124>
 8003c20:	6862      	ldr	r2, [r4, #4]
 8003c22:	b92a      	cbnz	r2, 8003c30 <_scanf_i+0x80>
 8003c24:	2308      	movs	r3, #8
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	6063      	str	r3, [r4, #4]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	6022      	str	r2, [r4, #0]
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003c36:	6022      	str	r2, [r4, #0]
 8003c38:	68a2      	ldr	r2, [r4, #8]
 8003c3a:	1e51      	subs	r1, r2, #1
 8003c3c:	60a1      	str	r1, [r4, #8]
 8003c3e:	b192      	cbz	r2, 8003c66 <_scanf_i+0xb6>
 8003c40:	6832      	ldr	r2, [r6, #0]
 8003c42:	1c51      	adds	r1, r2, #1
 8003c44:	6031      	str	r1, [r6, #0]
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	f805 2b01 	strb.w	r2, [r5], #1
 8003c4c:	6872      	ldr	r2, [r6, #4]
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	2a00      	cmp	r2, #0
 8003c52:	6072      	str	r2, [r6, #4]
 8003c54:	dc07      	bgt.n	8003c66 <_scanf_i+0xb6>
 8003c56:	4631      	mov	r1, r6
 8003c58:	4650      	mov	r0, sl
 8003c5a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003c5e:	4790      	blx	r2
 8003c60:	2800      	cmp	r0, #0
 8003c62:	f040 8085 	bne.w	8003d70 <_scanf_i+0x1c0>
 8003c66:	f10b 0b01 	add.w	fp, fp, #1
 8003c6a:	f1bb 0f03 	cmp.w	fp, #3
 8003c6e:	d1cb      	bne.n	8003c08 <_scanf_i+0x58>
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	b90b      	cbnz	r3, 8003c78 <_scanf_i+0xc8>
 8003c74:	230a      	movs	r3, #10
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	4948      	ldr	r1, [pc, #288]	; (8003d9c <_scanf_i+0x1ec>)
 8003c7c:	6960      	ldr	r0, [r4, #20]
 8003c7e:	1ac9      	subs	r1, r1, r3
 8003c80:	f000 f934 	bl	8003eec <__sccl>
 8003c84:	f04f 0b00 	mov.w	fp, #0
 8003c88:	68a3      	ldr	r3, [r4, #8]
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d03d      	beq.n	8003d0c <_scanf_i+0x15c>
 8003c90:	6831      	ldr	r1, [r6, #0]
 8003c92:	6960      	ldr	r0, [r4, #20]
 8003c94:	f891 c000 	ldrb.w	ip, [r1]
 8003c98:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d035      	beq.n	8003d0c <_scanf_i+0x15c>
 8003ca0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003ca4:	d124      	bne.n	8003cf0 <_scanf_i+0x140>
 8003ca6:	0510      	lsls	r0, r2, #20
 8003ca8:	d522      	bpl.n	8003cf0 <_scanf_i+0x140>
 8003caa:	f10b 0b01 	add.w	fp, fp, #1
 8003cae:	f1b9 0f00 	cmp.w	r9, #0
 8003cb2:	d003      	beq.n	8003cbc <_scanf_i+0x10c>
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8003cba:	60a3      	str	r3, [r4, #8]
 8003cbc:	6873      	ldr	r3, [r6, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	6073      	str	r3, [r6, #4]
 8003cc4:	dd1b      	ble.n	8003cfe <_scanf_i+0x14e>
 8003cc6:	6833      	ldr	r3, [r6, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	6033      	str	r3, [r6, #0]
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60a3      	str	r3, [r4, #8]
 8003cd2:	e7d9      	b.n	8003c88 <_scanf_i+0xd8>
 8003cd4:	f1bb 0f02 	cmp.w	fp, #2
 8003cd8:	d1ae      	bne.n	8003c38 <_scanf_i+0x88>
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003ce0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003ce4:	d1bf      	bne.n	8003c66 <_scanf_i+0xb6>
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	e7a2      	b.n	8003c36 <_scanf_i+0x86>
 8003cf0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003cf4:	6022      	str	r2, [r4, #0]
 8003cf6:	780b      	ldrb	r3, [r1, #0]
 8003cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8003cfc:	e7de      	b.n	8003cbc <_scanf_i+0x10c>
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4650      	mov	r0, sl
 8003d02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003d06:	4798      	blx	r3
 8003d08:	2800      	cmp	r0, #0
 8003d0a:	d0df      	beq.n	8003ccc <_scanf_i+0x11c>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	05db      	lsls	r3, r3, #23
 8003d10:	d50d      	bpl.n	8003d2e <_scanf_i+0x17e>
 8003d12:	42bd      	cmp	r5, r7
 8003d14:	d909      	bls.n	8003d2a <_scanf_i+0x17a>
 8003d16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003d1a:	4632      	mov	r2, r6
 8003d1c:	4650      	mov	r0, sl
 8003d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d22:	f105 39ff 	add.w	r9, r5, #4294967295
 8003d26:	4798      	blx	r3
 8003d28:	464d      	mov	r5, r9
 8003d2a:	42bd      	cmp	r5, r7
 8003d2c:	d02d      	beq.n	8003d8a <_scanf_i+0x1da>
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	f012 0210 	ands.w	r2, r2, #16
 8003d34:	d113      	bne.n	8003d5e <_scanf_i+0x1ae>
 8003d36:	702a      	strb	r2, [r5, #0]
 8003d38:	4639      	mov	r1, r7
 8003d3a:	6863      	ldr	r3, [r4, #4]
 8003d3c:	4650      	mov	r0, sl
 8003d3e:	9e01      	ldr	r6, [sp, #4]
 8003d40:	47b0      	blx	r6
 8003d42:	6821      	ldr	r1, [r4, #0]
 8003d44:	f8d8 3000 	ldr.w	r3, [r8]
 8003d48:	f011 0f20 	tst.w	r1, #32
 8003d4c:	d013      	beq.n	8003d76 <_scanf_i+0x1c6>
 8003d4e:	1d1a      	adds	r2, r3, #4
 8003d50:	f8c8 2000 	str.w	r2, [r8]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6018      	str	r0, [r3, #0]
 8003d58:	68e3      	ldr	r3, [r4, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60e3      	str	r3, [r4, #12]
 8003d5e:	2000      	movs	r0, #0
 8003d60:	1bed      	subs	r5, r5, r7
 8003d62:	44ab      	add	fp, r5
 8003d64:	6925      	ldr	r5, [r4, #16]
 8003d66:	445d      	add	r5, fp
 8003d68:	6125      	str	r5, [r4, #16]
 8003d6a:	b007      	add	sp, #28
 8003d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d70:	f04f 0b00 	mov.w	fp, #0
 8003d74:	e7ca      	b.n	8003d0c <_scanf_i+0x15c>
 8003d76:	1d1a      	adds	r2, r3, #4
 8003d78:	f8c8 2000 	str.w	r2, [r8]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f011 0f01 	tst.w	r1, #1
 8003d82:	bf14      	ite	ne
 8003d84:	8018      	strhne	r0, [r3, #0]
 8003d86:	6018      	streq	r0, [r3, #0]
 8003d88:	e7e6      	b.n	8003d58 <_scanf_i+0x1a8>
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	e7ed      	b.n	8003d6a <_scanf_i+0x1ba>
 8003d8e:	bf00      	nop
 8003d90:	08004554 	.word	0x08004554
 8003d94:	080041c5 	.word	0x080041c5
 8003d98:	080040dd 	.word	0x080040dd
 8003d9c:	0800463c 	.word	0x0800463c

08003da0 <lflush>:
 8003da0:	8983      	ldrh	r3, [r0, #12]
 8003da2:	f003 0309 	and.w	r3, r3, #9
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d101      	bne.n	8003dae <lflush+0xe>
 8003daa:	f7fe bf7b 	b.w	8002ca4 <fflush>
 8003dae:	2000      	movs	r0, #0
 8003db0:	4770      	bx	lr
	...

08003db4 <__srefill_r>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	460c      	mov	r4, r1
 8003db8:	4605      	mov	r5, r0
 8003dba:	b118      	cbz	r0, 8003dc4 <__srefill_r+0x10>
 8003dbc:	6983      	ldr	r3, [r0, #24]
 8003dbe:	b90b      	cbnz	r3, 8003dc4 <__srefill_r+0x10>
 8003dc0:	f7fe ffda 	bl	8002d78 <__sinit>
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <__srefill_r+0x104>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d10a      	bne.n	8003de0 <__srefill_r+0x2c>
 8003dca:	686c      	ldr	r4, [r5, #4]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	6063      	str	r3, [r4, #4]
 8003dd0:	89a3      	ldrh	r3, [r4, #12]
 8003dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dd6:	069e      	lsls	r6, r3, #26
 8003dd8:	d50c      	bpl.n	8003df4 <__srefill_r+0x40>
 8003dda:	f04f 30ff 	mov.w	r0, #4294967295
 8003dde:	e067      	b.n	8003eb0 <__srefill_r+0xfc>
 8003de0:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <__srefill_r+0x108>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d101      	bne.n	8003dea <__srefill_r+0x36>
 8003de6:	68ac      	ldr	r4, [r5, #8]
 8003de8:	e7f0      	b.n	8003dcc <__srefill_r+0x18>
 8003dea:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <__srefill_r+0x10c>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	bf08      	it	eq
 8003df0:	68ec      	ldreq	r4, [r5, #12]
 8003df2:	e7eb      	b.n	8003dcc <__srefill_r+0x18>
 8003df4:	0758      	lsls	r0, r3, #29
 8003df6:	d449      	bmi.n	8003e8c <__srefill_r+0xd8>
 8003df8:	06d9      	lsls	r1, r3, #27
 8003dfa:	d405      	bmi.n	8003e08 <__srefill_r+0x54>
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	e7e8      	b.n	8003dda <__srefill_r+0x26>
 8003e08:	071a      	lsls	r2, r3, #28
 8003e0a:	d50b      	bpl.n	8003e24 <__srefill_r+0x70>
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f7fe ff0c 	bl	8002c2c <_fflush_r>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d1e0      	bne.n	8003dda <__srefill_r+0x26>
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	60a0      	str	r0, [r4, #8]
 8003e1c:	f023 0308 	bic.w	r3, r3, #8
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	61a0      	str	r0, [r4, #24]
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f043 0304 	orr.w	r3, r3, #4
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	b91b      	cbnz	r3, 8003e38 <__srefill_r+0x84>
 8003e30:	4621      	mov	r1, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	f7ff f882 	bl	8002f3c <__smakebuf_r>
 8003e38:	89a6      	ldrh	r6, [r4, #12]
 8003e3a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003e3e:	07b3      	lsls	r3, r6, #30
 8003e40:	d00f      	beq.n	8003e62 <__srefill_r+0xae>
 8003e42:	2301      	movs	r3, #1
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <__srefill_r+0x110>)
 8003e48:	491f      	ldr	r1, [pc, #124]	; (8003ec8 <__srefill_r+0x114>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	f006 0609 	and.w	r6, r6, #9
 8003e50:	f7ff f810 	bl	8002e74 <_fwalk>
 8003e54:	2e09      	cmp	r6, #9
 8003e56:	81a7      	strh	r7, [r4, #12]
 8003e58:	d103      	bne.n	8003e62 <__srefill_r+0xae>
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f7fe fe63 	bl	8002b28 <__sflush_r>
 8003e62:	6922      	ldr	r2, [r4, #16]
 8003e64:	4628      	mov	r0, r5
 8003e66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003e68:	6963      	ldr	r3, [r4, #20]
 8003e6a:	6a21      	ldr	r1, [r4, #32]
 8003e6c:	6022      	str	r2, [r4, #0]
 8003e6e:	47b0      	blx	r6
 8003e70:	2800      	cmp	r0, #0
 8003e72:	6060      	str	r0, [r4, #4]
 8003e74:	dc1d      	bgt.n	8003eb2 <__srefill_r+0xfe>
 8003e76:	bf18      	it	ne
 8003e78:	2200      	movne	r2, #0
 8003e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e7e:	bf16      	itet	ne
 8003e80:	6062      	strne	r2, [r4, #4]
 8003e82:	f043 0320 	orreq.w	r3, r3, #32
 8003e86:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003e8a:	e7bb      	b.n	8003e04 <__srefill_r+0x50>
 8003e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d0cc      	beq.n	8003e2c <__srefill_r+0x78>
 8003e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e96:	4299      	cmp	r1, r3
 8003e98:	d002      	beq.n	8003ea0 <__srefill_r+0xec>
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f7ff f896 	bl	8002fcc <_free_r>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ea4:	6360      	str	r0, [r4, #52]	; 0x34
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0bf      	beq.n	8003e2c <__srefill_r+0x78>
 8003eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e7fc      	b.n	8003eb0 <__srefill_r+0xfc>
 8003eb6:	bf00      	nop
 8003eb8:	080045b0 	.word	0x080045b0
 8003ebc:	080045d0 	.word	0x080045d0
 8003ec0:	08004590 	.word	0x08004590
 8003ec4:	0800458c 	.word	0x0800458c
 8003ec8:	08003da1 	.word	0x08003da1

08003ecc <_sbrk_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	2300      	movs	r3, #0
 8003ed0:	4d05      	ldr	r5, [pc, #20]	; (8003ee8 <_sbrk_r+0x1c>)
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fc fc54 	bl	8000784 <_sbrk>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_sbrk_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_sbrk_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000134 	.word	0x20000134

08003eec <__sccl>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	780b      	ldrb	r3, [r1, #0]
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	2b5e      	cmp	r3, #94	; 0x5e
 8003ef4:	bf13      	iteet	ne
 8003ef6:	2200      	movne	r2, #0
 8003ef8:	2201      	moveq	r2, #1
 8003efa:	784b      	ldrbeq	r3, [r1, #1]
 8003efc:	1c48      	addne	r0, r1, #1
 8003efe:	bf08      	it	eq
 8003f00:	1c88      	addeq	r0, r1, #2
 8003f02:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003f06:	1e61      	subs	r1, r4, #1
 8003f08:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003f0c:	42a9      	cmp	r1, r5
 8003f0e:	d1fb      	bne.n	8003f08 <__sccl+0x1c>
 8003f10:	b90b      	cbnz	r3, 8003f16 <__sccl+0x2a>
 8003f12:	3801      	subs	r0, #1
 8003f14:	bd70      	pop	{r4, r5, r6, pc}
 8003f16:	f082 0201 	eor.w	r2, r2, #1
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	54e2      	strb	r2, [r4, r3]
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003f24:	292d      	cmp	r1, #45	; 0x2d
 8003f26:	d006      	beq.n	8003f36 <__sccl+0x4a>
 8003f28:	295d      	cmp	r1, #93	; 0x5d
 8003f2a:	d0f3      	beq.n	8003f14 <__sccl+0x28>
 8003f2c:	b909      	cbnz	r1, 8003f32 <__sccl+0x46>
 8003f2e:	4628      	mov	r0, r5
 8003f30:	e7f0      	b.n	8003f14 <__sccl+0x28>
 8003f32:	460b      	mov	r3, r1
 8003f34:	e7f1      	b.n	8003f1a <__sccl+0x2e>
 8003f36:	786e      	ldrb	r6, [r5, #1]
 8003f38:	2e5d      	cmp	r6, #93	; 0x5d
 8003f3a:	d0fa      	beq.n	8003f32 <__sccl+0x46>
 8003f3c:	42b3      	cmp	r3, r6
 8003f3e:	dcf8      	bgt.n	8003f32 <__sccl+0x46>
 8003f40:	4619      	mov	r1, r3
 8003f42:	3502      	adds	r5, #2
 8003f44:	3101      	adds	r1, #1
 8003f46:	428e      	cmp	r6, r1
 8003f48:	5462      	strb	r2, [r4, r1]
 8003f4a:	dcfb      	bgt.n	8003f44 <__sccl+0x58>
 8003f4c:	1af1      	subs	r1, r6, r3
 8003f4e:	3901      	subs	r1, #1
 8003f50:	42b3      	cmp	r3, r6
 8003f52:	bfa8      	it	ge
 8003f54:	2100      	movge	r1, #0
 8003f56:	1c58      	adds	r0, r3, #1
 8003f58:	1843      	adds	r3, r0, r1
 8003f5a:	e7e0      	b.n	8003f1e <__sccl+0x32>

08003f5c <__sread>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	460c      	mov	r4, r1
 8003f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f64:	f000 faae 	bl	80044c4 <_read_r>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	bfab      	itete	ge
 8003f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f70:	181b      	addge	r3, r3, r0
 8003f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f76:	bfac      	ite	ge
 8003f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f7a:	81a3      	strhlt	r3, [r4, #12]
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <__swrite>:
 8003f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f82:	461f      	mov	r7, r3
 8003f84:	898b      	ldrh	r3, [r1, #12]
 8003f86:	4605      	mov	r5, r0
 8003f88:	05db      	lsls	r3, r3, #23
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	d505      	bpl.n	8003f9c <__swrite+0x1e>
 8003f90:	2302      	movs	r3, #2
 8003f92:	2200      	movs	r2, #0
 8003f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f98:	f000 fa2a 	bl	80043f0 <_lseek_r>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	463b      	mov	r3, r7
 8003faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb2:	f000 b9d9 	b.w	8004368 <_write_r>

08003fb6 <__sseek>:
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	460c      	mov	r4, r1
 8003fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fbe:	f000 fa17 	bl	80043f0 <_lseek_r>
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	bf15      	itete	ne
 8003fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fd2:	81a3      	strheq	r3, [r4, #12]
 8003fd4:	bf18      	it	ne
 8003fd6:	81a3      	strhne	r3, [r4, #12]
 8003fd8:	bd10      	pop	{r4, pc}

08003fda <__sclose>:
 8003fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fde:	f000 b9d5 	b.w	800438c <_close_r>
	...

08003fe4 <_strtol_l.constprop.0>:
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fea:	4680      	mov	r8, r0
 8003fec:	d001      	beq.n	8003ff2 <_strtol_l.constprop.0+0xe>
 8003fee:	2b24      	cmp	r3, #36	; 0x24
 8003ff0:	d906      	bls.n	8004000 <_strtol_l.constprop.0+0x1c>
 8003ff2:	f7fe fb3b 	bl	800266c <__errno>
 8003ff6:	2316      	movs	r3, #22
 8003ff8:	6003      	str	r3, [r0, #0]
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	460d      	mov	r5, r1
 8004002:	4f35      	ldr	r7, [pc, #212]	; (80040d8 <_strtol_l.constprop.0+0xf4>)
 8004004:	4628      	mov	r0, r5
 8004006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800400a:	5de6      	ldrb	r6, [r4, r7]
 800400c:	f016 0608 	ands.w	r6, r6, #8
 8004010:	d1f8      	bne.n	8004004 <_strtol_l.constprop.0+0x20>
 8004012:	2c2d      	cmp	r4, #45	; 0x2d
 8004014:	d12f      	bne.n	8004076 <_strtol_l.constprop.0+0x92>
 8004016:	2601      	movs	r6, #1
 8004018:	782c      	ldrb	r4, [r5, #0]
 800401a:	1c85      	adds	r5, r0, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d057      	beq.n	80040d0 <_strtol_l.constprop.0+0xec>
 8004020:	2b10      	cmp	r3, #16
 8004022:	d109      	bne.n	8004038 <_strtol_l.constprop.0+0x54>
 8004024:	2c30      	cmp	r4, #48	; 0x30
 8004026:	d107      	bne.n	8004038 <_strtol_l.constprop.0+0x54>
 8004028:	7828      	ldrb	r0, [r5, #0]
 800402a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800402e:	2858      	cmp	r0, #88	; 0x58
 8004030:	d149      	bne.n	80040c6 <_strtol_l.constprop.0+0xe2>
 8004032:	2310      	movs	r3, #16
 8004034:	786c      	ldrb	r4, [r5, #1]
 8004036:	3502      	adds	r5, #2
 8004038:	2700      	movs	r7, #0
 800403a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800403e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004042:	fbbe f9f3 	udiv	r9, lr, r3
 8004046:	4638      	mov	r0, r7
 8004048:	fb03 ea19 	mls	sl, r3, r9, lr
 800404c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004050:	f1bc 0f09 	cmp.w	ip, #9
 8004054:	d814      	bhi.n	8004080 <_strtol_l.constprop.0+0x9c>
 8004056:	4664      	mov	r4, ip
 8004058:	42a3      	cmp	r3, r4
 800405a:	dd22      	ble.n	80040a2 <_strtol_l.constprop.0+0xbe>
 800405c:	2f00      	cmp	r7, #0
 800405e:	db1d      	blt.n	800409c <_strtol_l.constprop.0+0xb8>
 8004060:	4581      	cmp	r9, r0
 8004062:	d31b      	bcc.n	800409c <_strtol_l.constprop.0+0xb8>
 8004064:	d101      	bne.n	800406a <_strtol_l.constprop.0+0x86>
 8004066:	45a2      	cmp	sl, r4
 8004068:	db18      	blt.n	800409c <_strtol_l.constprop.0+0xb8>
 800406a:	2701      	movs	r7, #1
 800406c:	fb00 4003 	mla	r0, r0, r3, r4
 8004070:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004074:	e7ea      	b.n	800404c <_strtol_l.constprop.0+0x68>
 8004076:	2c2b      	cmp	r4, #43	; 0x2b
 8004078:	bf04      	itt	eq
 800407a:	782c      	ldrbeq	r4, [r5, #0]
 800407c:	1c85      	addeq	r5, r0, #2
 800407e:	e7cd      	b.n	800401c <_strtol_l.constprop.0+0x38>
 8004080:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004084:	f1bc 0f19 	cmp.w	ip, #25
 8004088:	d801      	bhi.n	800408e <_strtol_l.constprop.0+0xaa>
 800408a:	3c37      	subs	r4, #55	; 0x37
 800408c:	e7e4      	b.n	8004058 <_strtol_l.constprop.0+0x74>
 800408e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004092:	f1bc 0f19 	cmp.w	ip, #25
 8004096:	d804      	bhi.n	80040a2 <_strtol_l.constprop.0+0xbe>
 8004098:	3c57      	subs	r4, #87	; 0x57
 800409a:	e7dd      	b.n	8004058 <_strtol_l.constprop.0+0x74>
 800409c:	f04f 37ff 	mov.w	r7, #4294967295
 80040a0:	e7e6      	b.n	8004070 <_strtol_l.constprop.0+0x8c>
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	da07      	bge.n	80040b6 <_strtol_l.constprop.0+0xd2>
 80040a6:	2322      	movs	r3, #34	; 0x22
 80040a8:	4670      	mov	r0, lr
 80040aa:	f8c8 3000 	str.w	r3, [r8]
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d0a4      	beq.n	8003ffc <_strtol_l.constprop.0+0x18>
 80040b2:	1e69      	subs	r1, r5, #1
 80040b4:	e005      	b.n	80040c2 <_strtol_l.constprop.0+0xde>
 80040b6:	b106      	cbz	r6, 80040ba <_strtol_l.constprop.0+0xd6>
 80040b8:	4240      	negs	r0, r0
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	d09e      	beq.n	8003ffc <_strtol_l.constprop.0+0x18>
 80040be:	2f00      	cmp	r7, #0
 80040c0:	d1f7      	bne.n	80040b2 <_strtol_l.constprop.0+0xce>
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	e79a      	b.n	8003ffc <_strtol_l.constprop.0+0x18>
 80040c6:	2430      	movs	r4, #48	; 0x30
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1b5      	bne.n	8004038 <_strtol_l.constprop.0+0x54>
 80040cc:	2308      	movs	r3, #8
 80040ce:	e7b3      	b.n	8004038 <_strtol_l.constprop.0+0x54>
 80040d0:	2c30      	cmp	r4, #48	; 0x30
 80040d2:	d0a9      	beq.n	8004028 <_strtol_l.constprop.0+0x44>
 80040d4:	230a      	movs	r3, #10
 80040d6:	e7af      	b.n	8004038 <_strtol_l.constprop.0+0x54>
 80040d8:	0800463f 	.word	0x0800463f

080040dc <_strtol_r>:
 80040dc:	f7ff bf82 	b.w	8003fe4 <_strtol_l.constprop.0>

080040e0 <_strtoul_l.constprop.0>:
 80040e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e4:	4686      	mov	lr, r0
 80040e6:	460d      	mov	r5, r1
 80040e8:	4f35      	ldr	r7, [pc, #212]	; (80041c0 <_strtoul_l.constprop.0+0xe0>)
 80040ea:	4628      	mov	r0, r5
 80040ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040f0:	5de6      	ldrb	r6, [r4, r7]
 80040f2:	f016 0608 	ands.w	r6, r6, #8
 80040f6:	d1f8      	bne.n	80040ea <_strtoul_l.constprop.0+0xa>
 80040f8:	2c2d      	cmp	r4, #45	; 0x2d
 80040fa:	d12f      	bne.n	800415c <_strtoul_l.constprop.0+0x7c>
 80040fc:	2601      	movs	r6, #1
 80040fe:	782c      	ldrb	r4, [r5, #0]
 8004100:	1c85      	adds	r5, r0, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d057      	beq.n	80041b6 <_strtoul_l.constprop.0+0xd6>
 8004106:	2b10      	cmp	r3, #16
 8004108:	d109      	bne.n	800411e <_strtoul_l.constprop.0+0x3e>
 800410a:	2c30      	cmp	r4, #48	; 0x30
 800410c:	d107      	bne.n	800411e <_strtoul_l.constprop.0+0x3e>
 800410e:	7828      	ldrb	r0, [r5, #0]
 8004110:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004114:	2858      	cmp	r0, #88	; 0x58
 8004116:	d149      	bne.n	80041ac <_strtoul_l.constprop.0+0xcc>
 8004118:	2310      	movs	r3, #16
 800411a:	786c      	ldrb	r4, [r5, #1]
 800411c:	3502      	adds	r5, #2
 800411e:	f04f 38ff 	mov.w	r8, #4294967295
 8004122:	fbb8 f8f3 	udiv	r8, r8, r3
 8004126:	2700      	movs	r7, #0
 8004128:	fb03 f908 	mul.w	r9, r3, r8
 800412c:	4638      	mov	r0, r7
 800412e:	ea6f 0909 	mvn.w	r9, r9
 8004132:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004136:	f1bc 0f09 	cmp.w	ip, #9
 800413a:	d814      	bhi.n	8004166 <_strtoul_l.constprop.0+0x86>
 800413c:	4664      	mov	r4, ip
 800413e:	42a3      	cmp	r3, r4
 8004140:	dd22      	ble.n	8004188 <_strtoul_l.constprop.0+0xa8>
 8004142:	2f00      	cmp	r7, #0
 8004144:	db1d      	blt.n	8004182 <_strtoul_l.constprop.0+0xa2>
 8004146:	4580      	cmp	r8, r0
 8004148:	d31b      	bcc.n	8004182 <_strtoul_l.constprop.0+0xa2>
 800414a:	d101      	bne.n	8004150 <_strtoul_l.constprop.0+0x70>
 800414c:	45a1      	cmp	r9, r4
 800414e:	db18      	blt.n	8004182 <_strtoul_l.constprop.0+0xa2>
 8004150:	2701      	movs	r7, #1
 8004152:	fb00 4003 	mla	r0, r0, r3, r4
 8004156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800415a:	e7ea      	b.n	8004132 <_strtoul_l.constprop.0+0x52>
 800415c:	2c2b      	cmp	r4, #43	; 0x2b
 800415e:	bf04      	itt	eq
 8004160:	782c      	ldrbeq	r4, [r5, #0]
 8004162:	1c85      	addeq	r5, r0, #2
 8004164:	e7cd      	b.n	8004102 <_strtoul_l.constprop.0+0x22>
 8004166:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800416a:	f1bc 0f19 	cmp.w	ip, #25
 800416e:	d801      	bhi.n	8004174 <_strtoul_l.constprop.0+0x94>
 8004170:	3c37      	subs	r4, #55	; 0x37
 8004172:	e7e4      	b.n	800413e <_strtoul_l.constprop.0+0x5e>
 8004174:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004178:	f1bc 0f19 	cmp.w	ip, #25
 800417c:	d804      	bhi.n	8004188 <_strtoul_l.constprop.0+0xa8>
 800417e:	3c57      	subs	r4, #87	; 0x57
 8004180:	e7dd      	b.n	800413e <_strtoul_l.constprop.0+0x5e>
 8004182:	f04f 37ff 	mov.w	r7, #4294967295
 8004186:	e7e6      	b.n	8004156 <_strtoul_l.constprop.0+0x76>
 8004188:	2f00      	cmp	r7, #0
 800418a:	da07      	bge.n	800419c <_strtoul_l.constprop.0+0xbc>
 800418c:	2322      	movs	r3, #34	; 0x22
 800418e:	f04f 30ff 	mov.w	r0, #4294967295
 8004192:	f8ce 3000 	str.w	r3, [lr]
 8004196:	b932      	cbnz	r2, 80041a6 <_strtoul_l.constprop.0+0xc6>
 8004198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800419c:	b106      	cbz	r6, 80041a0 <_strtoul_l.constprop.0+0xc0>
 800419e:	4240      	negs	r0, r0
 80041a0:	2a00      	cmp	r2, #0
 80041a2:	d0f9      	beq.n	8004198 <_strtoul_l.constprop.0+0xb8>
 80041a4:	b107      	cbz	r7, 80041a8 <_strtoul_l.constprop.0+0xc8>
 80041a6:	1e69      	subs	r1, r5, #1
 80041a8:	6011      	str	r1, [r2, #0]
 80041aa:	e7f5      	b.n	8004198 <_strtoul_l.constprop.0+0xb8>
 80041ac:	2430      	movs	r4, #48	; 0x30
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1b5      	bne.n	800411e <_strtoul_l.constprop.0+0x3e>
 80041b2:	2308      	movs	r3, #8
 80041b4:	e7b3      	b.n	800411e <_strtoul_l.constprop.0+0x3e>
 80041b6:	2c30      	cmp	r4, #48	; 0x30
 80041b8:	d0a9      	beq.n	800410e <_strtoul_l.constprop.0+0x2e>
 80041ba:	230a      	movs	r3, #10
 80041bc:	e7af      	b.n	800411e <_strtoul_l.constprop.0+0x3e>
 80041be:	bf00      	nop
 80041c0:	0800463f 	.word	0x0800463f

080041c4 <_strtoul_r>:
 80041c4:	f7ff bf8c 	b.w	80040e0 <_strtoul_l.constprop.0>

080041c8 <__submore>:
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	460c      	mov	r4, r1
 80041ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80041d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d11b      	bne.n	8004210 <__submore+0x48>
 80041d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041dc:	f7fe ff5e 	bl	800309c <_malloc_r>
 80041e0:	b918      	cbnz	r0, 80041ea <__submore+0x22>
 80041e2:	f04f 30ff 	mov.w	r0, #4294967295
 80041e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80041f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80041f4:	6360      	str	r0, [r4, #52]	; 0x34
 80041f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80041fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80041fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004202:	7043      	strb	r3, [r0, #1]
 8004204:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004208:	7003      	strb	r3, [r0, #0]
 800420a:	6020      	str	r0, [r4, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e7ea      	b.n	80041e6 <__submore+0x1e>
 8004210:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004212:	0077      	lsls	r7, r6, #1
 8004214:	463a      	mov	r2, r7
 8004216:	f000 f925 	bl	8004464 <_realloc_r>
 800421a:	4605      	mov	r5, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	d0e0      	beq.n	80041e2 <__submore+0x1a>
 8004220:	eb00 0806 	add.w	r8, r0, r6
 8004224:	4601      	mov	r1, r0
 8004226:	4632      	mov	r2, r6
 8004228:	4640      	mov	r0, r8
 800422a:	f000 f901 	bl	8004430 <memcpy>
 800422e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004232:	f8c4 8000 	str.w	r8, [r4]
 8004236:	e7e9      	b.n	800420c <__submore+0x44>

08004238 <_ungetc_r>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4614      	mov	r4, r2
 800423c:	1c4a      	adds	r2, r1, #1
 800423e:	4606      	mov	r6, r0
 8004240:	460d      	mov	r5, r1
 8004242:	d103      	bne.n	800424c <_ungetc_r+0x14>
 8004244:	f04f 35ff 	mov.w	r5, #4294967295
 8004248:	4628      	mov	r0, r5
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	b118      	cbz	r0, 8004256 <_ungetc_r+0x1e>
 800424e:	6983      	ldr	r3, [r0, #24]
 8004250:	b90b      	cbnz	r3, 8004256 <_ungetc_r+0x1e>
 8004252:	f7fe fd91 	bl	8002d78 <__sinit>
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <_ungetc_r+0x124>)
 8004258:	429c      	cmp	r4, r3
 800425a:	d11d      	bne.n	8004298 <_ungetc_r+0x60>
 800425c:	6874      	ldr	r4, [r6, #4]
 800425e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004260:	07db      	lsls	r3, r3, #31
 8004262:	d405      	bmi.n	8004270 <_ungetc_r+0x38>
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	0598      	lsls	r0, r3, #22
 8004268:	d402      	bmi.n	8004270 <_ungetc_r+0x38>
 800426a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800426c:	f7fe fe3f 	bl	8002eee <__retarget_lock_acquire_recursive>
 8004270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004274:	f023 0320 	bic.w	r3, r3, #32
 8004278:	0759      	lsls	r1, r3, #29
 800427a:	81a3      	strh	r3, [r4, #12]
 800427c:	b29a      	uxth	r2, r3
 800427e:	d42d      	bmi.n	80042dc <_ungetc_r+0xa4>
 8004280:	06d3      	lsls	r3, r2, #27
 8004282:	d413      	bmi.n	80042ac <_ungetc_r+0x74>
 8004284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004286:	07dd      	lsls	r5, r3, #31
 8004288:	d4dc      	bmi.n	8004244 <_ungetc_r+0xc>
 800428a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800428e:	d1d9      	bne.n	8004244 <_ungetc_r+0xc>
 8004290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004292:	f7fe fe2d 	bl	8002ef0 <__retarget_lock_release_recursive>
 8004296:	e7d5      	b.n	8004244 <_ungetc_r+0xc>
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <_ungetc_r+0x128>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d101      	bne.n	80042a2 <_ungetc_r+0x6a>
 800429e:	68b4      	ldr	r4, [r6, #8]
 80042a0:	e7dd      	b.n	800425e <_ungetc_r+0x26>
 80042a2:	4b30      	ldr	r3, [pc, #192]	; (8004364 <_ungetc_r+0x12c>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	bf08      	it	eq
 80042a8:	68f4      	ldreq	r4, [r6, #12]
 80042aa:	e7d8      	b.n	800425e <_ungetc_r+0x26>
 80042ac:	0710      	lsls	r0, r2, #28
 80042ae:	d511      	bpl.n	80042d4 <_ungetc_r+0x9c>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7fe fcba 	bl	8002c2c <_fflush_r>
 80042b8:	b130      	cbz	r0, 80042c8 <_ungetc_r+0x90>
 80042ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042bc:	07d9      	lsls	r1, r3, #31
 80042be:	d4c1      	bmi.n	8004244 <_ungetc_r+0xc>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80042c6:	e7e2      	b.n	800428e <_ungetc_r+0x56>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	60a0      	str	r0, [r4, #8]
 80042cc:	f023 0308 	bic.w	r3, r3, #8
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	61a0      	str	r0, [r4, #24]
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042de:	6862      	ldr	r2, [r4, #4]
 80042e0:	b2ed      	uxtb	r5, r5
 80042e2:	b1d3      	cbz	r3, 800431a <_ungetc_r+0xe2>
 80042e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042e6:	4293      	cmp	r3, r2
 80042e8:	dc05      	bgt.n	80042f6 <_ungetc_r+0xbe>
 80042ea:	4621      	mov	r1, r4
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff ff6b 	bl	80041c8 <__submore>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1e1      	bne.n	80042ba <_ungetc_r+0x82>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	6022      	str	r2, [r4, #0]
 80042fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	3301      	adds	r3, #1
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004308:	07da      	lsls	r2, r3, #31
 800430a:	d49d      	bmi.n	8004248 <_ungetc_r+0x10>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	059b      	lsls	r3, r3, #22
 8004310:	d49a      	bmi.n	8004248 <_ungetc_r+0x10>
 8004312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004314:	f7fe fdec 	bl	8002ef0 <__retarget_lock_release_recursive>
 8004318:	e796      	b.n	8004248 <_ungetc_r+0x10>
 800431a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800431c:	6920      	ldr	r0, [r4, #16]
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f001 0101 	and.w	r1, r1, #1
 8004324:	b160      	cbz	r0, 8004340 <_ungetc_r+0x108>
 8004326:	4298      	cmp	r0, r3
 8004328:	d20a      	bcs.n	8004340 <_ungetc_r+0x108>
 800432a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800432e:	42a8      	cmp	r0, r5
 8004330:	d106      	bne.n	8004340 <_ungetc_r+0x108>
 8004332:	3b01      	subs	r3, #1
 8004334:	3201      	adds	r2, #1
 8004336:	6023      	str	r3, [r4, #0]
 8004338:	6062      	str	r2, [r4, #4]
 800433a:	2900      	cmp	r1, #0
 800433c:	d184      	bne.n	8004248 <_ungetc_r+0x10>
 800433e:	e7e5      	b.n	800430c <_ungetc_r+0xd4>
 8004340:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004348:	6363      	str	r3, [r4, #52]	; 0x34
 800434a:	2303      	movs	r3, #3
 800434c:	63a3      	str	r3, [r4, #56]	; 0x38
 800434e:	4623      	mov	r3, r4
 8004350:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	2301      	movs	r3, #1
 8004358:	6063      	str	r3, [r4, #4]
 800435a:	e7ee      	b.n	800433a <_ungetc_r+0x102>
 800435c:	080045b0 	.word	0x080045b0
 8004360:	080045d0 	.word	0x080045d0
 8004364:	08004590 	.word	0x08004590

08004368 <_write_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	2200      	movs	r2, #0
 8004372:	4d05      	ldr	r5, [pc, #20]	; (8004388 <_write_r+0x20>)
 8004374:	602a      	str	r2, [r5, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f7fc f9b8 	bl	80006ec <_write>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_write_r+0x1e>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_write_r+0x1e>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	20000134 	.word	0x20000134

0800438c <_close_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	2300      	movs	r3, #0
 8004390:	4d05      	ldr	r5, [pc, #20]	; (80043a8 <_close_r+0x1c>)
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	f7fc f9c4 	bl	8000724 <_close>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_close_r+0x1a>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_close_r+0x1a>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	20000134 	.word	0x20000134

080043ac <_fstat_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	2300      	movs	r3, #0
 80043b0:	4d06      	ldr	r5, [pc, #24]	; (80043cc <_fstat_r+0x20>)
 80043b2:	4604      	mov	r4, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	602b      	str	r3, [r5, #0]
 80043ba:	f7fc f9be 	bl	800073a <_fstat>
 80043be:	1c43      	adds	r3, r0, #1
 80043c0:	d102      	bne.n	80043c8 <_fstat_r+0x1c>
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	b103      	cbz	r3, 80043c8 <_fstat_r+0x1c>
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	20000134 	.word	0x20000134

080043d0 <_isatty_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	2300      	movs	r3, #0
 80043d4:	4d05      	ldr	r5, [pc, #20]	; (80043ec <_isatty_r+0x1c>)
 80043d6:	4604      	mov	r4, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	f7fc f9bc 	bl	8000758 <_isatty>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_isatty_r+0x1a>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_isatty_r+0x1a>
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20000134 	.word	0x20000134

080043f0 <_lseek_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	2200      	movs	r2, #0
 80043fa:	4d05      	ldr	r5, [pc, #20]	; (8004410 <_lseek_r+0x20>)
 80043fc:	602a      	str	r2, [r5, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	f7fc f9b4 	bl	800076c <_lseek>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_lseek_r+0x1e>
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	b103      	cbz	r3, 800440e <_lseek_r+0x1e>
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20000134 	.word	0x20000134

08004414 <memchr>:
 8004414:	4603      	mov	r3, r0
 8004416:	b510      	push	{r4, lr}
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	4402      	add	r2, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	4618      	mov	r0, r3
 8004420:	d101      	bne.n	8004426 <memchr+0x12>
 8004422:	2000      	movs	r0, #0
 8004424:	e003      	b.n	800442e <memchr+0x1a>
 8004426:	7804      	ldrb	r4, [r0, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	428c      	cmp	r4, r1
 800442c:	d1f6      	bne.n	800441c <memchr+0x8>
 800442e:	bd10      	pop	{r4, pc}

08004430 <memcpy>:
 8004430:	440a      	add	r2, r1
 8004432:	4291      	cmp	r1, r2
 8004434:	f100 33ff 	add.w	r3, r0, #4294967295
 8004438:	d100      	bne.n	800443c <memcpy+0xc>
 800443a:	4770      	bx	lr
 800443c:	b510      	push	{r4, lr}
 800443e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004442:	4291      	cmp	r1, r2
 8004444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004448:	d1f9      	bne.n	800443e <memcpy+0xe>
 800444a:	bd10      	pop	{r4, pc}

0800444c <__malloc_lock>:
 800444c:	4801      	ldr	r0, [pc, #4]	; (8004454 <__malloc_lock+0x8>)
 800444e:	f7fe bd4e 	b.w	8002eee <__retarget_lock_acquire_recursive>
 8004452:	bf00      	nop
 8004454:	20000128 	.word	0x20000128

08004458 <__malloc_unlock>:
 8004458:	4801      	ldr	r0, [pc, #4]	; (8004460 <__malloc_unlock+0x8>)
 800445a:	f7fe bd49 	b.w	8002ef0 <__retarget_lock_release_recursive>
 800445e:	bf00      	nop
 8004460:	20000128 	.word	0x20000128

08004464 <_realloc_r>:
 8004464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004468:	4680      	mov	r8, r0
 800446a:	4614      	mov	r4, r2
 800446c:	460e      	mov	r6, r1
 800446e:	b921      	cbnz	r1, 800447a <_realloc_r+0x16>
 8004470:	4611      	mov	r1, r2
 8004472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	f7fe be11 	b.w	800309c <_malloc_r>
 800447a:	b92a      	cbnz	r2, 8004488 <_realloc_r+0x24>
 800447c:	f7fe fda6 	bl	8002fcc <_free_r>
 8004480:	4625      	mov	r5, r4
 8004482:	4628      	mov	r0, r5
 8004484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004488:	f000 f82e 	bl	80044e8 <_malloc_usable_size_r>
 800448c:	4284      	cmp	r4, r0
 800448e:	4607      	mov	r7, r0
 8004490:	d802      	bhi.n	8004498 <_realloc_r+0x34>
 8004492:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004496:	d812      	bhi.n	80044be <_realloc_r+0x5a>
 8004498:	4621      	mov	r1, r4
 800449a:	4640      	mov	r0, r8
 800449c:	f7fe fdfe 	bl	800309c <_malloc_r>
 80044a0:	4605      	mov	r5, r0
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d0ed      	beq.n	8004482 <_realloc_r+0x1e>
 80044a6:	42bc      	cmp	r4, r7
 80044a8:	4622      	mov	r2, r4
 80044aa:	4631      	mov	r1, r6
 80044ac:	bf28      	it	cs
 80044ae:	463a      	movcs	r2, r7
 80044b0:	f7ff ffbe 	bl	8004430 <memcpy>
 80044b4:	4631      	mov	r1, r6
 80044b6:	4640      	mov	r0, r8
 80044b8:	f7fe fd88 	bl	8002fcc <_free_r>
 80044bc:	e7e1      	b.n	8004482 <_realloc_r+0x1e>
 80044be:	4635      	mov	r5, r6
 80044c0:	e7df      	b.n	8004482 <_realloc_r+0x1e>
	...

080044c4 <_read_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	2200      	movs	r2, #0
 80044ce:	4d05      	ldr	r5, [pc, #20]	; (80044e4 <_read_r+0x20>)
 80044d0:	602a      	str	r2, [r5, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f7fc f8ed 	bl	80006b2 <_read>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_read_r+0x1e>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_read_r+0x1e>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	20000134 	.word	0x20000134

080044e8 <_malloc_usable_size_r>:
 80044e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ec:	1f18      	subs	r0, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfbc      	itt	lt
 80044f2:	580b      	ldrlt	r3, [r1, r0]
 80044f4:	18c0      	addlt	r0, r0, r3
 80044f6:	4770      	bx	lr

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
