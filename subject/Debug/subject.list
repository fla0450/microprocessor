
subject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a8  080034a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034a8  080034a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034a8  080034a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003520  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003520  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c475  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b11  00000000  00000000  0002c50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001820f  00000000  00000000  0002f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caf3  00000000  00000000  00047a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b96a  00000000  00000000  000544fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfe64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b30  00000000  00000000  000dfeb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800337c 	.word	0x0800337c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800337c 	.word	0x0800337c

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);  // 0xFFFF?�� 최�? ??�? ?���?
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f001 ff51 	bl	8002004 <HAL_UART_Transmit>
   if (ch == '\n') {
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
      HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 0xFFFF);
 8000168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f001 ff47 	bl	8002004 <HAL_UART_Transmit>
	   }
   return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200000d4 	.word	0x200000d4
 8000184:	08003394 	.word	0x08003394

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fb72 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f80c 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8be 	bl	8000314 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f892 	bl	80002c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800019c:	f000 f842 	bl	8000224 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001a0:	4801      	ldr	r0, [pc, #4]	; (80001a8 <main+0x20>)
 80001a2:	f001 fb03 	bl	80017ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a6:	e7fe      	b.n	80001a6 <main+0x1e>
 80001a8:	2000008c 	.word	0x2000008c

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 f8cc 	bl	8002358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001da:	2300      	movs	r3, #0
 80001dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fe82 	bl	8000eec <HAL_RCC_OscConfig>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001ee:	f000 f991 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f2:	230f      	movs	r3, #15
 80001f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f8f0 	bl	80013f0 <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000216:	f000 f97d 	bl	8000514 <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000240:	4b1e      	ldr	r3, [pc, #120]	; (80002bc <MX_TIM2_Init+0x98>)
 8000242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 8000248:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <MX_TIM2_Init+0x98>)
 800024a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800024e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <MX_TIM2_Init+0x98>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000256:	4b19      	ldr	r3, [pc, #100]	; (80002bc <MX_TIM2_Init+0x98>)
 8000258:	f241 3288 	movw	r2, #5000	; 0x1388
 800025c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <MX_TIM2_Init+0x98>)
 8000260:	2200      	movs	r2, #0
 8000262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <MX_TIM2_Init+0x98>)
 8000266:	2200      	movs	r2, #0
 8000268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800026a:	4814      	ldr	r0, [pc, #80]	; (80002bc <MX_TIM2_Init+0x98>)
 800026c:	f001 fa4e 	bl	800170c <HAL_TIM_Base_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000276:	f000 f94d 	bl	8000514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800027a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800027e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	4619      	mov	r1, r3
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <MX_TIM2_Init+0x98>)
 8000288:	f001 fc18 	bl	8001abc <HAL_TIM_ConfigClockSource>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000292:	f000 f93f 	bl	8000514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000296:	2300      	movs	r3, #0
 8000298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800029a:	2300      	movs	r3, #0
 800029c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	4619      	mov	r1, r3
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <MX_TIM2_Init+0x98>)
 80002a4:	f001 fdee 	bl	8001e84 <HAL_TIMEx_MasterConfigSynchronization>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80002ae:	f000 f931 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c

080002c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002c6:	4a12      	ldr	r2, [pc, #72]	; (8000310 <MX_USART2_UART_Init+0x50>)
 80002c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002e6:	220c      	movs	r2, #12
 80002e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <MX_USART2_UART_Init+0x4c>)
 80002f8:	f001 fe34 	bl	8001f64 <HAL_UART_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000302:	f000 f907 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000d4 	.word	0x200000d4
 8000310:	40004400 	.word	0x40004400

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	4b38      	ldr	r3, [pc, #224]	; (800040c <MX_GPIO_Init+0xf8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a37      	ldr	r2, [pc, #220]	; (800040c <MX_GPIO_Init+0xf8>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b35      	ldr	r3, [pc, #212]	; (800040c <MX_GPIO_Init+0xf8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0310 	and.w	r3, r3, #16
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000340:	4b32      	ldr	r3, [pc, #200]	; (800040c <MX_GPIO_Init+0xf8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a31      	ldr	r2, [pc, #196]	; (800040c <MX_GPIO_Init+0xf8>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2f      	ldr	r3, [pc, #188]	; (800040c <MX_GPIO_Init+0xf8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b2c      	ldr	r3, [pc, #176]	; (800040c <MX_GPIO_Init+0xf8>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a2b      	ldr	r2, [pc, #172]	; (800040c <MX_GPIO_Init+0xf8>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b29      	ldr	r3, [pc, #164]	; (800040c <MX_GPIO_Init+0xf8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b26      	ldr	r3, [pc, #152]	; (800040c <MX_GPIO_Init+0xf8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a25      	ldr	r2, [pc, #148]	; (800040c <MX_GPIO_Init+0xf8>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <MX_GPIO_Init+0xf8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800038e:	4820      	ldr	r0, [pc, #128]	; (8000410 <MX_GPIO_Init+0xfc>)
 8000390:	f000 fd7b 	bl	8000e8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000394:	2310      	movs	r3, #16
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <MX_GPIO_Init+0x100>)
 800039a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	481c      	ldr	r0, [pc, #112]	; (8000418 <MX_GPIO_Init+0x104>)
 80003a8:	f000 fbd4 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80003ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	4619      	mov	r1, r3
 80003c4:	4812      	ldr	r0, [pc, #72]	; (8000410 <MX_GPIO_Init+0xfc>)
 80003c6:	f000 fbc5 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003ca:	2304      	movs	r3, #4
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_GPIO_Init+0x100>)
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	480f      	ldr	r0, [pc, #60]	; (800041c <MX_GPIO_Init+0x108>)
 80003de:	f000 fbb9 	bl	8000b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	2008      	movs	r0, #8
 80003e8:	f000 fb7d 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80003ec:	2008      	movs	r0, #8
 80003ee:	f000 fb96 	bl	8000b1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	200a      	movs	r0, #10
 80003f8:	f000 fb75 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80003fc:	200a      	movs	r0, #10
 80003fe:	f000 fb8e 	bl	8000b1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	40010c00 	.word	0x40010c00
 8000414:	10210000 	.word	0x10210000
 8000418:	40010800 	.word	0x40010800
 800041c:	40011400 	.word	0x40011400

08000420 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	80fb      	strh	r3, [r7, #6]
  if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 800042a:	2104      	movs	r1, #4
 800042c:	481f      	ldr	r0, [pc, #124]	; (80004ac <HAL_GPIO_EXTI_Callback+0x8c>)
 800042e:	f000 fd15 	bl	8000e5c <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d116      	bne.n	8000466 <HAL_GPIO_EXTI_Callback+0x46>
    if (state == STATE_IDLE) {
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x90>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d112      	bne.n	8000466 <HAL_GPIO_EXTI_Callback+0x46>
      state = STATE_RUN;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000446:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Base_Start_IT(&htim2);
 800044e:	4819      	ldr	r0, [pc, #100]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000450:	f001 f9ac 	bl	80017ac <HAL_TIM_Base_Start_IT>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045a:	4817      	ldr	r0, [pc, #92]	; (80004b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800045c:	f000 fd15 	bl	8000e8a <HAL_GPIO_WritePin>
      printf("LED ON!\n");
 8000460:	4816      	ldr	r0, [pc, #88]	; (80004bc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000462:	f002 f807 	bl	8002474 <puts>
    }
  }
  if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)) {
 8000466:	2110      	movs	r1, #16
 8000468:	4815      	ldr	r0, [pc, #84]	; (80004c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800046a:	f000 fcf7 	bl	8000e5c <HAL_GPIO_ReadPin>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d116      	bne.n	80004a2 <HAL_GPIO_EXTI_Callback+0x82>
    if (state == STATE_RUN){
 8000474:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d112      	bne.n	80004a2 <HAL_GPIO_EXTI_Callback+0x82>
      state = STATE_IDLE;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_GPIO_EXTI_Callback+0x90>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim2);
 8000482:	480c      	ldr	r0, [pc, #48]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000484:	f001 f9e4 	bl	8001850 <HAL_TIM_Base_Stop_IT>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048e:	480a      	ldr	r0, [pc, #40]	; (80004b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000490:	f000 fcfb 	bl	8000e8a <HAL_GPIO_WritePin>
      printf("LED OFF! LED ON Time = %ld(ms)\n\n", __HAL_TIM_GET_COUNTER(&htim2));
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <HAL_GPIO_EXTI_Callback+0x94>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049a:	4619      	mov	r1, r3
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800049e:	f001 ff63 	bl	8002368 <iprintf>
    }
  }
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40011400 	.word	0x40011400
 80004b0:	2000011c 	.word	0x2000011c
 80004b4:	2000008c 	.word	0x2000008c
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	08003398 	.word	0x08003398
 80004c0:	40010800 	.word	0x40010800
 80004c4:	080033a0 	.word	0x080033a0

080004c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d110      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x32>
    state = STATE_IDLE;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim2);
 80004de:	4809      	ldr	r0, [pc, #36]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80004e0:	f001 f9b6 	bl	8001850 <HAL_TIM_Base_Stop_IT>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ea:	4808      	ldr	r0, [pc, #32]	; (800050c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80004ec:	f000 fccd 	bl	8000e8a <HAL_GPIO_WritePin>
    printf("LED OFF! LED ON Time = %d(ms)\n\n", 5000);
 80004f0:	f241 3188 	movw	r1, #5000	; 0x1388
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80004f6:	f001 ff37 	bl	8002368 <iprintf>
  }
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000008c 	.word	0x2000008c
 8000508:	2000011c 	.word	0x2000011c
 800050c:	40010c00 	.word	0x40010c00
 8000510:	080033c4 	.word	0x080033c4

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_MspInit+0x50>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a11      	ldr	r2, [pc, #68]	; (8000570 <HAL_MspInit+0x50>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_MspInit+0x50>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_MspInit+0x50>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <HAL_MspInit+0x50>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_MspInit+0x50>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fac3 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000560:	2005      	movs	r0, #5
 8000562:	f000 fadc 	bl	8000b1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000584:	d113      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	201c      	movs	r0, #28
 80005a4:	f000 fa9f 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a8:	201c      	movs	r0, #28
 80005aa:	f000 fab8 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <HAL_UART_MspInit+0x88>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d12f      	bne.n	800063c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <HAL_UART_MspInit+0x8c>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a19      	ldr	r2, [pc, #100]	; (8000648 <HAL_UART_MspInit+0x8c>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x8c>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <HAL_UART_MspInit+0x8c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <HAL_UART_MspInit+0x8c>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_UART_MspInit+0x8c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800060c:	2304      	movs	r3, #4
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <HAL_UART_MspInit+0x90>)
 8000620:	f000 fa98 	bl	8000b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000624:	2308      	movs	r3, #8
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <HAL_UART_MspInit+0x90>)
 8000638:	f000 fa8c 	bl	8000b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40004400 	.word	0x40004400
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr

08000692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000696:	f000 f933 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}

0800069e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f000 fc04 	bl	8000ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80006bc:	2010      	movs	r0, #16
 80006be:	f000 fbfd 	bl	8000ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <TIM2_IRQHandler+0x10>)
 80006ce:	f001 f8ed 	bl	80018ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e00a      	b.n	8000704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ee:	f3af 8000 	nop.w
 80006f2:	4601      	mov	r1, r0
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	60ba      	str	r2, [r7, #8]
 80006fa:	b2ca      	uxtb	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3301      	adds	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf0      	blt.n	80006ee <_read+0x12>
  }

  return len;
 800070c:	687b      	ldr	r3, [r7, #4]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	e009      	b.n	800073c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	60ba      	str	r2, [r7, #8]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd0b 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	3301      	adds	r3, #1
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	dbf1      	blt.n	8000728 <_write+0x12>
  }
  return len;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <_close>:

int _close(int file)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000774:	605a      	str	r2, [r3, #4]
  return 0;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <_isatty>:

int _isatty(int file)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000796:	b480      	push	{r7}
 8000798:	b085      	sub	sp, #20
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <_sbrk+0x5c>)
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <_sbrk+0x60>)
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d102      	bne.n	80007d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <_sbrk+0x64>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <_sbrk+0x68>)
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d207      	bcs.n	80007f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e0:	f001 fd90 	bl	8002304 <__errno>
 80007e4:	4603      	mov	r3, r0
 80007e6:	220c      	movs	r2, #12
 80007e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	e009      	b.n	8000804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <_sbrk+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <_sbrk+0x64>)
 8000800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20005000 	.word	0x20005000
 8000810:	00000400 	.word	0x00000400
 8000814:	20000120 	.word	0x20000120
 8000818:	20000138 	.word	0x20000138

0800081c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000828:	f7ff fff8 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800082e:	490c      	ldr	r1, [pc, #48]	; (8000860 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000830:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a09      	ldr	r2, [pc, #36]	; (8000868 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000844:	4c09      	ldr	r4, [pc, #36]	; (800086c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000852:	f001 fd5d 	bl	8002310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fc97 	bl	8000188 <main>
  bx lr
 800085a:	4770      	bx	lr
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000864:	080034b0 	.word	0x080034b0
  ldr r2, =_sbss
 8000868:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800086c:	20000138 	.word	0x20000138

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_Init+0x28>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_Init+0x28>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f923 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	200f      	movs	r0, #15
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff fe46 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40022000 	.word	0x40022000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f93b 	bl	8000b3a <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f903 	bl	8000ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x1c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x20>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <HAL_IncTick+0x20>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000008 	.word	0x20000008
 8000920:	20000124 	.word	0x20000124

08000924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b02      	ldr	r3, [pc, #8]	; (8000934 <HAL_GetTick+0x10>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000124 	.word	0x20000124

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4906      	ldr	r1, [pc, #24]	; (80009d0 <__NVIC_EnableIRQ+0x34>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff90 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff2d 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff42 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff90 	bl	8000a28 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5f 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff35 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffa2 	bl	8000a8c <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b08b      	sub	sp, #44	; 0x2c
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e169      	b.n	8000e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f040 8158 	bne.w	8000e36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a9a      	ldr	r2, [pc, #616]	; (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d05e      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b90:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d875      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000b96:	4a98      	ldr	r2, [pc, #608]	; (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d058      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b9c:	4a96      	ldr	r2, [pc, #600]	; (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d86f      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a96      	ldr	r2, [pc, #600]	; (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d052      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000ba8:	4a94      	ldr	r2, [pc, #592]	; (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d869      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bae:	4a94      	ldr	r2, [pc, #592]	; (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d04c      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bb4:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d863      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bba:	4a92      	ldr	r2, [pc, #584]	; (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d046      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a90      	ldr	r2, [pc, #576]	; (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d85d      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d82a      	bhi.n	8000c20 <HAL_GPIO_Init+0xcc>
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d859      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <HAL_GPIO_Init+0x80>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c29 	.word	0x08000c29
 8000bdc:	08000c3b 	.word	0x08000c3b
 8000be0:	08000c7d 	.word	0x08000c7d
 8000be4:	08000c83 	.word	0x08000c83
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000c83 	.word	0x08000c83
 8000bf0:	08000c83 	.word	0x08000c83
 8000bf4:	08000c83 	.word	0x08000c83
 8000bf8:	08000c83 	.word	0x08000c83
 8000bfc:	08000c83 	.word	0x08000c83
 8000c00:	08000c83 	.word	0x08000c83
 8000c04:	08000c83 	.word	0x08000c83
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c83 	.word	0x08000c83
 8000c10:	08000c83 	.word	0x08000c83
 8000c14:	08000c83 	.word	0x08000c83
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000c45 	.word	0x08000c45
 8000c20:	4a79      	ldr	r2, [pc, #484]	; (8000e08 <HAL_GPIO_Init+0x2b4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c26:	e02c      	b.n	8000c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e029      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	3304      	adds	r3, #4
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e024      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e01f      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	330c      	adds	r3, #12
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e01a      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c56:	2304      	movs	r3, #4
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e013      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	611a      	str	r2, [r3, #16]
          break;
 8000c6e:	e009      	b.n	8000c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	615a      	str	r2, [r3, #20]
          break;
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          break;
 8000c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	; 0xff
 8000c88:	d801      	bhi.n	8000c8e <HAL_GPIO_Init+0x13a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	e001      	b.n	8000c92 <HAL_GPIO_Init+0x13e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3304      	adds	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	; 0xff
 8000c98:	d802      	bhi.n	8000ca0 <HAL_GPIO_Init+0x14c>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x152>
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	3b08      	subs	r3, #8
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	210f      	movs	r1, #15
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	6a39      	ldr	r1, [r7, #32]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80b1 	beq.w	8000e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cec:	4a48      	ldr	r2, [pc, #288]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a40      	ldr	r2, [pc, #256]	; (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d013      	beq.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3f      	ldr	r2, [pc, #252]	; (8000e18 <HAL_GPIO_Init+0x2c4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00d      	beq.n	8000d3c <HAL_GPIO_Init+0x1e8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <HAL_GPIO_Init+0x2c8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x1e4>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_GPIO_Init+0x1e0>
 8000d30:	2303      	movs	r3, #3
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e004      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d40:	2300      	movs	r3, #0
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d52:	492f      	ldr	r1, [pc, #188]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	492c      	ldr	r1, [pc, #176]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4928      	ldr	r1, [pc, #160]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	4922      	ldr	r1, [pc, #136]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	60cb      	str	r3, [r1, #12]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	491e      	ldr	r1, [pc, #120]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	4918      	ldr	r1, [pc, #96]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	604b      	str	r3, [r1, #4]
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4914      	ldr	r1, [pc, #80]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d021      	beq.n	8000e28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	490e      	ldr	r1, [pc, #56]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	600b      	str	r3, [r1, #0]
 8000df0:	e021      	b.n	8000e36 <HAL_GPIO_Init+0x2e2>
 8000df2:	bf00      	nop
 8000df4:	10320000 	.word	0x10320000
 8000df8:	10310000 	.word	0x10310000
 8000dfc:	10220000 	.word	0x10220000
 8000e00:	10210000 	.word	0x10210000
 8000e04:	10120000 	.word	0x10120000
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40011400 	.word	0x40011400
 8000e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	4909      	ldr	r1, [pc, #36]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3301      	adds	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f47f ae8e 	bne.w	8000b68 <HAL_GPIO_Init+0x14>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	372c      	adds	r7, #44	; 0x2c
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	887b      	ldrh	r3, [r7, #2]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e001      	b.n	8000e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	807b      	strh	r3, [r7, #2]
 8000e96:	4613      	mov	r3, r2
 8000e98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e9a:	787b      	ldrb	r3, [r7, #1]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea0:	887a      	ldrh	r2, [r7, #2]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ea6:	e003      	b.n	8000eb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea8:	887b      	ldrh	r3, [r7, #2]
 8000eaa:	041a      	lsls	r2, r3, #16
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	611a      	str	r2, [r3, #16]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff faa0 	bl	8000420 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e272      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8087 	beq.w	800101a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d00c      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f18:	4b8f      	ldr	r3, [pc, #572]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d112      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
 8000f24:	4b8c      	ldr	r3, [pc, #560]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d10b      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f32:	4b89      	ldr	r3, [pc, #548]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d06c      	beq.n	8001018 <HAL_RCC_OscConfig+0x12c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d168      	bne.n	8001018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e24c      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x76>
 8000f54:	4b80      	ldr	r3, [pc, #512]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a7f      	ldr	r2, [pc, #508]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e02e      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x98>
 8000f6a:	4b7b      	ldr	r3, [pc, #492]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7a      	ldr	r2, [pc, #488]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b78      	ldr	r3, [pc, #480]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a77      	ldr	r2, [pc, #476]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e01d      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xbc>
 8000f8e:	4b72      	ldr	r3, [pc, #456]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a71      	ldr	r2, [pc, #452]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b68      	ldr	r3, [pc, #416]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a67      	ldr	r2, [pc, #412]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcac 	bl	8000924 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fca8 	bl	8000924 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e200      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe4>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc98 	bl	8000924 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc94 	bl	8000924 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1ec      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x10c>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d063      	beq.n	80010ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d11c      	bne.n	8001078 <HAL_RCC_OscConfig+0x18c>
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	4b43      	ldr	r3, [pc, #268]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_RCC_OscConfig+0x176>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d001      	beq.n	8001062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e1c0      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001062:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4939      	ldr	r1, [pc, #228]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	e03a      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x270>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fc4d 	bl	8000924 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fc49 	bl	8000924 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e1a1      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e015      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <HAL_RCC_OscConfig+0x270>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fc2c 	bl	8000924 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc28 	bl	8000924 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e180      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d03a      	beq.n	8001170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d019      	beq.n	8001136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_OscConfig+0x274>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fc0c 	bl	8000924 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fc08 	bl	8000924 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e160      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f000 face 	bl	80016d0 <RCC_Delay>
 8001134:	e01c      	b.n	8001170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_RCC_OscConfig+0x274>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fbf2 	bl	8000924 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001142:	e00f      	b.n	8001164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fbee 	bl	8000924 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d908      	bls.n	8001164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e146      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	42420000 	.word	0x42420000
 8001160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001164:	4b92      	ldr	r3, [pc, #584]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e9      	bne.n	8001144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a6 	beq.w	80012ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001182:	4b8b      	ldr	r3, [pc, #556]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10d      	bne.n	80011aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a87      	ldr	r2, [pc, #540]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b82      	ldr	r3, [pc, #520]	; (80013b4 <HAL_RCC_OscConfig+0x4c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b6:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <HAL_RCC_OscConfig+0x4c8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a7e      	ldr	r2, [pc, #504]	; (80013b4 <HAL_RCC_OscConfig+0x4c8>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fbaf 	bl	8000924 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fbab 	bl	8000924 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e103      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4b75      	ldr	r3, [pc, #468]	; (80013b4 <HAL_RCC_OscConfig+0x4c8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x312>
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a6e      	ldr	r2, [pc, #440]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e02d      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x334>
 8001206:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a69      	ldr	r2, [pc, #420]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a66      	ldr	r2, [pc, #408]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	e01c      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x356>
 8001228:	4b61      	ldr	r3, [pc, #388]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a60      	ldr	r2, [pc, #384]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 8001242:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a5a      	ldr	r2, [pc, #360]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a57      	ldr	r2, [pc, #348]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d015      	beq.n	800128e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb5f 	bl	8000924 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fb5b 	bl	8000924 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0b1      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	4b4b      	ldr	r3, [pc, #300]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ee      	beq.n	800126a <HAL_RCC_OscConfig+0x37e>
 800128c:	e014      	b.n	80012b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb49 	bl	8000924 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fb45 	bl	8000924 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e09b      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a3b      	ldr	r2, [pc, #236]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8087 	beq.w	80013e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d061      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d146      	bne.n	8001376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb19 	bl	8000924 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fb15 	bl	8000924 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e06d      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4921      	ldr	r1, [pc, #132]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a19      	ldr	r1, [r3, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	430b      	orrs	r3, r1
 8001342:	491b      	ldr	r1, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x4cc>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fae9 	bl	8000924 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fae5 	bl	8000924 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e03d      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x46a>
 8001374:	e035      	b.n	80013e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_RCC_OscConfig+0x4cc>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fad2 	bl	8000924 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff face 	bl	8000924 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e026      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x498>
 80013a2:	e01e      	b.n	80013e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d107      	bne.n	80013bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e019      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40007000 	.word	0x40007000
 80013b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x500>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0d0      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001404:	4b6a      	ldr	r3, [pc, #424]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d910      	bls.n	8001434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 0207 	bic.w	r2, r3, #7
 800141a:	4965      	ldr	r1, [pc, #404]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0b8      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800146e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	494d      	ldr	r1, [pc, #308]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d040      	beq.n	8001510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d115      	bne.n	80014ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e07f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e073      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e06b      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f023 0203 	bic.w	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4936      	ldr	r1, [pc, #216]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e0:	f7ff fa20 	bl	8000924 <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f7ff fa1c 	bl	8000924 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e053      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 020c 	and.w	r2, r3, #12
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	429a      	cmp	r2, r3
 800150e:	d1eb      	bne.n	80014e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d210      	bcs.n	8001540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 0207 	bic.w	r2, r3, #7
 8001526:	4922      	ldr	r1, [pc, #136]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e032      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	490e      	ldr	r1, [pc, #56]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800157e:	f000 f821 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8001582:	4602      	mov	r2, r0
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001590:	5ccb      	ldrb	r3, [r1, r3]
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1cc>)
 8001598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1d0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f97e 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40022000 	.word	0x40022000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	080033e4 	.word	0x080033e4
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_RCC_GetSysClockFreq+0x94>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d002      	beq.n	80015f4 <HAL_RCC_GetSysClockFreq+0x30>
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d003      	beq.n	80015fa <HAL_RCC_GetSysClockFreq+0x36>
 80015f2:	e027      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_GetSysClockFreq+0x98>)
 80015f6:	613b      	str	r3, [r7, #16]
      break;
 80015f8:	e027      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	0c9b      	lsrs	r3, r3, #18
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d010      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_RCC_GetSysClockFreq+0x94>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	0c5b      	lsrs	r3, r3, #17
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <HAL_RCC_GetSysClockFreq+0xa0>)
 800161e:	5cd3      	ldrb	r3, [r2, r3]
 8001620:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_RCC_GetSysClockFreq+0x98>)
 8001626:	fb03 f202 	mul.w	r2, r3, r2
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e004      	b.n	800163e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001638:	fb02 f303 	mul.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	613b      	str	r3, [r7, #16]
      break;
 8001642:	e002      	b.n	800164a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_RCC_GetSysClockFreq+0x98>)
 8001646:	613b      	str	r3, [r7, #16]
      break;
 8001648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800164a:	693b      	ldr	r3, [r7, #16]
}
 800164c:	4618      	mov	r0, r3
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	007a1200 	.word	0x007a1200
 8001660:	080033fc 	.word	0x080033fc
 8001664:	0800340c 	.word	0x0800340c
 8001668:	003d0900 	.word	0x003d0900

0800166c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <HAL_RCC_GetHCLKFreq+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000000 	.word	0x20000000

08001680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001684:	f7ff fff2 	bl	800166c <HAL_RCC_GetHCLKFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	4903      	ldr	r1, [pc, #12]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	080033f4 	.word	0x080033f4

080016a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016ac:	f7ff ffde 	bl	800166c <HAL_RCC_GetHCLKFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4903      	ldr	r1, [pc, #12]	; (80016cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	080033f4 	.word	0x080033f4

080016d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <RCC_Delay+0x34>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <RCC_Delay+0x38>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0a5b      	lsrs	r3, r3, #9
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016ec:	bf00      	nop
  }
  while (Delay --);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1e5a      	subs	r2, r3, #1
 80016f2:	60fa      	str	r2, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f9      	bne.n	80016ec <RCC_Delay+0x1c>
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000000 	.word	0x20000000
 8001708:	10624dd3 	.word	0x10624dd3

0800170c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e041      	b.n	80017a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff1e 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3304      	adds	r3, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f000 faa2 	bl	8001c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d001      	beq.n	80017c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e03a      	b.n	800183a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_TIM_Base_Start_IT+0x98>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00e      	beq.n	8001804 <HAL_TIM_Base_Start_IT+0x58>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ee:	d009      	beq.n	8001804 <HAL_TIM_Base_Start_IT+0x58>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_TIM_Base_Start_IT+0x9c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d004      	beq.n	8001804 <HAL_TIM_Base_Start_IT+0x58>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <HAL_TIM_Base_Start_IT+0xa0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b06      	cmp	r3, #6
 8001814:	d010      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001826:	e007      	b.n	8001838 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40000400 	.word	0x40000400
 800184c:	40000800 	.word	0x40000800

08001850 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a1a      	ldr	r2, [r3, #32]
 800186e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_TIM_Base_Stop_IT+0x48>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6a1a      	ldr	r2, [r3, #32]
 800187e:	f240 4344 	movw	r3, #1092	; 0x444
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d107      	bne.n	8001898 <HAL_TIM_Base_Stop_IT+0x48>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d122      	bne.n	8001908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d11b      	bne.n	8001908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0202 	mvn.w	r2, #2
 80018d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f9b4 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 80018f4:	e005      	b.n	8001902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f9a7 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f9b6 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b04      	cmp	r3, #4
 8001914:	d122      	bne.n	800195c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b04      	cmp	r3, #4
 8001922:	d11b      	bne.n	800195c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0204 	mvn.w	r2, #4
 800192c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2202      	movs	r2, #2
 8001932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f98a 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8001948:	e005      	b.n	8001956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f97d 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f98c 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b08      	cmp	r3, #8
 8001968:	d122      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b08      	cmp	r3, #8
 8001976:	d11b      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0208 	mvn.w	r2, #8
 8001980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2204      	movs	r2, #4
 8001986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f960 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 800199c:	e005      	b.n	80019aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 f953 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f962 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d122      	bne.n	8001a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d11b      	bne.n	8001a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0210 	mvn.w	r2, #16
 80019d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2208      	movs	r2, #8
 80019da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f936 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 80019f0:	e005      	b.n	80019fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f929 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f938 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10e      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d107      	bne.n	8001a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0201 	mvn.w	r2, #1
 8001a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fd4c 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	2b80      	cmp	r3, #128	; 0x80
 8001a3c:	d10e      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d107      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fa7b 	bl	8001f52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	2b40      	cmp	r3, #64	; 0x40
 8001a68:	d10e      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a74:	2b40      	cmp	r3, #64	; 0x40
 8001a76:	d107      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8fc 	bl	8001c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d10e      	bne.n	8001ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d107      	bne.n	8001ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0220 	mvn.w	r2, #32
 8001aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fa46 	bl	8001f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e0b4      	b.n	8001c42 <HAL_TIM_ConfigClockSource+0x186>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b10:	d03e      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0xd4>
 8001b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b16:	f200 8087 	bhi.w	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1e:	f000 8086 	beq.w	8001c2e <HAL_TIM_ConfigClockSource+0x172>
 8001b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b26:	d87f      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b28:	2b70      	cmp	r3, #112	; 0x70
 8001b2a:	d01a      	beq.n	8001b62 <HAL_TIM_ConfigClockSource+0xa6>
 8001b2c:	2b70      	cmp	r3, #112	; 0x70
 8001b2e:	d87b      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b30:	2b60      	cmp	r3, #96	; 0x60
 8001b32:	d050      	beq.n	8001bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8001b34:	2b60      	cmp	r3, #96	; 0x60
 8001b36:	d877      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b38:	2b50      	cmp	r3, #80	; 0x50
 8001b3a:	d03c      	beq.n	8001bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8001b3c:	2b50      	cmp	r3, #80	; 0x50
 8001b3e:	d873      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b40:	2b40      	cmp	r3, #64	; 0x40
 8001b42:	d058      	beq.n	8001bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8001b44:	2b40      	cmp	r3, #64	; 0x40
 8001b46:	d86f      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b48:	2b30      	cmp	r3, #48	; 0x30
 8001b4a:	d064      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0x15a>
 8001b4c:	2b30      	cmp	r3, #48	; 0x30
 8001b4e:	d86b      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d060      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0x15a>
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d867      	bhi.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d05c      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0x15a>
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d05a      	beq.n	8001c16 <HAL_TIM_ConfigClockSource+0x15a>
 8001b60:	e062      	b.n	8001c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f000 f968 	bl	8001e46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	609a      	str	r2, [r3, #8]
      break;
 8001b8e:	e04f      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6899      	ldr	r1, [r3, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f000 f951 	bl	8001e46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb2:	609a      	str	r2, [r3, #8]
      break;
 8001bb4:	e03c      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f000 f8c8 	bl	8001d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2150      	movs	r1, #80	; 0x50
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f91f 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001bd4:	e02c      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f000 f8e6 	bl	8001db4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2160      	movs	r1, #96	; 0x60
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f90f 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001bf4:	e01c      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	461a      	mov	r2, r3
 8001c04:	f000 f8a8 	bl	8001d58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f8ff 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001c14:	e00c      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f000 f8f6 	bl	8001e12 <TIM_ITRx_SetConfig>
      break;
 8001c26:	e003      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c2c:	e000      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
	...

08001c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <TIM_Base_SetConfig+0xb8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00b      	beq.n	8001cc4 <TIM_Base_SetConfig+0x30>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d007      	beq.n	8001cc4 <TIM_Base_SetConfig+0x30>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <TIM_Base_SetConfig+0xbc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <TIM_Base_SetConfig+0x30>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <TIM_Base_SetConfig+0xc0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d108      	bne.n	8001cd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <TIM_Base_SetConfig+0xb8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00b      	beq.n	8001cf6 <TIM_Base_SetConfig+0x62>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d007      	beq.n	8001cf6 <TIM_Base_SetConfig+0x62>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <TIM_Base_SetConfig+0xbc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <TIM_Base_SetConfig+0x62>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <TIM_Base_SetConfig+0xc0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d108      	bne.n	8001d08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <TIM_Base_SetConfig+0xb8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	615a      	str	r2, [r3, #20]
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800

08001d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	f023 0201 	bic.w	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f023 030a 	bic.w	r3, r3, #10
 8001d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	621a      	str	r2, [r3, #32]
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f023 0210 	bic.w	r2, r3, #16
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	031b      	lsls	r3, r3, #12
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001df0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	621a      	str	r2, [r3, #32]
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f043 0307 	orr.w	r3, r3, #7
 8001e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	609a      	str	r2, [r3, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b087      	sub	sp, #28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	021a      	lsls	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	609a      	str	r2, [r3, #8]
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e046      	b.n	8001f2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00e      	beq.n	8001efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d009      	beq.n	8001efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d004      	beq.n	8001efe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d10c      	bne.n	8001f18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	40012c00 	.word	0x40012c00
 8001f38:	40000400 	.word	0x40000400
 8001f3c:	40000800 	.word	0x40000800

08001f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e042      	b.n	8001ffc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fb16 	bl	80005bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	; 0x24
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f91d 	bl	80021e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	d16d      	bne.n	8002100 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_UART_Transmit+0x2c>
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e066      	b.n	8002102 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	; 0x21
 800203e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002042:	f7fe fc6f 	bl	8000924 <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205c:	d108      	bne.n	8002070 <HAL_UART_Transmit+0x6c>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e003      	b.n	8002078 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002078:	e02a      	b.n	80020d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2200      	movs	r2, #0
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f840 	bl	800210a <UART_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e036      	b.n	8002102 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	3302      	adds	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	e007      	b.n	80020c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	3301      	adds	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1cf      	bne.n	800207a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f810 	bl	800210a <UART_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e006      	b.n	8002102 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002100:	2302      	movs	r3, #2
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b090      	sub	sp, #64	; 0x40
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	e050      	b.n	80021be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d04c      	beq.n	80021be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <UART_WaitOnFlagUntilTimeout+0x30>
 800212a:	f7fe fbfb 	bl	8000924 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002136:	429a      	cmp	r2, r3
 8002138:	d241      	bcs.n	80021be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	330c      	adds	r3, #12
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	e853 3f00 	ldrex	r3, [r3]
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	330c      	adds	r3, #12
 8002158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800215a:	637a      	str	r2, [r7, #52]	; 0x34
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002162:	e841 2300 	strex	r3, r2, [r1]
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1e5      	bne.n	800213a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3314      	adds	r3, #20
 8002174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	e853 3f00 	ldrex	r3, [r3]
 800217c:	613b      	str	r3, [r7, #16]
   return(result);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3314      	adds	r3, #20
 800218c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218e:	623a      	str	r2, [r7, #32]
 8002190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002192:	69f9      	ldr	r1, [r7, #28]
 8002194:	6a3a      	ldr	r2, [r7, #32]
 8002196:	e841 2300 	strex	r3, r2, [r1]
 800219a:	61bb      	str	r3, [r7, #24]
   return(result);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1e5      	bne.n	800216e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e00f      	b.n	80021de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d09f      	beq.n	800211c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3740      	adds	r7, #64	; 0x40
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002222:	f023 030c 	bic.w	r3, r3, #12
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	430b      	orrs	r3, r1
 800222e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <UART_SetConfig+0x114>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d103      	bne.n	8002258 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002250:	f7ff fa2a 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	e002      	b.n	800225e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002258:	f7ff fa12 	bl	8001680 <HAL_RCC_GetPCLK1Freq>
 800225c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	009a      	lsls	r2, r3, #2
 8002268:	441a      	add	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <UART_SetConfig+0x118>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	0119      	lsls	r1, r3, #4
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	009a      	lsls	r2, r3, #2
 8002288:	441a      	add	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fbb2 f2f3 	udiv	r2, r2, r3
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <UART_SetConfig+0x118>)
 8002296:	fba3 0302 	umull	r0, r3, r3, r2
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2064      	movs	r0, #100	; 0x64
 800229e:	fb00 f303 	mul.w	r3, r0, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <UART_SetConfig+0x118>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b4:	4419      	add	r1, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <UART_SetConfig+0x118>)
 80022ce:	fba3 0302 	umull	r0, r3, r3, r2
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2064      	movs	r0, #100	; 0x64
 80022d6:	fb00 f303 	mul.w	r3, r0, r3
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	3332      	adds	r3, #50	; 0x32
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <UART_SetConfig+0x118>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	440a      	add	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40013800 	.word	0x40013800
 8002300:	51eb851f 	.word	0x51eb851f

08002304 <__errno>:
 8002304:	4b01      	ldr	r3, [pc, #4]	; (800230c <__errno+0x8>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c

08002310 <__libc_init_array>:
 8002310:	b570      	push	{r4, r5, r6, lr}
 8002312:	2600      	movs	r6, #0
 8002314:	4d0c      	ldr	r5, [pc, #48]	; (8002348 <__libc_init_array+0x38>)
 8002316:	4c0d      	ldr	r4, [pc, #52]	; (800234c <__libc_init_array+0x3c>)
 8002318:	1b64      	subs	r4, r4, r5
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	42a6      	cmp	r6, r4
 800231e:	d109      	bne.n	8002334 <__libc_init_array+0x24>
 8002320:	f001 f82c 	bl	800337c <_init>
 8002324:	2600      	movs	r6, #0
 8002326:	4d0a      	ldr	r5, [pc, #40]	; (8002350 <__libc_init_array+0x40>)
 8002328:	4c0a      	ldr	r4, [pc, #40]	; (8002354 <__libc_init_array+0x44>)
 800232a:	1b64      	subs	r4, r4, r5
 800232c:	10a4      	asrs	r4, r4, #2
 800232e:	42a6      	cmp	r6, r4
 8002330:	d105      	bne.n	800233e <__libc_init_array+0x2e>
 8002332:	bd70      	pop	{r4, r5, r6, pc}
 8002334:	f855 3b04 	ldr.w	r3, [r5], #4
 8002338:	4798      	blx	r3
 800233a:	3601      	adds	r6, #1
 800233c:	e7ee      	b.n	800231c <__libc_init_array+0xc>
 800233e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002342:	4798      	blx	r3
 8002344:	3601      	adds	r6, #1
 8002346:	e7f2      	b.n	800232e <__libc_init_array+0x1e>
 8002348:	080034a8 	.word	0x080034a8
 800234c:	080034a8 	.word	0x080034a8
 8002350:	080034a8 	.word	0x080034a8
 8002354:	080034ac 	.word	0x080034ac

08002358 <memset>:
 8002358:	4603      	mov	r3, r0
 800235a:	4402      	add	r2, r0
 800235c:	4293      	cmp	r3, r2
 800235e:	d100      	bne.n	8002362 <memset+0xa>
 8002360:	4770      	bx	lr
 8002362:	f803 1b01 	strb.w	r1, [r3], #1
 8002366:	e7f9      	b.n	800235c <memset+0x4>

08002368 <iprintf>:
 8002368:	b40f      	push	{r0, r1, r2, r3}
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <iprintf+0x2c>)
 800236c:	b513      	push	{r0, r1, r4, lr}
 800236e:	681c      	ldr	r4, [r3, #0]
 8002370:	b124      	cbz	r4, 800237c <iprintf+0x14>
 8002372:	69a3      	ldr	r3, [r4, #24]
 8002374:	b913      	cbnz	r3, 800237c <iprintf+0x14>
 8002376:	4620      	mov	r0, r4
 8002378:	f000 fa5a 	bl	8002830 <__sinit>
 800237c:	ab05      	add	r3, sp, #20
 800237e:	4620      	mov	r0, r4
 8002380:	9a04      	ldr	r2, [sp, #16]
 8002382:	68a1      	ldr	r1, [r4, #8]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	f000 fc5d 	bl	8002c44 <_vfiprintf_r>
 800238a:	b002      	add	sp, #8
 800238c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002390:	b004      	add	sp, #16
 8002392:	4770      	bx	lr
 8002394:	2000000c 	.word	0x2000000c

08002398 <_puts_r>:
 8002398:	b570      	push	{r4, r5, r6, lr}
 800239a:	460e      	mov	r6, r1
 800239c:	4605      	mov	r5, r0
 800239e:	b118      	cbz	r0, 80023a8 <_puts_r+0x10>
 80023a0:	6983      	ldr	r3, [r0, #24]
 80023a2:	b90b      	cbnz	r3, 80023a8 <_puts_r+0x10>
 80023a4:	f000 fa44 	bl	8002830 <__sinit>
 80023a8:	69ab      	ldr	r3, [r5, #24]
 80023aa:	68ac      	ldr	r4, [r5, #8]
 80023ac:	b913      	cbnz	r3, 80023b4 <_puts_r+0x1c>
 80023ae:	4628      	mov	r0, r5
 80023b0:	f000 fa3e 	bl	8002830 <__sinit>
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <_puts_r+0xd0>)
 80023b6:	429c      	cmp	r4, r3
 80023b8:	d120      	bne.n	80023fc <_puts_r+0x64>
 80023ba:	686c      	ldr	r4, [r5, #4]
 80023bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023be:	07db      	lsls	r3, r3, #31
 80023c0:	d405      	bmi.n	80023ce <_puts_r+0x36>
 80023c2:	89a3      	ldrh	r3, [r4, #12]
 80023c4:	0598      	lsls	r0, r3, #22
 80023c6:	d402      	bmi.n	80023ce <_puts_r+0x36>
 80023c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ca:	f000 facf 	bl	800296c <__retarget_lock_acquire_recursive>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	0719      	lsls	r1, r3, #28
 80023d2:	d51d      	bpl.n	8002410 <_puts_r+0x78>
 80023d4:	6923      	ldr	r3, [r4, #16]
 80023d6:	b1db      	cbz	r3, 8002410 <_puts_r+0x78>
 80023d8:	3e01      	subs	r6, #1
 80023da:	68a3      	ldr	r3, [r4, #8]
 80023dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60a3      	str	r3, [r4, #8]
 80023e4:	bb39      	cbnz	r1, 8002436 <_puts_r+0x9e>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da38      	bge.n	800245c <_puts_r+0xc4>
 80023ea:	4622      	mov	r2, r4
 80023ec:	210a      	movs	r1, #10
 80023ee:	4628      	mov	r0, r5
 80023f0:	f000 f848 	bl	8002484 <__swbuf_r>
 80023f4:	3001      	adds	r0, #1
 80023f6:	d011      	beq.n	800241c <_puts_r+0x84>
 80023f8:	250a      	movs	r5, #10
 80023fa:	e011      	b.n	8002420 <_puts_r+0x88>
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <_puts_r+0xd4>)
 80023fe:	429c      	cmp	r4, r3
 8002400:	d101      	bne.n	8002406 <_puts_r+0x6e>
 8002402:	68ac      	ldr	r4, [r5, #8]
 8002404:	e7da      	b.n	80023bc <_puts_r+0x24>
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <_puts_r+0xd8>)
 8002408:	429c      	cmp	r4, r3
 800240a:	bf08      	it	eq
 800240c:	68ec      	ldreq	r4, [r5, #12]
 800240e:	e7d5      	b.n	80023bc <_puts_r+0x24>
 8002410:	4621      	mov	r1, r4
 8002412:	4628      	mov	r0, r5
 8002414:	f000 f888 	bl	8002528 <__swsetup_r>
 8002418:	2800      	cmp	r0, #0
 800241a:	d0dd      	beq.n	80023d8 <_puts_r+0x40>
 800241c:	f04f 35ff 	mov.w	r5, #4294967295
 8002420:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002422:	07da      	lsls	r2, r3, #31
 8002424:	d405      	bmi.n	8002432 <_puts_r+0x9a>
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	059b      	lsls	r3, r3, #22
 800242a:	d402      	bmi.n	8002432 <_puts_r+0x9a>
 800242c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800242e:	f000 fa9e 	bl	800296e <__retarget_lock_release_recursive>
 8002432:	4628      	mov	r0, r5
 8002434:	bd70      	pop	{r4, r5, r6, pc}
 8002436:	2b00      	cmp	r3, #0
 8002438:	da04      	bge.n	8002444 <_puts_r+0xac>
 800243a:	69a2      	ldr	r2, [r4, #24]
 800243c:	429a      	cmp	r2, r3
 800243e:	dc06      	bgt.n	800244e <_puts_r+0xb6>
 8002440:	290a      	cmp	r1, #10
 8002442:	d004      	beq.n	800244e <_puts_r+0xb6>
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	6022      	str	r2, [r4, #0]
 800244a:	7019      	strb	r1, [r3, #0]
 800244c:	e7c5      	b.n	80023da <_puts_r+0x42>
 800244e:	4622      	mov	r2, r4
 8002450:	4628      	mov	r0, r5
 8002452:	f000 f817 	bl	8002484 <__swbuf_r>
 8002456:	3001      	adds	r0, #1
 8002458:	d1bf      	bne.n	80023da <_puts_r+0x42>
 800245a:	e7df      	b.n	800241c <_puts_r+0x84>
 800245c:	250a      	movs	r5, #10
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	6022      	str	r2, [r4, #0]
 8002464:	701d      	strb	r5, [r3, #0]
 8002466:	e7db      	b.n	8002420 <_puts_r+0x88>
 8002468:	08003434 	.word	0x08003434
 800246c:	08003454 	.word	0x08003454
 8002470:	08003414 	.word	0x08003414

08002474 <puts>:
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <puts+0xc>)
 8002476:	4601      	mov	r1, r0
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f7ff bf8d 	b.w	8002398 <_puts_r>
 800247e:	bf00      	nop
 8002480:	2000000c 	.word	0x2000000c

08002484 <__swbuf_r>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	460e      	mov	r6, r1
 8002488:	4614      	mov	r4, r2
 800248a:	4605      	mov	r5, r0
 800248c:	b118      	cbz	r0, 8002496 <__swbuf_r+0x12>
 800248e:	6983      	ldr	r3, [r0, #24]
 8002490:	b90b      	cbnz	r3, 8002496 <__swbuf_r+0x12>
 8002492:	f000 f9cd 	bl	8002830 <__sinit>
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <__swbuf_r+0x98>)
 8002498:	429c      	cmp	r4, r3
 800249a:	d12b      	bne.n	80024f4 <__swbuf_r+0x70>
 800249c:	686c      	ldr	r4, [r5, #4]
 800249e:	69a3      	ldr	r3, [r4, #24]
 80024a0:	60a3      	str	r3, [r4, #8]
 80024a2:	89a3      	ldrh	r3, [r4, #12]
 80024a4:	071a      	lsls	r2, r3, #28
 80024a6:	d52f      	bpl.n	8002508 <__swbuf_r+0x84>
 80024a8:	6923      	ldr	r3, [r4, #16]
 80024aa:	b36b      	cbz	r3, 8002508 <__swbuf_r+0x84>
 80024ac:	6923      	ldr	r3, [r4, #16]
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	b2f6      	uxtb	r6, r6
 80024b2:	1ac0      	subs	r0, r0, r3
 80024b4:	6963      	ldr	r3, [r4, #20]
 80024b6:	4637      	mov	r7, r6
 80024b8:	4283      	cmp	r3, r0
 80024ba:	dc04      	bgt.n	80024c6 <__swbuf_r+0x42>
 80024bc:	4621      	mov	r1, r4
 80024be:	4628      	mov	r0, r5
 80024c0:	f000 f922 	bl	8002708 <_fflush_r>
 80024c4:	bb30      	cbnz	r0, 8002514 <__swbuf_r+0x90>
 80024c6:	68a3      	ldr	r3, [r4, #8]
 80024c8:	3001      	adds	r0, #1
 80024ca:	3b01      	subs	r3, #1
 80024cc:	60a3      	str	r3, [r4, #8]
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	6022      	str	r2, [r4, #0]
 80024d4:	701e      	strb	r6, [r3, #0]
 80024d6:	6963      	ldr	r3, [r4, #20]
 80024d8:	4283      	cmp	r3, r0
 80024da:	d004      	beq.n	80024e6 <__swbuf_r+0x62>
 80024dc:	89a3      	ldrh	r3, [r4, #12]
 80024de:	07db      	lsls	r3, r3, #31
 80024e0:	d506      	bpl.n	80024f0 <__swbuf_r+0x6c>
 80024e2:	2e0a      	cmp	r6, #10
 80024e4:	d104      	bne.n	80024f0 <__swbuf_r+0x6c>
 80024e6:	4621      	mov	r1, r4
 80024e8:	4628      	mov	r0, r5
 80024ea:	f000 f90d 	bl	8002708 <_fflush_r>
 80024ee:	b988      	cbnz	r0, 8002514 <__swbuf_r+0x90>
 80024f0:	4638      	mov	r0, r7
 80024f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <__swbuf_r+0x9c>)
 80024f6:	429c      	cmp	r4, r3
 80024f8:	d101      	bne.n	80024fe <__swbuf_r+0x7a>
 80024fa:	68ac      	ldr	r4, [r5, #8]
 80024fc:	e7cf      	b.n	800249e <__swbuf_r+0x1a>
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <__swbuf_r+0xa0>)
 8002500:	429c      	cmp	r4, r3
 8002502:	bf08      	it	eq
 8002504:	68ec      	ldreq	r4, [r5, #12]
 8002506:	e7ca      	b.n	800249e <__swbuf_r+0x1a>
 8002508:	4621      	mov	r1, r4
 800250a:	4628      	mov	r0, r5
 800250c:	f000 f80c 	bl	8002528 <__swsetup_r>
 8002510:	2800      	cmp	r0, #0
 8002512:	d0cb      	beq.n	80024ac <__swbuf_r+0x28>
 8002514:	f04f 37ff 	mov.w	r7, #4294967295
 8002518:	e7ea      	b.n	80024f0 <__swbuf_r+0x6c>
 800251a:	bf00      	nop
 800251c:	08003434 	.word	0x08003434
 8002520:	08003454 	.word	0x08003454
 8002524:	08003414 	.word	0x08003414

08002528 <__swsetup_r>:
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <__swsetup_r+0xcc>)
 800252a:	b570      	push	{r4, r5, r6, lr}
 800252c:	681d      	ldr	r5, [r3, #0]
 800252e:	4606      	mov	r6, r0
 8002530:	460c      	mov	r4, r1
 8002532:	b125      	cbz	r5, 800253e <__swsetup_r+0x16>
 8002534:	69ab      	ldr	r3, [r5, #24]
 8002536:	b913      	cbnz	r3, 800253e <__swsetup_r+0x16>
 8002538:	4628      	mov	r0, r5
 800253a:	f000 f979 	bl	8002830 <__sinit>
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <__swsetup_r+0xd0>)
 8002540:	429c      	cmp	r4, r3
 8002542:	d10f      	bne.n	8002564 <__swsetup_r+0x3c>
 8002544:	686c      	ldr	r4, [r5, #4]
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800254c:	0719      	lsls	r1, r3, #28
 800254e:	d42c      	bmi.n	80025aa <__swsetup_r+0x82>
 8002550:	06dd      	lsls	r5, r3, #27
 8002552:	d411      	bmi.n	8002578 <__swsetup_r+0x50>
 8002554:	2309      	movs	r3, #9
 8002556:	6033      	str	r3, [r6, #0]
 8002558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	81a3      	strh	r3, [r4, #12]
 8002562:	e03e      	b.n	80025e2 <__swsetup_r+0xba>
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <__swsetup_r+0xd4>)
 8002566:	429c      	cmp	r4, r3
 8002568:	d101      	bne.n	800256e <__swsetup_r+0x46>
 800256a:	68ac      	ldr	r4, [r5, #8]
 800256c:	e7eb      	b.n	8002546 <__swsetup_r+0x1e>
 800256e:	4b24      	ldr	r3, [pc, #144]	; (8002600 <__swsetup_r+0xd8>)
 8002570:	429c      	cmp	r4, r3
 8002572:	bf08      	it	eq
 8002574:	68ec      	ldreq	r4, [r5, #12]
 8002576:	e7e6      	b.n	8002546 <__swsetup_r+0x1e>
 8002578:	0758      	lsls	r0, r3, #29
 800257a:	d512      	bpl.n	80025a2 <__swsetup_r+0x7a>
 800257c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800257e:	b141      	cbz	r1, 8002592 <__swsetup_r+0x6a>
 8002580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002584:	4299      	cmp	r1, r3
 8002586:	d002      	beq.n	800258e <__swsetup_r+0x66>
 8002588:	4630      	mov	r0, r6
 800258a:	f000 fa57 	bl	8002a3c <_free_r>
 800258e:	2300      	movs	r3, #0
 8002590:	6363      	str	r3, [r4, #52]	; 0x34
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	6063      	str	r3, [r4, #4]
 800259e:	6923      	ldr	r3, [r4, #16]
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	b94b      	cbnz	r3, 80025c2 <__swsetup_r+0x9a>
 80025ae:	89a3      	ldrh	r3, [r4, #12]
 80025b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b8:	d003      	beq.n	80025c2 <__swsetup_r+0x9a>
 80025ba:	4621      	mov	r1, r4
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 f9fd 	bl	80029bc <__smakebuf_r>
 80025c2:	89a0      	ldrh	r0, [r4, #12]
 80025c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025c8:	f010 0301 	ands.w	r3, r0, #1
 80025cc:	d00a      	beq.n	80025e4 <__swsetup_r+0xbc>
 80025ce:	2300      	movs	r3, #0
 80025d0:	60a3      	str	r3, [r4, #8]
 80025d2:	6963      	ldr	r3, [r4, #20]
 80025d4:	425b      	negs	r3, r3
 80025d6:	61a3      	str	r3, [r4, #24]
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	b943      	cbnz	r3, 80025ee <__swsetup_r+0xc6>
 80025dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025e0:	d1ba      	bne.n	8002558 <__swsetup_r+0x30>
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	0781      	lsls	r1, r0, #30
 80025e6:	bf58      	it	pl
 80025e8:	6963      	ldrpl	r3, [r4, #20]
 80025ea:	60a3      	str	r3, [r4, #8]
 80025ec:	e7f4      	b.n	80025d8 <__swsetup_r+0xb0>
 80025ee:	2000      	movs	r0, #0
 80025f0:	e7f7      	b.n	80025e2 <__swsetup_r+0xba>
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	08003434 	.word	0x08003434
 80025fc:	08003454 	.word	0x08003454
 8002600:	08003414 	.word	0x08003414

08002604 <__sflush_r>:
 8002604:	898a      	ldrh	r2, [r1, #12]
 8002606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002608:	4605      	mov	r5, r0
 800260a:	0710      	lsls	r0, r2, #28
 800260c:	460c      	mov	r4, r1
 800260e:	d457      	bmi.n	80026c0 <__sflush_r+0xbc>
 8002610:	684b      	ldr	r3, [r1, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	dc04      	bgt.n	8002620 <__sflush_r+0x1c>
 8002616:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	dc01      	bgt.n	8002620 <__sflush_r+0x1c>
 800261c:	2000      	movs	r0, #0
 800261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002622:	2e00      	cmp	r6, #0
 8002624:	d0fa      	beq.n	800261c <__sflush_r+0x18>
 8002626:	2300      	movs	r3, #0
 8002628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800262c:	682f      	ldr	r7, [r5, #0]
 800262e:	602b      	str	r3, [r5, #0]
 8002630:	d032      	beq.n	8002698 <__sflush_r+0x94>
 8002632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	075a      	lsls	r2, r3, #29
 8002638:	d505      	bpl.n	8002646 <__sflush_r+0x42>
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	1ac0      	subs	r0, r0, r3
 800263e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002640:	b10b      	cbz	r3, 8002646 <__sflush_r+0x42>
 8002642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002644:	1ac0      	subs	r0, r0, r3
 8002646:	2300      	movs	r3, #0
 8002648:	4602      	mov	r2, r0
 800264a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800264c:	4628      	mov	r0, r5
 800264e:	6a21      	ldr	r1, [r4, #32]
 8002650:	47b0      	blx	r6
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	89a3      	ldrh	r3, [r4, #12]
 8002656:	d106      	bne.n	8002666 <__sflush_r+0x62>
 8002658:	6829      	ldr	r1, [r5, #0]
 800265a:	291d      	cmp	r1, #29
 800265c:	d82c      	bhi.n	80026b8 <__sflush_r+0xb4>
 800265e:	4a29      	ldr	r2, [pc, #164]	; (8002704 <__sflush_r+0x100>)
 8002660:	40ca      	lsrs	r2, r1
 8002662:	07d6      	lsls	r6, r2, #31
 8002664:	d528      	bpl.n	80026b8 <__sflush_r+0xb4>
 8002666:	2200      	movs	r2, #0
 8002668:	6062      	str	r2, [r4, #4]
 800266a:	6922      	ldr	r2, [r4, #16]
 800266c:	04d9      	lsls	r1, r3, #19
 800266e:	6022      	str	r2, [r4, #0]
 8002670:	d504      	bpl.n	800267c <__sflush_r+0x78>
 8002672:	1c42      	adds	r2, r0, #1
 8002674:	d101      	bne.n	800267a <__sflush_r+0x76>
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	b903      	cbnz	r3, 800267c <__sflush_r+0x78>
 800267a:	6560      	str	r0, [r4, #84]	; 0x54
 800267c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800267e:	602f      	str	r7, [r5, #0]
 8002680:	2900      	cmp	r1, #0
 8002682:	d0cb      	beq.n	800261c <__sflush_r+0x18>
 8002684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002688:	4299      	cmp	r1, r3
 800268a:	d002      	beq.n	8002692 <__sflush_r+0x8e>
 800268c:	4628      	mov	r0, r5
 800268e:	f000 f9d5 	bl	8002a3c <_free_r>
 8002692:	2000      	movs	r0, #0
 8002694:	6360      	str	r0, [r4, #52]	; 0x34
 8002696:	e7c2      	b.n	800261e <__sflush_r+0x1a>
 8002698:	6a21      	ldr	r1, [r4, #32]
 800269a:	2301      	movs	r3, #1
 800269c:	4628      	mov	r0, r5
 800269e:	47b0      	blx	r6
 80026a0:	1c41      	adds	r1, r0, #1
 80026a2:	d1c7      	bne.n	8002634 <__sflush_r+0x30>
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0c4      	beq.n	8002634 <__sflush_r+0x30>
 80026aa:	2b1d      	cmp	r3, #29
 80026ac:	d001      	beq.n	80026b2 <__sflush_r+0xae>
 80026ae:	2b16      	cmp	r3, #22
 80026b0:	d101      	bne.n	80026b6 <__sflush_r+0xb2>
 80026b2:	602f      	str	r7, [r5, #0]
 80026b4:	e7b2      	b.n	800261c <__sflush_r+0x18>
 80026b6:	89a3      	ldrh	r3, [r4, #12]
 80026b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026bc:	81a3      	strh	r3, [r4, #12]
 80026be:	e7ae      	b.n	800261e <__sflush_r+0x1a>
 80026c0:	690f      	ldr	r7, [r1, #16]
 80026c2:	2f00      	cmp	r7, #0
 80026c4:	d0aa      	beq.n	800261c <__sflush_r+0x18>
 80026c6:	0793      	lsls	r3, r2, #30
 80026c8:	bf18      	it	ne
 80026ca:	2300      	movne	r3, #0
 80026cc:	680e      	ldr	r6, [r1, #0]
 80026ce:	bf08      	it	eq
 80026d0:	694b      	ldreq	r3, [r1, #20]
 80026d2:	1bf6      	subs	r6, r6, r7
 80026d4:	600f      	str	r7, [r1, #0]
 80026d6:	608b      	str	r3, [r1, #8]
 80026d8:	2e00      	cmp	r6, #0
 80026da:	dd9f      	ble.n	800261c <__sflush_r+0x18>
 80026dc:	4633      	mov	r3, r6
 80026de:	463a      	mov	r2, r7
 80026e0:	4628      	mov	r0, r5
 80026e2:	6a21      	ldr	r1, [r4, #32]
 80026e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80026e8:	47e0      	blx	ip
 80026ea:	2800      	cmp	r0, #0
 80026ec:	dc06      	bgt.n	80026fc <__sflush_r+0xf8>
 80026ee:	89a3      	ldrh	r3, [r4, #12]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f8:	81a3      	strh	r3, [r4, #12]
 80026fa:	e790      	b.n	800261e <__sflush_r+0x1a>
 80026fc:	4407      	add	r7, r0
 80026fe:	1a36      	subs	r6, r6, r0
 8002700:	e7ea      	b.n	80026d8 <__sflush_r+0xd4>
 8002702:	bf00      	nop
 8002704:	20400001 	.word	0x20400001

08002708 <_fflush_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	690b      	ldr	r3, [r1, #16]
 800270c:	4605      	mov	r5, r0
 800270e:	460c      	mov	r4, r1
 8002710:	b913      	cbnz	r3, 8002718 <_fflush_r+0x10>
 8002712:	2500      	movs	r5, #0
 8002714:	4628      	mov	r0, r5
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	b118      	cbz	r0, 8002722 <_fflush_r+0x1a>
 800271a:	6983      	ldr	r3, [r0, #24]
 800271c:	b90b      	cbnz	r3, 8002722 <_fflush_r+0x1a>
 800271e:	f000 f887 	bl	8002830 <__sinit>
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <_fflush_r+0x6c>)
 8002724:	429c      	cmp	r4, r3
 8002726:	d11b      	bne.n	8002760 <_fflush_r+0x58>
 8002728:	686c      	ldr	r4, [r5, #4]
 800272a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0ef      	beq.n	8002712 <_fflush_r+0xa>
 8002732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002734:	07d0      	lsls	r0, r2, #31
 8002736:	d404      	bmi.n	8002742 <_fflush_r+0x3a>
 8002738:	0599      	lsls	r1, r3, #22
 800273a:	d402      	bmi.n	8002742 <_fflush_r+0x3a>
 800273c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800273e:	f000 f915 	bl	800296c <__retarget_lock_acquire_recursive>
 8002742:	4628      	mov	r0, r5
 8002744:	4621      	mov	r1, r4
 8002746:	f7ff ff5d 	bl	8002604 <__sflush_r>
 800274a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800274c:	4605      	mov	r5, r0
 800274e:	07da      	lsls	r2, r3, #31
 8002750:	d4e0      	bmi.n	8002714 <_fflush_r+0xc>
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	059b      	lsls	r3, r3, #22
 8002756:	d4dd      	bmi.n	8002714 <_fflush_r+0xc>
 8002758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800275a:	f000 f908 	bl	800296e <__retarget_lock_release_recursive>
 800275e:	e7d9      	b.n	8002714 <_fflush_r+0xc>
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <_fflush_r+0x70>)
 8002762:	429c      	cmp	r4, r3
 8002764:	d101      	bne.n	800276a <_fflush_r+0x62>
 8002766:	68ac      	ldr	r4, [r5, #8]
 8002768:	e7df      	b.n	800272a <_fflush_r+0x22>
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <_fflush_r+0x74>)
 800276c:	429c      	cmp	r4, r3
 800276e:	bf08      	it	eq
 8002770:	68ec      	ldreq	r4, [r5, #12]
 8002772:	e7da      	b.n	800272a <_fflush_r+0x22>
 8002774:	08003434 	.word	0x08003434
 8002778:	08003454 	.word	0x08003454
 800277c:	08003414 	.word	0x08003414

08002780 <std>:
 8002780:	2300      	movs	r3, #0
 8002782:	b510      	push	{r4, lr}
 8002784:	4604      	mov	r4, r0
 8002786:	e9c0 3300 	strd	r3, r3, [r0]
 800278a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800278e:	6083      	str	r3, [r0, #8]
 8002790:	8181      	strh	r1, [r0, #12]
 8002792:	6643      	str	r3, [r0, #100]	; 0x64
 8002794:	81c2      	strh	r2, [r0, #14]
 8002796:	6183      	str	r3, [r0, #24]
 8002798:	4619      	mov	r1, r3
 800279a:	2208      	movs	r2, #8
 800279c:	305c      	adds	r0, #92	; 0x5c
 800279e:	f7ff fddb 	bl	8002358 <memset>
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <std+0x38>)
 80027a4:	6224      	str	r4, [r4, #32]
 80027a6:	6263      	str	r3, [r4, #36]	; 0x24
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <std+0x3c>)
 80027aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <std+0x40>)
 80027ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <std+0x44>)
 80027b2:	6323      	str	r3, [r4, #48]	; 0x30
 80027b4:	bd10      	pop	{r4, pc}
 80027b6:	bf00      	nop
 80027b8:	080031f1 	.word	0x080031f1
 80027bc:	08003213 	.word	0x08003213
 80027c0:	0800324b 	.word	0x0800324b
 80027c4:	0800326f 	.word	0x0800326f

080027c8 <_cleanup_r>:
 80027c8:	4901      	ldr	r1, [pc, #4]	; (80027d0 <_cleanup_r+0x8>)
 80027ca:	f000 b8af 	b.w	800292c <_fwalk_reent>
 80027ce:	bf00      	nop
 80027d0:	08002709 	.word	0x08002709

080027d4 <__sfmoreglue>:
 80027d4:	2268      	movs	r2, #104	; 0x68
 80027d6:	b570      	push	{r4, r5, r6, lr}
 80027d8:	1e4d      	subs	r5, r1, #1
 80027da:	4355      	muls	r5, r2
 80027dc:	460e      	mov	r6, r1
 80027de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027e2:	f000 f993 	bl	8002b0c <_malloc_r>
 80027e6:	4604      	mov	r4, r0
 80027e8:	b140      	cbz	r0, 80027fc <__sfmoreglue+0x28>
 80027ea:	2100      	movs	r1, #0
 80027ec:	e9c0 1600 	strd	r1, r6, [r0]
 80027f0:	300c      	adds	r0, #12
 80027f2:	60a0      	str	r0, [r4, #8]
 80027f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027f8:	f7ff fdae 	bl	8002358 <memset>
 80027fc:	4620      	mov	r0, r4
 80027fe:	bd70      	pop	{r4, r5, r6, pc}

08002800 <__sfp_lock_acquire>:
 8002800:	4801      	ldr	r0, [pc, #4]	; (8002808 <__sfp_lock_acquire+0x8>)
 8002802:	f000 b8b3 	b.w	800296c <__retarget_lock_acquire_recursive>
 8002806:	bf00      	nop
 8002808:	20000129 	.word	0x20000129

0800280c <__sfp_lock_release>:
 800280c:	4801      	ldr	r0, [pc, #4]	; (8002814 <__sfp_lock_release+0x8>)
 800280e:	f000 b8ae 	b.w	800296e <__retarget_lock_release_recursive>
 8002812:	bf00      	nop
 8002814:	20000129 	.word	0x20000129

08002818 <__sinit_lock_acquire>:
 8002818:	4801      	ldr	r0, [pc, #4]	; (8002820 <__sinit_lock_acquire+0x8>)
 800281a:	f000 b8a7 	b.w	800296c <__retarget_lock_acquire_recursive>
 800281e:	bf00      	nop
 8002820:	2000012a 	.word	0x2000012a

08002824 <__sinit_lock_release>:
 8002824:	4801      	ldr	r0, [pc, #4]	; (800282c <__sinit_lock_release+0x8>)
 8002826:	f000 b8a2 	b.w	800296e <__retarget_lock_release_recursive>
 800282a:	bf00      	nop
 800282c:	2000012a 	.word	0x2000012a

08002830 <__sinit>:
 8002830:	b510      	push	{r4, lr}
 8002832:	4604      	mov	r4, r0
 8002834:	f7ff fff0 	bl	8002818 <__sinit_lock_acquire>
 8002838:	69a3      	ldr	r3, [r4, #24]
 800283a:	b11b      	cbz	r3, 8002844 <__sinit+0x14>
 800283c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002840:	f7ff bff0 	b.w	8002824 <__sinit_lock_release>
 8002844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002848:	6523      	str	r3, [r4, #80]	; 0x50
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <__sinit+0x68>)
 800284c:	4a13      	ldr	r2, [pc, #76]	; (800289c <__sinit+0x6c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	62a2      	str	r2, [r4, #40]	; 0x28
 8002852:	42a3      	cmp	r3, r4
 8002854:	bf08      	it	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	4620      	mov	r0, r4
 800285a:	bf08      	it	eq
 800285c:	61a3      	streq	r3, [r4, #24]
 800285e:	f000 f81f 	bl	80028a0 <__sfp>
 8002862:	6060      	str	r0, [r4, #4]
 8002864:	4620      	mov	r0, r4
 8002866:	f000 f81b 	bl	80028a0 <__sfp>
 800286a:	60a0      	str	r0, [r4, #8]
 800286c:	4620      	mov	r0, r4
 800286e:	f000 f817 	bl	80028a0 <__sfp>
 8002872:	2200      	movs	r2, #0
 8002874:	2104      	movs	r1, #4
 8002876:	60e0      	str	r0, [r4, #12]
 8002878:	6860      	ldr	r0, [r4, #4]
 800287a:	f7ff ff81 	bl	8002780 <std>
 800287e:	2201      	movs	r2, #1
 8002880:	2109      	movs	r1, #9
 8002882:	68a0      	ldr	r0, [r4, #8]
 8002884:	f7ff ff7c 	bl	8002780 <std>
 8002888:	2202      	movs	r2, #2
 800288a:	2112      	movs	r1, #18
 800288c:	68e0      	ldr	r0, [r4, #12]
 800288e:	f7ff ff77 	bl	8002780 <std>
 8002892:	2301      	movs	r3, #1
 8002894:	61a3      	str	r3, [r4, #24]
 8002896:	e7d1      	b.n	800283c <__sinit+0xc>
 8002898:	08003410 	.word	0x08003410
 800289c:	080027c9 	.word	0x080027c9

080028a0 <__sfp>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	4607      	mov	r7, r0
 80028a4:	f7ff ffac 	bl	8002800 <__sfp_lock_acquire>
 80028a8:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <__sfp+0x84>)
 80028aa:	681e      	ldr	r6, [r3, #0]
 80028ac:	69b3      	ldr	r3, [r6, #24]
 80028ae:	b913      	cbnz	r3, 80028b6 <__sfp+0x16>
 80028b0:	4630      	mov	r0, r6
 80028b2:	f7ff ffbd 	bl	8002830 <__sinit>
 80028b6:	3648      	adds	r6, #72	; 0x48
 80028b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028bc:	3b01      	subs	r3, #1
 80028be:	d503      	bpl.n	80028c8 <__sfp+0x28>
 80028c0:	6833      	ldr	r3, [r6, #0]
 80028c2:	b30b      	cbz	r3, 8002908 <__sfp+0x68>
 80028c4:	6836      	ldr	r6, [r6, #0]
 80028c6:	e7f7      	b.n	80028b8 <__sfp+0x18>
 80028c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028cc:	b9d5      	cbnz	r5, 8002904 <__sfp+0x64>
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <__sfp+0x88>)
 80028d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028d4:	60e3      	str	r3, [r4, #12]
 80028d6:	6665      	str	r5, [r4, #100]	; 0x64
 80028d8:	f000 f847 	bl	800296a <__retarget_lock_init_recursive>
 80028dc:	f7ff ff96 	bl	800280c <__sfp_lock_release>
 80028e0:	2208      	movs	r2, #8
 80028e2:	4629      	mov	r1, r5
 80028e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028ec:	6025      	str	r5, [r4, #0]
 80028ee:	61a5      	str	r5, [r4, #24]
 80028f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028f4:	f7ff fd30 	bl	8002358 <memset>
 80028f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002900:	4620      	mov	r0, r4
 8002902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002904:	3468      	adds	r4, #104	; 0x68
 8002906:	e7d9      	b.n	80028bc <__sfp+0x1c>
 8002908:	2104      	movs	r1, #4
 800290a:	4638      	mov	r0, r7
 800290c:	f7ff ff62 	bl	80027d4 <__sfmoreglue>
 8002910:	4604      	mov	r4, r0
 8002912:	6030      	str	r0, [r6, #0]
 8002914:	2800      	cmp	r0, #0
 8002916:	d1d5      	bne.n	80028c4 <__sfp+0x24>
 8002918:	f7ff ff78 	bl	800280c <__sfp_lock_release>
 800291c:	230c      	movs	r3, #12
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	e7ee      	b.n	8002900 <__sfp+0x60>
 8002922:	bf00      	nop
 8002924:	08003410 	.word	0x08003410
 8002928:	ffff0001 	.word	0xffff0001

0800292c <_fwalk_reent>:
 800292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002930:	4606      	mov	r6, r0
 8002932:	4688      	mov	r8, r1
 8002934:	2700      	movs	r7, #0
 8002936:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800293a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800293e:	f1b9 0901 	subs.w	r9, r9, #1
 8002942:	d505      	bpl.n	8002950 <_fwalk_reent+0x24>
 8002944:	6824      	ldr	r4, [r4, #0]
 8002946:	2c00      	cmp	r4, #0
 8002948:	d1f7      	bne.n	800293a <_fwalk_reent+0xe>
 800294a:	4638      	mov	r0, r7
 800294c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002950:	89ab      	ldrh	r3, [r5, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d907      	bls.n	8002966 <_fwalk_reent+0x3a>
 8002956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800295a:	3301      	adds	r3, #1
 800295c:	d003      	beq.n	8002966 <_fwalk_reent+0x3a>
 800295e:	4629      	mov	r1, r5
 8002960:	4630      	mov	r0, r6
 8002962:	47c0      	blx	r8
 8002964:	4307      	orrs	r7, r0
 8002966:	3568      	adds	r5, #104	; 0x68
 8002968:	e7e9      	b.n	800293e <_fwalk_reent+0x12>

0800296a <__retarget_lock_init_recursive>:
 800296a:	4770      	bx	lr

0800296c <__retarget_lock_acquire_recursive>:
 800296c:	4770      	bx	lr

0800296e <__retarget_lock_release_recursive>:
 800296e:	4770      	bx	lr

08002970 <__swhatbuf_r>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	460e      	mov	r6, r1
 8002974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002978:	4614      	mov	r4, r2
 800297a:	2900      	cmp	r1, #0
 800297c:	461d      	mov	r5, r3
 800297e:	b096      	sub	sp, #88	; 0x58
 8002980:	da08      	bge.n	8002994 <__swhatbuf_r+0x24>
 8002982:	2200      	movs	r2, #0
 8002984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002988:	602a      	str	r2, [r5, #0]
 800298a:	061a      	lsls	r2, r3, #24
 800298c:	d410      	bmi.n	80029b0 <__swhatbuf_r+0x40>
 800298e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002992:	e00e      	b.n	80029b2 <__swhatbuf_r+0x42>
 8002994:	466a      	mov	r2, sp
 8002996:	f000 fc91 	bl	80032bc <_fstat_r>
 800299a:	2800      	cmp	r0, #0
 800299c:	dbf1      	blt.n	8002982 <__swhatbuf_r+0x12>
 800299e:	9a01      	ldr	r2, [sp, #4]
 80029a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029a8:	425a      	negs	r2, r3
 80029aa:	415a      	adcs	r2, r3
 80029ac:	602a      	str	r2, [r5, #0]
 80029ae:	e7ee      	b.n	800298e <__swhatbuf_r+0x1e>
 80029b0:	2340      	movs	r3, #64	; 0x40
 80029b2:	2000      	movs	r0, #0
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	b016      	add	sp, #88	; 0x58
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080029bc <__smakebuf_r>:
 80029bc:	898b      	ldrh	r3, [r1, #12]
 80029be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029c0:	079d      	lsls	r5, r3, #30
 80029c2:	4606      	mov	r6, r0
 80029c4:	460c      	mov	r4, r1
 80029c6:	d507      	bpl.n	80029d8 <__smakebuf_r+0x1c>
 80029c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	6123      	str	r3, [r4, #16]
 80029d0:	2301      	movs	r3, #1
 80029d2:	6163      	str	r3, [r4, #20]
 80029d4:	b002      	add	sp, #8
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	466a      	mov	r2, sp
 80029da:	ab01      	add	r3, sp, #4
 80029dc:	f7ff ffc8 	bl	8002970 <__swhatbuf_r>
 80029e0:	9900      	ldr	r1, [sp, #0]
 80029e2:	4605      	mov	r5, r0
 80029e4:	4630      	mov	r0, r6
 80029e6:	f000 f891 	bl	8002b0c <_malloc_r>
 80029ea:	b948      	cbnz	r0, 8002a00 <__smakebuf_r+0x44>
 80029ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029f0:	059a      	lsls	r2, r3, #22
 80029f2:	d4ef      	bmi.n	80029d4 <__smakebuf_r+0x18>
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	81a3      	strh	r3, [r4, #12]
 80029fe:	e7e3      	b.n	80029c8 <__smakebuf_r+0xc>
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <__smakebuf_r+0x7c>)
 8002a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	6020      	str	r0, [r4, #0]
 8002a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0c:	81a3      	strh	r3, [r4, #12]
 8002a0e:	9b00      	ldr	r3, [sp, #0]
 8002a10:	6120      	str	r0, [r4, #16]
 8002a12:	6163      	str	r3, [r4, #20]
 8002a14:	9b01      	ldr	r3, [sp, #4]
 8002a16:	b15b      	cbz	r3, 8002a30 <__smakebuf_r+0x74>
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a1e:	f000 fc5f 	bl	80032e0 <_isatty_r>
 8002a22:	b128      	cbz	r0, 8002a30 <__smakebuf_r+0x74>
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	81a3      	strh	r3, [r4, #12]
 8002a30:	89a0      	ldrh	r0, [r4, #12]
 8002a32:	4305      	orrs	r5, r0
 8002a34:	81a5      	strh	r5, [r4, #12]
 8002a36:	e7cd      	b.n	80029d4 <__smakebuf_r+0x18>
 8002a38:	080027c9 	.word	0x080027c9

08002a3c <_free_r>:
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4605      	mov	r5, r0
 8002a40:	2900      	cmp	r1, #0
 8002a42:	d040      	beq.n	8002ac6 <_free_r+0x8a>
 8002a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a48:	1f0c      	subs	r4, r1, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bfb8      	it	lt
 8002a4e:	18e4      	addlt	r4, r4, r3
 8002a50:	f000 fc76 	bl	8003340 <__malloc_lock>
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <_free_r+0x8c>)
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	b933      	cbnz	r3, 8002a68 <_free_r+0x2c>
 8002a5a:	6063      	str	r3, [r4, #4]
 8002a5c:	6014      	str	r4, [r2, #0]
 8002a5e:	4628      	mov	r0, r5
 8002a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a64:	f000 bc72 	b.w	800334c <__malloc_unlock>
 8002a68:	42a3      	cmp	r3, r4
 8002a6a:	d908      	bls.n	8002a7e <_free_r+0x42>
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	1821      	adds	r1, r4, r0
 8002a70:	428b      	cmp	r3, r1
 8002a72:	bf01      	itttt	eq
 8002a74:	6819      	ldreq	r1, [r3, #0]
 8002a76:	685b      	ldreq	r3, [r3, #4]
 8002a78:	1809      	addeq	r1, r1, r0
 8002a7a:	6021      	streq	r1, [r4, #0]
 8002a7c:	e7ed      	b.n	8002a5a <_free_r+0x1e>
 8002a7e:	461a      	mov	r2, r3
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	b10b      	cbz	r3, 8002a88 <_free_r+0x4c>
 8002a84:	42a3      	cmp	r3, r4
 8002a86:	d9fa      	bls.n	8002a7e <_free_r+0x42>
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	1850      	adds	r0, r2, r1
 8002a8c:	42a0      	cmp	r0, r4
 8002a8e:	d10b      	bne.n	8002aa8 <_free_r+0x6c>
 8002a90:	6820      	ldr	r0, [r4, #0]
 8002a92:	4401      	add	r1, r0
 8002a94:	1850      	adds	r0, r2, r1
 8002a96:	4283      	cmp	r3, r0
 8002a98:	6011      	str	r1, [r2, #0]
 8002a9a:	d1e0      	bne.n	8002a5e <_free_r+0x22>
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4401      	add	r1, r0
 8002aa2:	6011      	str	r1, [r2, #0]
 8002aa4:	6053      	str	r3, [r2, #4]
 8002aa6:	e7da      	b.n	8002a5e <_free_r+0x22>
 8002aa8:	d902      	bls.n	8002ab0 <_free_r+0x74>
 8002aaa:	230c      	movs	r3, #12
 8002aac:	602b      	str	r3, [r5, #0]
 8002aae:	e7d6      	b.n	8002a5e <_free_r+0x22>
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	1821      	adds	r1, r4, r0
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	bf01      	itttt	eq
 8002ab8:	6819      	ldreq	r1, [r3, #0]
 8002aba:	685b      	ldreq	r3, [r3, #4]
 8002abc:	1809      	addeq	r1, r1, r0
 8002abe:	6021      	streq	r1, [r4, #0]
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	6054      	str	r4, [r2, #4]
 8002ac4:	e7cb      	b.n	8002a5e <_free_r+0x22>
 8002ac6:	bd38      	pop	{r3, r4, r5, pc}
 8002ac8:	2000012c 	.word	0x2000012c

08002acc <sbrk_aligned>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	4e0e      	ldr	r6, [pc, #56]	; (8002b08 <sbrk_aligned+0x3c>)
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	6831      	ldr	r1, [r6, #0]
 8002ad4:	4605      	mov	r5, r0
 8002ad6:	b911      	cbnz	r1, 8002ade <sbrk_aligned+0x12>
 8002ad8:	f000 fb7a 	bl	80031d0 <_sbrk_r>
 8002adc:	6030      	str	r0, [r6, #0]
 8002ade:	4621      	mov	r1, r4
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f000 fb75 	bl	80031d0 <_sbrk_r>
 8002ae6:	1c43      	adds	r3, r0, #1
 8002ae8:	d00a      	beq.n	8002b00 <sbrk_aligned+0x34>
 8002aea:	1cc4      	adds	r4, r0, #3
 8002aec:	f024 0403 	bic.w	r4, r4, #3
 8002af0:	42a0      	cmp	r0, r4
 8002af2:	d007      	beq.n	8002b04 <sbrk_aligned+0x38>
 8002af4:	1a21      	subs	r1, r4, r0
 8002af6:	4628      	mov	r0, r5
 8002af8:	f000 fb6a 	bl	80031d0 <_sbrk_r>
 8002afc:	3001      	adds	r0, #1
 8002afe:	d101      	bne.n	8002b04 <sbrk_aligned+0x38>
 8002b00:	f04f 34ff 	mov.w	r4, #4294967295
 8002b04:	4620      	mov	r0, r4
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	20000130 	.word	0x20000130

08002b0c <_malloc_r>:
 8002b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b10:	1ccd      	adds	r5, r1, #3
 8002b12:	f025 0503 	bic.w	r5, r5, #3
 8002b16:	3508      	adds	r5, #8
 8002b18:	2d0c      	cmp	r5, #12
 8002b1a:	bf38      	it	cc
 8002b1c:	250c      	movcc	r5, #12
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	4607      	mov	r7, r0
 8002b22:	db01      	blt.n	8002b28 <_malloc_r+0x1c>
 8002b24:	42a9      	cmp	r1, r5
 8002b26:	d905      	bls.n	8002b34 <_malloc_r+0x28>
 8002b28:	230c      	movs	r3, #12
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4630      	mov	r0, r6
 8002b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b34:	4e2e      	ldr	r6, [pc, #184]	; (8002bf0 <_malloc_r+0xe4>)
 8002b36:	f000 fc03 	bl	8003340 <__malloc_lock>
 8002b3a:	6833      	ldr	r3, [r6, #0]
 8002b3c:	461c      	mov	r4, r3
 8002b3e:	bb34      	cbnz	r4, 8002b8e <_malloc_r+0x82>
 8002b40:	4629      	mov	r1, r5
 8002b42:	4638      	mov	r0, r7
 8002b44:	f7ff ffc2 	bl	8002acc <sbrk_aligned>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	d14d      	bne.n	8002bea <_malloc_r+0xde>
 8002b4e:	6834      	ldr	r4, [r6, #0]
 8002b50:	4626      	mov	r6, r4
 8002b52:	2e00      	cmp	r6, #0
 8002b54:	d140      	bne.n	8002bd8 <_malloc_r+0xcc>
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	4631      	mov	r1, r6
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	eb04 0803 	add.w	r8, r4, r3
 8002b60:	f000 fb36 	bl	80031d0 <_sbrk_r>
 8002b64:	4580      	cmp	r8, r0
 8002b66:	d13a      	bne.n	8002bde <_malloc_r+0xd2>
 8002b68:	6821      	ldr	r1, [r4, #0]
 8002b6a:	3503      	adds	r5, #3
 8002b6c:	1a6d      	subs	r5, r5, r1
 8002b6e:	f025 0503 	bic.w	r5, r5, #3
 8002b72:	3508      	adds	r5, #8
 8002b74:	2d0c      	cmp	r5, #12
 8002b76:	bf38      	it	cc
 8002b78:	250c      	movcc	r5, #12
 8002b7a:	4638      	mov	r0, r7
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7ff ffa5 	bl	8002acc <sbrk_aligned>
 8002b82:	3001      	adds	r0, #1
 8002b84:	d02b      	beq.n	8002bde <_malloc_r+0xd2>
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	442b      	add	r3, r5
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	e00e      	b.n	8002bac <_malloc_r+0xa0>
 8002b8e:	6822      	ldr	r2, [r4, #0]
 8002b90:	1b52      	subs	r2, r2, r5
 8002b92:	d41e      	bmi.n	8002bd2 <_malloc_r+0xc6>
 8002b94:	2a0b      	cmp	r2, #11
 8002b96:	d916      	bls.n	8002bc6 <_malloc_r+0xba>
 8002b98:	1961      	adds	r1, r4, r5
 8002b9a:	42a3      	cmp	r3, r4
 8002b9c:	6025      	str	r5, [r4, #0]
 8002b9e:	bf18      	it	ne
 8002ba0:	6059      	strne	r1, [r3, #4]
 8002ba2:	6863      	ldr	r3, [r4, #4]
 8002ba4:	bf08      	it	eq
 8002ba6:	6031      	streq	r1, [r6, #0]
 8002ba8:	5162      	str	r2, [r4, r5]
 8002baa:	604b      	str	r3, [r1, #4]
 8002bac:	4638      	mov	r0, r7
 8002bae:	f104 060b 	add.w	r6, r4, #11
 8002bb2:	f000 fbcb 	bl	800334c <__malloc_unlock>
 8002bb6:	f026 0607 	bic.w	r6, r6, #7
 8002bba:	1d23      	adds	r3, r4, #4
 8002bbc:	1af2      	subs	r2, r6, r3
 8002bbe:	d0b6      	beq.n	8002b2e <_malloc_r+0x22>
 8002bc0:	1b9b      	subs	r3, r3, r6
 8002bc2:	50a3      	str	r3, [r4, r2]
 8002bc4:	e7b3      	b.n	8002b2e <_malloc_r+0x22>
 8002bc6:	6862      	ldr	r2, [r4, #4]
 8002bc8:	42a3      	cmp	r3, r4
 8002bca:	bf0c      	ite	eq
 8002bcc:	6032      	streq	r2, [r6, #0]
 8002bce:	605a      	strne	r2, [r3, #4]
 8002bd0:	e7ec      	b.n	8002bac <_malloc_r+0xa0>
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	6864      	ldr	r4, [r4, #4]
 8002bd6:	e7b2      	b.n	8002b3e <_malloc_r+0x32>
 8002bd8:	4634      	mov	r4, r6
 8002bda:	6876      	ldr	r6, [r6, #4]
 8002bdc:	e7b9      	b.n	8002b52 <_malloc_r+0x46>
 8002bde:	230c      	movs	r3, #12
 8002be0:	4638      	mov	r0, r7
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	f000 fbb2 	bl	800334c <__malloc_unlock>
 8002be8:	e7a1      	b.n	8002b2e <_malloc_r+0x22>
 8002bea:	6025      	str	r5, [r4, #0]
 8002bec:	e7de      	b.n	8002bac <_malloc_r+0xa0>
 8002bee:	bf00      	nop
 8002bf0:	2000012c 	.word	0x2000012c

08002bf4 <__sfputc_r>:
 8002bf4:	6893      	ldr	r3, [r2, #8]
 8002bf6:	b410      	push	{r4}
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	6093      	str	r3, [r2, #8]
 8002bfe:	da07      	bge.n	8002c10 <__sfputc_r+0x1c>
 8002c00:	6994      	ldr	r4, [r2, #24]
 8002c02:	42a3      	cmp	r3, r4
 8002c04:	db01      	blt.n	8002c0a <__sfputc_r+0x16>
 8002c06:	290a      	cmp	r1, #10
 8002c08:	d102      	bne.n	8002c10 <__sfputc_r+0x1c>
 8002c0a:	bc10      	pop	{r4}
 8002c0c:	f7ff bc3a 	b.w	8002484 <__swbuf_r>
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	1c58      	adds	r0, r3, #1
 8002c14:	6010      	str	r0, [r2, #0]
 8002c16:	7019      	strb	r1, [r3, #0]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	bc10      	pop	{r4}
 8002c1c:	4770      	bx	lr

08002c1e <__sfputs_r>:
 8002c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c20:	4606      	mov	r6, r0
 8002c22:	460f      	mov	r7, r1
 8002c24:	4614      	mov	r4, r2
 8002c26:	18d5      	adds	r5, r2, r3
 8002c28:	42ac      	cmp	r4, r5
 8002c2a:	d101      	bne.n	8002c30 <__sfputs_r+0x12>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e007      	b.n	8002c40 <__sfputs_r+0x22>
 8002c30:	463a      	mov	r2, r7
 8002c32:	4630      	mov	r0, r6
 8002c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c38:	f7ff ffdc 	bl	8002bf4 <__sfputc_r>
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d1f3      	bne.n	8002c28 <__sfputs_r+0xa>
 8002c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c44 <_vfiprintf_r>:
 8002c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c48:	460d      	mov	r5, r1
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	4698      	mov	r8, r3
 8002c4e:	4606      	mov	r6, r0
 8002c50:	b09d      	sub	sp, #116	; 0x74
 8002c52:	b118      	cbz	r0, 8002c5c <_vfiprintf_r+0x18>
 8002c54:	6983      	ldr	r3, [r0, #24]
 8002c56:	b90b      	cbnz	r3, 8002c5c <_vfiprintf_r+0x18>
 8002c58:	f7ff fdea 	bl	8002830 <__sinit>
 8002c5c:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <_vfiprintf_r+0x240>)
 8002c5e:	429d      	cmp	r5, r3
 8002c60:	d11b      	bne.n	8002c9a <_vfiprintf_r+0x56>
 8002c62:	6875      	ldr	r5, [r6, #4]
 8002c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c66:	07d9      	lsls	r1, r3, #31
 8002c68:	d405      	bmi.n	8002c76 <_vfiprintf_r+0x32>
 8002c6a:	89ab      	ldrh	r3, [r5, #12]
 8002c6c:	059a      	lsls	r2, r3, #22
 8002c6e:	d402      	bmi.n	8002c76 <_vfiprintf_r+0x32>
 8002c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c72:	f7ff fe7b 	bl	800296c <__retarget_lock_acquire_recursive>
 8002c76:	89ab      	ldrh	r3, [r5, #12]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	d501      	bpl.n	8002c80 <_vfiprintf_r+0x3c>
 8002c7c:	692b      	ldr	r3, [r5, #16]
 8002c7e:	b9eb      	cbnz	r3, 8002cbc <_vfiprintf_r+0x78>
 8002c80:	4629      	mov	r1, r5
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7ff fc50 	bl	8002528 <__swsetup_r>
 8002c88:	b1c0      	cbz	r0, 8002cbc <_vfiprintf_r+0x78>
 8002c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c8c:	07dc      	lsls	r4, r3, #31
 8002c8e:	d50e      	bpl.n	8002cae <_vfiprintf_r+0x6a>
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	b01d      	add	sp, #116	; 0x74
 8002c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <_vfiprintf_r+0x244>)
 8002c9c:	429d      	cmp	r5, r3
 8002c9e:	d101      	bne.n	8002ca4 <_vfiprintf_r+0x60>
 8002ca0:	68b5      	ldr	r5, [r6, #8]
 8002ca2:	e7df      	b.n	8002c64 <_vfiprintf_r+0x20>
 8002ca4:	4b79      	ldr	r3, [pc, #484]	; (8002e8c <_vfiprintf_r+0x248>)
 8002ca6:	429d      	cmp	r5, r3
 8002ca8:	bf08      	it	eq
 8002caa:	68f5      	ldreq	r5, [r6, #12]
 8002cac:	e7da      	b.n	8002c64 <_vfiprintf_r+0x20>
 8002cae:	89ab      	ldrh	r3, [r5, #12]
 8002cb0:	0598      	lsls	r0, r3, #22
 8002cb2:	d4ed      	bmi.n	8002c90 <_vfiprintf_r+0x4c>
 8002cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cb6:	f7ff fe5a 	bl	800296e <__retarget_lock_release_recursive>
 8002cba:	e7e9      	b.n	8002c90 <_vfiprintf_r+0x4c>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cc6:	2330      	movs	r3, #48	; 0x30
 8002cc8:	f04f 0901 	mov.w	r9, #1
 8002ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cd0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e90 <_vfiprintf_r+0x24c>
 8002cd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cd8:	4623      	mov	r3, r4
 8002cda:	469a      	mov	sl, r3
 8002cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ce0:	b10a      	cbz	r2, 8002ce6 <_vfiprintf_r+0xa2>
 8002ce2:	2a25      	cmp	r2, #37	; 0x25
 8002ce4:	d1f9      	bne.n	8002cda <_vfiprintf_r+0x96>
 8002ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cea:	d00b      	beq.n	8002d04 <_vfiprintf_r+0xc0>
 8002cec:	465b      	mov	r3, fp
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f7ff ff93 	bl	8002c1e <__sfputs_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	f000 80aa 	beq.w	8002e52 <_vfiprintf_r+0x20e>
 8002cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d00:	445a      	add	r2, fp
 8002d02:	9209      	str	r2, [sp, #36]	; 0x24
 8002d04:	f89a 3000 	ldrb.w	r3, [sl]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a2 	beq.w	8002e52 <_vfiprintf_r+0x20e>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d18:	f10a 0a01 	add.w	sl, sl, #1
 8002d1c:	9304      	str	r3, [sp, #16]
 8002d1e:	9307      	str	r3, [sp, #28]
 8002d20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d24:	931a      	str	r3, [sp, #104]	; 0x68
 8002d26:	4654      	mov	r4, sl
 8002d28:	2205      	movs	r2, #5
 8002d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2e:	4858      	ldr	r0, [pc, #352]	; (8002e90 <_vfiprintf_r+0x24c>)
 8002d30:	f000 faf8 	bl	8003324 <memchr>
 8002d34:	9a04      	ldr	r2, [sp, #16]
 8002d36:	b9d8      	cbnz	r0, 8002d70 <_vfiprintf_r+0x12c>
 8002d38:	06d1      	lsls	r1, r2, #27
 8002d3a:	bf44      	itt	mi
 8002d3c:	2320      	movmi	r3, #32
 8002d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d42:	0713      	lsls	r3, r2, #28
 8002d44:	bf44      	itt	mi
 8002d46:	232b      	movmi	r3, #43	; 0x2b
 8002d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d50:	2b2a      	cmp	r3, #42	; 0x2a
 8002d52:	d015      	beq.n	8002d80 <_vfiprintf_r+0x13c>
 8002d54:	4654      	mov	r4, sl
 8002d56:	2000      	movs	r0, #0
 8002d58:	f04f 0c0a 	mov.w	ip, #10
 8002d5c:	9a07      	ldr	r2, [sp, #28]
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d64:	3b30      	subs	r3, #48	; 0x30
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	d94e      	bls.n	8002e08 <_vfiprintf_r+0x1c4>
 8002d6a:	b1b0      	cbz	r0, 8002d9a <_vfiprintf_r+0x156>
 8002d6c:	9207      	str	r2, [sp, #28]
 8002d6e:	e014      	b.n	8002d9a <_vfiprintf_r+0x156>
 8002d70:	eba0 0308 	sub.w	r3, r0, r8
 8002d74:	fa09 f303 	lsl.w	r3, r9, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	46a2      	mov	sl, r4
 8002d7c:	9304      	str	r3, [sp, #16]
 8002d7e:	e7d2      	b.n	8002d26 <_vfiprintf_r+0xe2>
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	1d19      	adds	r1, r3, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	9103      	str	r1, [sp, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bfbb      	ittet	lt
 8002d8c:	425b      	neglt	r3, r3
 8002d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d92:	9307      	strge	r3, [sp, #28]
 8002d94:	9307      	strlt	r3, [sp, #28]
 8002d96:	bfb8      	it	lt
 8002d98:	9204      	strlt	r2, [sp, #16]
 8002d9a:	7823      	ldrb	r3, [r4, #0]
 8002d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d9e:	d10c      	bne.n	8002dba <_vfiprintf_r+0x176>
 8002da0:	7863      	ldrb	r3, [r4, #1]
 8002da2:	2b2a      	cmp	r3, #42	; 0x2a
 8002da4:	d135      	bne.n	8002e12 <_vfiprintf_r+0x1ce>
 8002da6:	9b03      	ldr	r3, [sp, #12]
 8002da8:	3402      	adds	r4, #2
 8002daa:	1d1a      	adds	r2, r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	9203      	str	r2, [sp, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bfb8      	it	lt
 8002db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002db8:	9305      	str	r3, [sp, #20]
 8002dba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002e94 <_vfiprintf_r+0x250>
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	4650      	mov	r0, sl
 8002dc2:	7821      	ldrb	r1, [r4, #0]
 8002dc4:	f000 faae 	bl	8003324 <memchr>
 8002dc8:	b140      	cbz	r0, 8002ddc <_vfiprintf_r+0x198>
 8002dca:	2340      	movs	r3, #64	; 0x40
 8002dcc:	eba0 000a 	sub.w	r0, r0, sl
 8002dd0:	fa03 f000 	lsl.w	r0, r3, r0
 8002dd4:	9b04      	ldr	r3, [sp, #16]
 8002dd6:	3401      	adds	r4, #1
 8002dd8:	4303      	orrs	r3, r0
 8002dda:	9304      	str	r3, [sp, #16]
 8002ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de0:	2206      	movs	r2, #6
 8002de2:	482d      	ldr	r0, [pc, #180]	; (8002e98 <_vfiprintf_r+0x254>)
 8002de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002de8:	f000 fa9c 	bl	8003324 <memchr>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d03f      	beq.n	8002e70 <_vfiprintf_r+0x22c>
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <_vfiprintf_r+0x258>)
 8002df2:	bb1b      	cbnz	r3, 8002e3c <_vfiprintf_r+0x1f8>
 8002df4:	9b03      	ldr	r3, [sp, #12]
 8002df6:	3307      	adds	r3, #7
 8002df8:	f023 0307 	bic.w	r3, r3, #7
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	9303      	str	r3, [sp, #12]
 8002e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e02:	443b      	add	r3, r7
 8002e04:	9309      	str	r3, [sp, #36]	; 0x24
 8002e06:	e767      	b.n	8002cd8 <_vfiprintf_r+0x94>
 8002e08:	460c      	mov	r4, r1
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e10:	e7a5      	b.n	8002d5e <_vfiprintf_r+0x11a>
 8002e12:	2300      	movs	r3, #0
 8002e14:	f04f 0c0a 	mov.w	ip, #10
 8002e18:	4619      	mov	r1, r3
 8002e1a:	3401      	adds	r4, #1
 8002e1c:	9305      	str	r3, [sp, #20]
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e24:	3a30      	subs	r2, #48	; 0x30
 8002e26:	2a09      	cmp	r2, #9
 8002e28:	d903      	bls.n	8002e32 <_vfiprintf_r+0x1ee>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0c5      	beq.n	8002dba <_vfiprintf_r+0x176>
 8002e2e:	9105      	str	r1, [sp, #20]
 8002e30:	e7c3      	b.n	8002dba <_vfiprintf_r+0x176>
 8002e32:	4604      	mov	r4, r0
 8002e34:	2301      	movs	r3, #1
 8002e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e3a:	e7f0      	b.n	8002e1e <_vfiprintf_r+0x1da>
 8002e3c:	ab03      	add	r3, sp, #12
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	462a      	mov	r2, r5
 8002e42:	4630      	mov	r0, r6
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <_vfiprintf_r+0x25c>)
 8002e46:	a904      	add	r1, sp, #16
 8002e48:	f3af 8000 	nop.w
 8002e4c:	4607      	mov	r7, r0
 8002e4e:	1c78      	adds	r0, r7, #1
 8002e50:	d1d6      	bne.n	8002e00 <_vfiprintf_r+0x1bc>
 8002e52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e54:	07d9      	lsls	r1, r3, #31
 8002e56:	d405      	bmi.n	8002e64 <_vfiprintf_r+0x220>
 8002e58:	89ab      	ldrh	r3, [r5, #12]
 8002e5a:	059a      	lsls	r2, r3, #22
 8002e5c:	d402      	bmi.n	8002e64 <_vfiprintf_r+0x220>
 8002e5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e60:	f7ff fd85 	bl	800296e <__retarget_lock_release_recursive>
 8002e64:	89ab      	ldrh	r3, [r5, #12]
 8002e66:	065b      	lsls	r3, r3, #25
 8002e68:	f53f af12 	bmi.w	8002c90 <_vfiprintf_r+0x4c>
 8002e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e6e:	e711      	b.n	8002c94 <_vfiprintf_r+0x50>
 8002e70:	ab03      	add	r3, sp, #12
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	462a      	mov	r2, r5
 8002e76:	4630      	mov	r0, r6
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <_vfiprintf_r+0x25c>)
 8002e7a:	a904      	add	r1, sp, #16
 8002e7c:	f000 f882 	bl	8002f84 <_printf_i>
 8002e80:	e7e4      	b.n	8002e4c <_vfiprintf_r+0x208>
 8002e82:	bf00      	nop
 8002e84:	08003434 	.word	0x08003434
 8002e88:	08003454 	.word	0x08003454
 8002e8c:	08003414 	.word	0x08003414
 8002e90:	08003474 	.word	0x08003474
 8002e94:	0800347a 	.word	0x0800347a
 8002e98:	0800347e 	.word	0x0800347e
 8002e9c:	00000000 	.word	0x00000000
 8002ea0:	08002c1f 	.word	0x08002c1f

08002ea4 <_printf_common>:
 8002ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ea8:	4616      	mov	r6, r2
 8002eaa:	4699      	mov	r9, r3
 8002eac:	688a      	ldr	r2, [r1, #8]
 8002eae:	690b      	ldr	r3, [r1, #16]
 8002eb0:	4607      	mov	r7, r0
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bfb8      	it	lt
 8002eb6:	4613      	movlt	r3, r2
 8002eb8:	6033      	str	r3, [r6, #0]
 8002eba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ec4:	b10a      	cbz	r2, 8002eca <_printf_common+0x26>
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	6033      	str	r3, [r6, #0]
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	0699      	lsls	r1, r3, #26
 8002ece:	bf42      	ittt	mi
 8002ed0:	6833      	ldrmi	r3, [r6, #0]
 8002ed2:	3302      	addmi	r3, #2
 8002ed4:	6033      	strmi	r3, [r6, #0]
 8002ed6:	6825      	ldr	r5, [r4, #0]
 8002ed8:	f015 0506 	ands.w	r5, r5, #6
 8002edc:	d106      	bne.n	8002eec <_printf_common+0x48>
 8002ede:	f104 0a19 	add.w	sl, r4, #25
 8002ee2:	68e3      	ldr	r3, [r4, #12]
 8002ee4:	6832      	ldr	r2, [r6, #0]
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	42ab      	cmp	r3, r5
 8002eea:	dc28      	bgt.n	8002f3e <_printf_common+0x9a>
 8002eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ef0:	1e13      	subs	r3, r2, #0
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	bf18      	it	ne
 8002ef6:	2301      	movne	r3, #1
 8002ef8:	0692      	lsls	r2, r2, #26
 8002efa:	d42d      	bmi.n	8002f58 <_printf_common+0xb4>
 8002efc:	4649      	mov	r1, r9
 8002efe:	4638      	mov	r0, r7
 8002f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f04:	47c0      	blx	r8
 8002f06:	3001      	adds	r0, #1
 8002f08:	d020      	beq.n	8002f4c <_printf_common+0xa8>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	68e5      	ldr	r5, [r4, #12]
 8002f0e:	f003 0306 	and.w	r3, r3, #6
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	bf18      	it	ne
 8002f16:	2500      	movne	r5, #0
 8002f18:	6832      	ldr	r2, [r6, #0]
 8002f1a:	f04f 0600 	mov.w	r6, #0
 8002f1e:	68a3      	ldr	r3, [r4, #8]
 8002f20:	bf08      	it	eq
 8002f22:	1aad      	subeq	r5, r5, r2
 8002f24:	6922      	ldr	r2, [r4, #16]
 8002f26:	bf08      	it	eq
 8002f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bfc4      	itt	gt
 8002f30:	1a9b      	subgt	r3, r3, r2
 8002f32:	18ed      	addgt	r5, r5, r3
 8002f34:	341a      	adds	r4, #26
 8002f36:	42b5      	cmp	r5, r6
 8002f38:	d11a      	bne.n	8002f70 <_printf_common+0xcc>
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e008      	b.n	8002f50 <_printf_common+0xac>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4652      	mov	r2, sl
 8002f42:	4649      	mov	r1, r9
 8002f44:	4638      	mov	r0, r7
 8002f46:	47c0      	blx	r8
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_printf_common+0xb0>
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f54:	3501      	adds	r5, #1
 8002f56:	e7c4      	b.n	8002ee2 <_printf_common+0x3e>
 8002f58:	2030      	movs	r0, #48	; 0x30
 8002f5a:	18e1      	adds	r1, r4, r3
 8002f5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f66:	4422      	add	r2, r4
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f6e:	e7c5      	b.n	8002efc <_printf_common+0x58>
 8002f70:	2301      	movs	r3, #1
 8002f72:	4622      	mov	r2, r4
 8002f74:	4649      	mov	r1, r9
 8002f76:	4638      	mov	r0, r7
 8002f78:	47c0      	blx	r8
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d0e6      	beq.n	8002f4c <_printf_common+0xa8>
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7d9      	b.n	8002f36 <_printf_common+0x92>
	...

08002f84 <_printf_i>:
 8002f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	7e0f      	ldrb	r7, [r1, #24]
 8002f8a:	4691      	mov	r9, r2
 8002f8c:	2f78      	cmp	r7, #120	; 0x78
 8002f8e:	4680      	mov	r8, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	469a      	mov	sl, r3
 8002f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f9a:	d807      	bhi.n	8002fac <_printf_i+0x28>
 8002f9c:	2f62      	cmp	r7, #98	; 0x62
 8002f9e:	d80a      	bhi.n	8002fb6 <_printf_i+0x32>
 8002fa0:	2f00      	cmp	r7, #0
 8002fa2:	f000 80d9 	beq.w	8003158 <_printf_i+0x1d4>
 8002fa6:	2f58      	cmp	r7, #88	; 0x58
 8002fa8:	f000 80a4 	beq.w	80030f4 <_printf_i+0x170>
 8002fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fb4:	e03a      	b.n	800302c <_printf_i+0xa8>
 8002fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fba:	2b15      	cmp	r3, #21
 8002fbc:	d8f6      	bhi.n	8002fac <_printf_i+0x28>
 8002fbe:	a101      	add	r1, pc, #4	; (adr r1, 8002fc4 <_printf_i+0x40>)
 8002fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fc4:	0800301d 	.word	0x0800301d
 8002fc8:	08003031 	.word	0x08003031
 8002fcc:	08002fad 	.word	0x08002fad
 8002fd0:	08002fad 	.word	0x08002fad
 8002fd4:	08002fad 	.word	0x08002fad
 8002fd8:	08002fad 	.word	0x08002fad
 8002fdc:	08003031 	.word	0x08003031
 8002fe0:	08002fad 	.word	0x08002fad
 8002fe4:	08002fad 	.word	0x08002fad
 8002fe8:	08002fad 	.word	0x08002fad
 8002fec:	08002fad 	.word	0x08002fad
 8002ff0:	0800313f 	.word	0x0800313f
 8002ff4:	08003061 	.word	0x08003061
 8002ff8:	08003121 	.word	0x08003121
 8002ffc:	08002fad 	.word	0x08002fad
 8003000:	08002fad 	.word	0x08002fad
 8003004:	08003161 	.word	0x08003161
 8003008:	08002fad 	.word	0x08002fad
 800300c:	08003061 	.word	0x08003061
 8003010:	08002fad 	.word	0x08002fad
 8003014:	08002fad 	.word	0x08002fad
 8003018:	08003129 	.word	0x08003129
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	602a      	str	r2, [r5, #0]
 8003024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800302c:	2301      	movs	r3, #1
 800302e:	e0a4      	b.n	800317a <_printf_i+0x1f6>
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	6829      	ldr	r1, [r5, #0]
 8003034:	0606      	lsls	r6, r0, #24
 8003036:	f101 0304 	add.w	r3, r1, #4
 800303a:	d50a      	bpl.n	8003052 <_printf_i+0xce>
 800303c:	680e      	ldr	r6, [r1, #0]
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	2e00      	cmp	r6, #0
 8003042:	da03      	bge.n	800304c <_printf_i+0xc8>
 8003044:	232d      	movs	r3, #45	; 0x2d
 8003046:	4276      	negs	r6, r6
 8003048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800304c:	230a      	movs	r3, #10
 800304e:	485e      	ldr	r0, [pc, #376]	; (80031c8 <_printf_i+0x244>)
 8003050:	e019      	b.n	8003086 <_printf_i+0x102>
 8003052:	680e      	ldr	r6, [r1, #0]
 8003054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003058:	602b      	str	r3, [r5, #0]
 800305a:	bf18      	it	ne
 800305c:	b236      	sxthne	r6, r6
 800305e:	e7ef      	b.n	8003040 <_printf_i+0xbc>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1d19      	adds	r1, r3, #4
 8003066:	6029      	str	r1, [r5, #0]
 8003068:	0601      	lsls	r1, r0, #24
 800306a:	d501      	bpl.n	8003070 <_printf_i+0xec>
 800306c:	681e      	ldr	r6, [r3, #0]
 800306e:	e002      	b.n	8003076 <_printf_i+0xf2>
 8003070:	0646      	lsls	r6, r0, #25
 8003072:	d5fb      	bpl.n	800306c <_printf_i+0xe8>
 8003074:	881e      	ldrh	r6, [r3, #0]
 8003076:	2f6f      	cmp	r7, #111	; 0x6f
 8003078:	bf0c      	ite	eq
 800307a:	2308      	moveq	r3, #8
 800307c:	230a      	movne	r3, #10
 800307e:	4852      	ldr	r0, [pc, #328]	; (80031c8 <_printf_i+0x244>)
 8003080:	2100      	movs	r1, #0
 8003082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003086:	6865      	ldr	r5, [r4, #4]
 8003088:	2d00      	cmp	r5, #0
 800308a:	bfa8      	it	ge
 800308c:	6821      	ldrge	r1, [r4, #0]
 800308e:	60a5      	str	r5, [r4, #8]
 8003090:	bfa4      	itt	ge
 8003092:	f021 0104 	bicge.w	r1, r1, #4
 8003096:	6021      	strge	r1, [r4, #0]
 8003098:	b90e      	cbnz	r6, 800309e <_printf_i+0x11a>
 800309a:	2d00      	cmp	r5, #0
 800309c:	d04d      	beq.n	800313a <_printf_i+0x1b6>
 800309e:	4615      	mov	r5, r2
 80030a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80030a4:	fb03 6711 	mls	r7, r3, r1, r6
 80030a8:	5dc7      	ldrb	r7, [r0, r7]
 80030aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030ae:	4637      	mov	r7, r6
 80030b0:	42bb      	cmp	r3, r7
 80030b2:	460e      	mov	r6, r1
 80030b4:	d9f4      	bls.n	80030a0 <_printf_i+0x11c>
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d10b      	bne.n	80030d2 <_printf_i+0x14e>
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	07de      	lsls	r6, r3, #31
 80030be:	d508      	bpl.n	80030d2 <_printf_i+0x14e>
 80030c0:	6923      	ldr	r3, [r4, #16]
 80030c2:	6861      	ldr	r1, [r4, #4]
 80030c4:	4299      	cmp	r1, r3
 80030c6:	bfde      	ittt	le
 80030c8:	2330      	movle	r3, #48	; 0x30
 80030ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030d2:	1b52      	subs	r2, r2, r5
 80030d4:	6122      	str	r2, [r4, #16]
 80030d6:	464b      	mov	r3, r9
 80030d8:	4621      	mov	r1, r4
 80030da:	4640      	mov	r0, r8
 80030dc:	f8cd a000 	str.w	sl, [sp]
 80030e0:	aa03      	add	r2, sp, #12
 80030e2:	f7ff fedf 	bl	8002ea4 <_printf_common>
 80030e6:	3001      	adds	r0, #1
 80030e8:	d14c      	bne.n	8003184 <_printf_i+0x200>
 80030ea:	f04f 30ff 	mov.w	r0, #4294967295
 80030ee:	b004      	add	sp, #16
 80030f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030f4:	4834      	ldr	r0, [pc, #208]	; (80031c8 <_printf_i+0x244>)
 80030f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030fa:	6829      	ldr	r1, [r5, #0]
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003102:	6029      	str	r1, [r5, #0]
 8003104:	061d      	lsls	r5, r3, #24
 8003106:	d514      	bpl.n	8003132 <_printf_i+0x1ae>
 8003108:	07df      	lsls	r7, r3, #31
 800310a:	bf44      	itt	mi
 800310c:	f043 0320 	orrmi.w	r3, r3, #32
 8003110:	6023      	strmi	r3, [r4, #0]
 8003112:	b91e      	cbnz	r6, 800311c <_printf_i+0x198>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	f023 0320 	bic.w	r3, r3, #32
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	2310      	movs	r3, #16
 800311e:	e7af      	b.n	8003080 <_printf_i+0xfc>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f043 0320 	orr.w	r3, r3, #32
 8003126:	6023      	str	r3, [r4, #0]
 8003128:	2378      	movs	r3, #120	; 0x78
 800312a:	4828      	ldr	r0, [pc, #160]	; (80031cc <_printf_i+0x248>)
 800312c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003130:	e7e3      	b.n	80030fa <_printf_i+0x176>
 8003132:	0659      	lsls	r1, r3, #25
 8003134:	bf48      	it	mi
 8003136:	b2b6      	uxthmi	r6, r6
 8003138:	e7e6      	b.n	8003108 <_printf_i+0x184>
 800313a:	4615      	mov	r5, r2
 800313c:	e7bb      	b.n	80030b6 <_printf_i+0x132>
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	6826      	ldr	r6, [r4, #0]
 8003142:	1d18      	adds	r0, r3, #4
 8003144:	6961      	ldr	r1, [r4, #20]
 8003146:	6028      	str	r0, [r5, #0]
 8003148:	0635      	lsls	r5, r6, #24
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	d501      	bpl.n	8003152 <_printf_i+0x1ce>
 800314e:	6019      	str	r1, [r3, #0]
 8003150:	e002      	b.n	8003158 <_printf_i+0x1d4>
 8003152:	0670      	lsls	r0, r6, #25
 8003154:	d5fb      	bpl.n	800314e <_printf_i+0x1ca>
 8003156:	8019      	strh	r1, [r3, #0]
 8003158:	2300      	movs	r3, #0
 800315a:	4615      	mov	r5, r2
 800315c:	6123      	str	r3, [r4, #16]
 800315e:	e7ba      	b.n	80030d6 <_printf_i+0x152>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	1d1a      	adds	r2, r3, #4
 8003166:	602a      	str	r2, [r5, #0]
 8003168:	681d      	ldr	r5, [r3, #0]
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	4628      	mov	r0, r5
 800316e:	f000 f8d9 	bl	8003324 <memchr>
 8003172:	b108      	cbz	r0, 8003178 <_printf_i+0x1f4>
 8003174:	1b40      	subs	r0, r0, r5
 8003176:	6060      	str	r0, [r4, #4]
 8003178:	6863      	ldr	r3, [r4, #4]
 800317a:	6123      	str	r3, [r4, #16]
 800317c:	2300      	movs	r3, #0
 800317e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003182:	e7a8      	b.n	80030d6 <_printf_i+0x152>
 8003184:	462a      	mov	r2, r5
 8003186:	4649      	mov	r1, r9
 8003188:	4640      	mov	r0, r8
 800318a:	6923      	ldr	r3, [r4, #16]
 800318c:	47d0      	blx	sl
 800318e:	3001      	adds	r0, #1
 8003190:	d0ab      	beq.n	80030ea <_printf_i+0x166>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	079b      	lsls	r3, r3, #30
 8003196:	d413      	bmi.n	80031c0 <_printf_i+0x23c>
 8003198:	68e0      	ldr	r0, [r4, #12]
 800319a:	9b03      	ldr	r3, [sp, #12]
 800319c:	4298      	cmp	r0, r3
 800319e:	bfb8      	it	lt
 80031a0:	4618      	movlt	r0, r3
 80031a2:	e7a4      	b.n	80030ee <_printf_i+0x16a>
 80031a4:	2301      	movs	r3, #1
 80031a6:	4632      	mov	r2, r6
 80031a8:	4649      	mov	r1, r9
 80031aa:	4640      	mov	r0, r8
 80031ac:	47d0      	blx	sl
 80031ae:	3001      	adds	r0, #1
 80031b0:	d09b      	beq.n	80030ea <_printf_i+0x166>
 80031b2:	3501      	adds	r5, #1
 80031b4:	68e3      	ldr	r3, [r4, #12]
 80031b6:	9903      	ldr	r1, [sp, #12]
 80031b8:	1a5b      	subs	r3, r3, r1
 80031ba:	42ab      	cmp	r3, r5
 80031bc:	dcf2      	bgt.n	80031a4 <_printf_i+0x220>
 80031be:	e7eb      	b.n	8003198 <_printf_i+0x214>
 80031c0:	2500      	movs	r5, #0
 80031c2:	f104 0619 	add.w	r6, r4, #25
 80031c6:	e7f5      	b.n	80031b4 <_printf_i+0x230>
 80031c8:	08003485 	.word	0x08003485
 80031cc:	08003496 	.word	0x08003496

080031d0 <_sbrk_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	2300      	movs	r3, #0
 80031d4:	4d05      	ldr	r5, [pc, #20]	; (80031ec <_sbrk_r+0x1c>)
 80031d6:	4604      	mov	r4, r0
 80031d8:	4608      	mov	r0, r1
 80031da:	602b      	str	r3, [r5, #0]
 80031dc:	f7fd fae8 	bl	80007b0 <_sbrk>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	d102      	bne.n	80031ea <_sbrk_r+0x1a>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	b103      	cbz	r3, 80031ea <_sbrk_r+0x1a>
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
 80031ec:	20000134 	.word	0x20000134

080031f0 <__sread>:
 80031f0:	b510      	push	{r4, lr}
 80031f2:	460c      	mov	r4, r1
 80031f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f8:	f000 f8ae 	bl	8003358 <_read_r>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	bfab      	itete	ge
 8003200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003202:	89a3      	ldrhlt	r3, [r4, #12]
 8003204:	181b      	addge	r3, r3, r0
 8003206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800320a:	bfac      	ite	ge
 800320c:	6563      	strge	r3, [r4, #84]	; 0x54
 800320e:	81a3      	strhlt	r3, [r4, #12]
 8003210:	bd10      	pop	{r4, pc}

08003212 <__swrite>:
 8003212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003216:	461f      	mov	r7, r3
 8003218:	898b      	ldrh	r3, [r1, #12]
 800321a:	4605      	mov	r5, r0
 800321c:	05db      	lsls	r3, r3, #23
 800321e:	460c      	mov	r4, r1
 8003220:	4616      	mov	r6, r2
 8003222:	d505      	bpl.n	8003230 <__swrite+0x1e>
 8003224:	2302      	movs	r3, #2
 8003226:	2200      	movs	r2, #0
 8003228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322c:	f000 f868 	bl	8003300 <_lseek_r>
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	4632      	mov	r2, r6
 8003234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003238:	81a3      	strh	r3, [r4, #12]
 800323a:	4628      	mov	r0, r5
 800323c:	463b      	mov	r3, r7
 800323e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003246:	f000 b817 	b.w	8003278 <_write_r>

0800324a <__sseek>:
 800324a:	b510      	push	{r4, lr}
 800324c:	460c      	mov	r4, r1
 800324e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003252:	f000 f855 	bl	8003300 <_lseek_r>
 8003256:	1c43      	adds	r3, r0, #1
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	bf15      	itete	ne
 800325c:	6560      	strne	r0, [r4, #84]	; 0x54
 800325e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003266:	81a3      	strheq	r3, [r4, #12]
 8003268:	bf18      	it	ne
 800326a:	81a3      	strhne	r3, [r4, #12]
 800326c:	bd10      	pop	{r4, pc}

0800326e <__sclose>:
 800326e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003272:	f000 b813 	b.w	800329c <_close_r>
	...

08003278 <_write_r>:
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	2200      	movs	r2, #0
 8003282:	4d05      	ldr	r5, [pc, #20]	; (8003298 <_write_r+0x20>)
 8003284:	602a      	str	r2, [r5, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f7fd fa45 	bl	8000716 <_write>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_write_r+0x1e>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_write_r+0x1e>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	20000134 	.word	0x20000134

0800329c <_close_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	2300      	movs	r3, #0
 80032a0:	4d05      	ldr	r5, [pc, #20]	; (80032b8 <_close_r+0x1c>)
 80032a2:	4604      	mov	r4, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	f7fd fa51 	bl	800074e <_close>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d102      	bne.n	80032b6 <_close_r+0x1a>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	b103      	cbz	r3, 80032b6 <_close_r+0x1a>
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	20000134 	.word	0x20000134

080032bc <_fstat_r>:
 80032bc:	b538      	push	{r3, r4, r5, lr}
 80032be:	2300      	movs	r3, #0
 80032c0:	4d06      	ldr	r5, [pc, #24]	; (80032dc <_fstat_r+0x20>)
 80032c2:	4604      	mov	r4, r0
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	f7fd fa4b 	bl	8000764 <_fstat>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	d102      	bne.n	80032d8 <_fstat_r+0x1c>
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	b103      	cbz	r3, 80032d8 <_fstat_r+0x1c>
 80032d6:	6023      	str	r3, [r4, #0]
 80032d8:	bd38      	pop	{r3, r4, r5, pc}
 80032da:	bf00      	nop
 80032dc:	20000134 	.word	0x20000134

080032e0 <_isatty_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	2300      	movs	r3, #0
 80032e4:	4d05      	ldr	r5, [pc, #20]	; (80032fc <_isatty_r+0x1c>)
 80032e6:	4604      	mov	r4, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	602b      	str	r3, [r5, #0]
 80032ec:	f7fd fa49 	bl	8000782 <_isatty>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_isatty_r+0x1a>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_isatty_r+0x1a>
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	20000134 	.word	0x20000134

08003300 <_lseek_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4604      	mov	r4, r0
 8003304:	4608      	mov	r0, r1
 8003306:	4611      	mov	r1, r2
 8003308:	2200      	movs	r2, #0
 800330a:	4d05      	ldr	r5, [pc, #20]	; (8003320 <_lseek_r+0x20>)
 800330c:	602a      	str	r2, [r5, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	f7fd fa41 	bl	8000796 <_lseek>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_lseek_r+0x1e>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_lseek_r+0x1e>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000134 	.word	0x20000134

08003324 <memchr>:
 8003324:	4603      	mov	r3, r0
 8003326:	b510      	push	{r4, lr}
 8003328:	b2c9      	uxtb	r1, r1
 800332a:	4402      	add	r2, r0
 800332c:	4293      	cmp	r3, r2
 800332e:	4618      	mov	r0, r3
 8003330:	d101      	bne.n	8003336 <memchr+0x12>
 8003332:	2000      	movs	r0, #0
 8003334:	e003      	b.n	800333e <memchr+0x1a>
 8003336:	7804      	ldrb	r4, [r0, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	428c      	cmp	r4, r1
 800333c:	d1f6      	bne.n	800332c <memchr+0x8>
 800333e:	bd10      	pop	{r4, pc}

08003340 <__malloc_lock>:
 8003340:	4801      	ldr	r0, [pc, #4]	; (8003348 <__malloc_lock+0x8>)
 8003342:	f7ff bb13 	b.w	800296c <__retarget_lock_acquire_recursive>
 8003346:	bf00      	nop
 8003348:	20000128 	.word	0x20000128

0800334c <__malloc_unlock>:
 800334c:	4801      	ldr	r0, [pc, #4]	; (8003354 <__malloc_unlock+0x8>)
 800334e:	f7ff bb0e 	b.w	800296e <__retarget_lock_release_recursive>
 8003352:	bf00      	nop
 8003354:	20000128 	.word	0x20000128

08003358 <_read_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	2200      	movs	r2, #0
 8003362:	4d05      	ldr	r5, [pc, #20]	; (8003378 <_read_r+0x20>)
 8003364:	602a      	str	r2, [r5, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f7fd f9b8 	bl	80006dc <_read>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_read_r+0x1e>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_read_r+0x1e>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	20000134 	.word	0x20000134

0800337c <_init>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr

08003388 <_fini>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr
