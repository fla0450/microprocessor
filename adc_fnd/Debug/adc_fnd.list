
adc_fnd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  080041ec  080041ec  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041ec  080041ec  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200000dc  080042d0  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080042d0  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e59c  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020dd  00000000  00000000  0002e6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00030780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001901f  00000000  00000000  00032258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f510  00000000  00000000  0004b277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bd6  00000000  00000000  0005a787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb35d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000eb3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	080040e4 	.word	0x080040e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	080040e4 	.word	0x080040e4

0800014c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1000);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015a:	2201      	movs	r2, #1
 800015c:	4808      	ldr	r0, [pc, #32]	; (8000180 <__io_putchar+0x34>)
 800015e:	f002 fe7b 	bl	8002e58 <HAL_UART_Transmit>
   if (ch == '\n')
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b0a      	cmp	r3, #10
 8000166:	d106      	bne.n	8000176 <__io_putchar+0x2a>
      HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	2201      	movs	r2, #1
 800016e:	4905      	ldr	r1, [pc, #20]	; (8000184 <__io_putchar+0x38>)
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <__io_putchar+0x34>)
 8000172:	f002 fe71 	bl	8002e58 <HAL_UART_Transmit>
   return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	20000170 	.word	0x20000170
 8000184:	080040fc 	.word	0x080040fc

08000188 <display_fnd>:
};
FND sel[4] = {
  {GPIOA, GPIO_PIN_10}, {GPIOA, GPIO_PIN_11},
  {GPIOC, GPIO_PIN_4}, {GPIOC, GPIO_PIN_3}
};
void display_fnd(uint8_t data, uint8_t position, uint32_t time) {  // 함수
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	603a      	str	r2, [r7, #0]
 8000192:	71fb      	strb	r3, [r7, #7]
 8000194:	460b      	mov	r3, r1
 8000196:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 4; i++) {
 8000198:	2300      	movs	r3, #0
 800019a:	60fb      	str	r3, [r7, #12]
 800019c:	e021      	b.n	80001e2 <display_fnd+0x5a>
    if(i == position)
 800019e:	79bb      	ldrb	r3, [r7, #6]
 80001a0:	68fa      	ldr	r2, [r7, #12]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d10d      	bne.n	80001c2 <display_fnd+0x3a>
      HAL_GPIO_WritePin(sel[i].port, sel[i].pin, 1);
 80001a6:	4a2a      	ldr	r2, [pc, #168]	; (8000250 <display_fnd+0xc8>)
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001ae:	4a28      	ldr	r2, [pc, #160]	; (8000250 <display_fnd+0xc8>)
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	00db      	lsls	r3, r3, #3
 80001b4:	4413      	add	r3, r2
 80001b6:	889b      	ldrh	r3, [r3, #4]
 80001b8:	2201      	movs	r2, #1
 80001ba:	4619      	mov	r1, r3
 80001bc:	f001 fc62 	bl	8001a84 <HAL_GPIO_WritePin>
 80001c0:	e00c      	b.n	80001dc <display_fnd+0x54>
    else
      HAL_GPIO_WritePin(sel[i].port, sel[i].pin, 0);
 80001c2:	4a23      	ldr	r2, [pc, #140]	; (8000250 <display_fnd+0xc8>)
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001ca:	4a21      	ldr	r2, [pc, #132]	; (8000250 <display_fnd+0xc8>)
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	889b      	ldrh	r3, [r3, #4]
 80001d4:	2200      	movs	r2, #0
 80001d6:	4619      	mov	r1, r3
 80001d8:	f001 fc54 	bl	8001a84 <HAL_GPIO_WritePin>
  for (i = 0; i < 4; i++) {
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	3301      	adds	r3, #1
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	ddda      	ble.n	800019e <display_fnd+0x16>
  }
  for(i = 0; i < 8; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e025      	b.n	800023a <display_fnd+0xb2>
    if((data & (1 << i)) != 0)
 80001ee:	79fa      	ldrb	r2, [r7, #7]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	fa42 f303 	asr.w	r3, r2, r3
 80001f6:	f003 0301 	and.w	r3, r3, #1
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d00d      	beq.n	800021a <display_fnd+0x92>
      HAL_GPIO_WritePin(value[i].port, value[i].pin, 1);
 80001fe:	4a15      	ldr	r2, [pc, #84]	; (8000254 <display_fnd+0xcc>)
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000206:	4a13      	ldr	r2, [pc, #76]	; (8000254 <display_fnd+0xcc>)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	00db      	lsls	r3, r3, #3
 800020c:	4413      	add	r3, r2
 800020e:	889b      	ldrh	r3, [r3, #4]
 8000210:	2201      	movs	r2, #1
 8000212:	4619      	mov	r1, r3
 8000214:	f001 fc36 	bl	8001a84 <HAL_GPIO_WritePin>
 8000218:	e00c      	b.n	8000234 <display_fnd+0xac>
    else
      HAL_GPIO_WritePin(value[i].port, value[i].pin, 0);
 800021a:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <display_fnd+0xcc>)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000222:	4a0c      	ldr	r2, [pc, #48]	; (8000254 <display_fnd+0xcc>)
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	00db      	lsls	r3, r3, #3
 8000228:	4413      	add	r3, r2
 800022a:	889b      	ldrh	r3, [r3, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	4619      	mov	r1, r3
 8000230:	f001 fc28 	bl	8001a84 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++) {
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	3301      	adds	r3, #1
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	2b07      	cmp	r3, #7
 800023e:	ddd6      	ble.n	80001ee <display_fnd+0x66>
  }
  HAL_Delay(time);
 8000240:	6838      	ldr	r0, [r7, #0]
 8000242:	f000 fc8f 	bl	8000b64 <HAL_Delay>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000004c 	.word	0x2000004c
 8000254:	2000000c 	.word	0x2000000c

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fc1f 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f8af 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f9b9 	bl	80005dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800026a:	f000 f901 	bl	8000470 <MX_ADC1_Init>
  MX_TIM2_Init();
 800026e:	f000 f93d 	bl	80004ec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000272:	f000 f989 	bl	8000588 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000276:	484a      	ldr	r0, [pc, #296]	; (80003a0 <main+0x148>)
 8000278:	f001 f8c4 	bl	8001404 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800027c:	4848      	ldr	r0, [pc, #288]	; (80003a0 <main+0x148>)
 800027e:	f000 fd6d 	bl	8000d5c <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000282:	4848      	ldr	r0, [pc, #288]	; (80003a4 <main+0x14c>)
 8000284:	f002 f9e2 	bl	800264c <HAL_TIM_Base_Start_IT>
  cnt = HAL_GetTick();
 8000288:	f000 fc62 	bl	8000b50 <HAL_GetTick>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b45      	ldr	r3, [pc, #276]	; (80003a8 <main+0x150>)
 8000292:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#if 1
    /* USER CODE END WHILE */
	  a = adc_value/1000;
 8000294:	4b45      	ldr	r3, [pc, #276]	; (80003ac <main+0x154>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a45      	ldr	r2, [pc, #276]	; (80003b0 <main+0x158>)
 800029a:	fb82 1203 	smull	r1, r2, r2, r3
 800029e:	1192      	asrs	r2, r2, #6
 80002a0:	17db      	asrs	r3, r3, #31
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	60fb      	str	r3, [r7, #12]
	  b = (adc_value%1000)/100;
 80002a6:	4b41      	ldr	r3, [pc, #260]	; (80003ac <main+0x154>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	4b41      	ldr	r3, [pc, #260]	; (80003b0 <main+0x158>)
 80002ac:	fb83 1302 	smull	r1, r3, r3, r2
 80002b0:	1199      	asrs	r1, r3, #6
 80002b2:	17d3      	asrs	r3, r2, #31
 80002b4:	1acb      	subs	r3, r1, r3
 80002b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002ba:	fb01 f303 	mul.w	r3, r1, r3
 80002be:	1ad3      	subs	r3, r2, r3
 80002c0:	4a3c      	ldr	r2, [pc, #240]	; (80003b4 <main+0x15c>)
 80002c2:	fb82 1203 	smull	r1, r2, r2, r3
 80002c6:	1152      	asrs	r2, r2, #5
 80002c8:	17db      	asrs	r3, r3, #31
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	60bb      	str	r3, [r7, #8]
	  c = (adc_value%100)/10;
 80002ce:	4b37      	ldr	r3, [pc, #220]	; (80003ac <main+0x154>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <main+0x15c>)
 80002d4:	fb83 1302 	smull	r1, r3, r3, r2
 80002d8:	1159      	asrs	r1, r3, #5
 80002da:	17d3      	asrs	r3, r2, #31
 80002dc:	1acb      	subs	r3, r1, r3
 80002de:	2164      	movs	r1, #100	; 0x64
 80002e0:	fb01 f303 	mul.w	r3, r1, r3
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a34      	ldr	r2, [pc, #208]	; (80003b8 <main+0x160>)
 80002e8:	fb82 1203 	smull	r1, r2, r2, r3
 80002ec:	1092      	asrs	r2, r2, #2
 80002ee:	17db      	asrs	r3, r3, #31
 80002f0:	1ad3      	subs	r3, r2, r3
 80002f2:	607b      	str	r3, [r7, #4]
	  d = adc_value%10;
 80002f4:	4b2d      	ldr	r3, [pc, #180]	; (80003ac <main+0x154>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b2f      	ldr	r3, [pc, #188]	; (80003b8 <main+0x160>)
 80002fa:	fb83 1302 	smull	r1, r3, r3, r2
 80002fe:	1099      	asrs	r1, r3, #2
 8000300:	17d3      	asrs	r3, r2, #31
 8000302:	1ac9      	subs	r1, r1, r3
 8000304:	460b      	mov	r3, r1
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	440b      	add	r3, r1
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	603b      	str	r3, [r7, #0]
	  display_fnd(number[a], 3, 1);
 8000310:	4a2a      	ldr	r2, [pc, #168]	; (80003bc <main+0x164>)
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	4413      	add	r3, r2
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2201      	movs	r2, #1
 800031a:	2103      	movs	r1, #3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff33 	bl	8000188 <display_fnd>
	  display_fnd(number[b], 2, 1);
 8000322:	4a26      	ldr	r2, [pc, #152]	; (80003bc <main+0x164>)
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2201      	movs	r2, #1
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff2a 	bl	8000188 <display_fnd>
	  display_fnd(number[c], 1, 1);
 8000334:	4a21      	ldr	r2, [pc, #132]	; (80003bc <main+0x164>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2201      	movs	r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff21 	bl	8000188 <display_fnd>
	  display_fnd(number[d], 0, 1);
 8000346:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <main+0x164>)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2201      	movs	r2, #1
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff18 	bl	8000188 <display_fnd>
#endif
	  if(HAL_GetTick() - cnt > 1000){
 8000358:	f000 fbfa 	bl	8000b50 <HAL_GetTick>
 800035c:	4603      	mov	r3, r0
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <main+0x150>)
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000368:	d994      	bls.n	8000294 <main+0x3c>
		  if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 800036a:	210a      	movs	r1, #10
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <main+0x148>)
 800036e:	f000 fda3 	bl	8000eb8 <HAL_ADC_PollForConversion>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d18d      	bne.n	8000294 <main+0x3c>
			  adc_value = HAL_ADC_GetValue(&hadc1);
 8000378:	4809      	ldr	r0, [pc, #36]	; (80003a0 <main+0x148>)
 800037a:	f000 fea3 	bl	80010c4 <HAL_ADC_GetValue>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <main+0x154>)
 8000384:	601a      	str	r2, [r3, #0]
			  printf("ADC_VLAUR : %d\n\n", adc_value);
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0x154>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <main+0x168>)
 800038e:	f002 ff15 	bl	80031bc <iprintf>
			  cnt = HAL_GetTick();
 8000392:	f000 fbdd 	bl	8000b50 <HAL_GetTick>
 8000396:	4603      	mov	r3, r0
 8000398:	461a      	mov	r2, r3
 800039a:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <main+0x150>)
 800039c:	601a      	str	r2, [r3, #0]
	  a = adc_value/1000;
 800039e:	e779      	b.n	8000294 <main+0x3c>
 80003a0:	200000f8 	.word	0x200000f8
 80003a4:	20000128 	.word	0x20000128
 80003a8:	200001bc 	.word	0x200001bc
 80003ac:	200001b8 	.word	0x200001b8
 80003b0:	10624dd3 	.word	0x10624dd3
 80003b4:	51eb851f 	.word	0x51eb851f
 80003b8:	66666667 	.word	0x66666667
 80003bc:	20000000 	.word	0x20000000
 80003c0:	08004100 	.word	0x08004100

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b094      	sub	sp, #80	; 0x50
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	2228      	movs	r2, #40	; 0x28
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 feea 	bl	80031ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f4:	2302      	movs	r3, #2
 80003f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fc:	2310      	movs	r3, #16
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000400:	2302      	movs	r3, #2
 8000402:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000404:	2300      	movs	r3, #0
 8000406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000408:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800040c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fb4e 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800041e:	f000 f95f 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	230f      	movs	r3, #15
 8000424:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fdbb 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000448:	f000 f94a 	bl	80006e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800044c:	2302      	movs	r3, #2
 800044e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	4618      	mov	r0, r3
 8000458:	f001 ff3c 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000462:	f000 f93d 	bl	80006e0 <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3750      	adds	r7, #80	; 0x50
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_ADC1_Init+0x74>)
 8000482:	4a19      	ldr	r2, [pc, #100]	; (80004e8 <MX_ADC1_Init+0x78>)
 8000484:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_ADC1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_ADC1_Init+0x74>)
 800048e:	2201      	movs	r2, #1
 8000490:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_ADC1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_ADC1_Init+0x74>)
 800049a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800049e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <MX_ADC1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_ADC1_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ac:	480d      	ldr	r0, [pc, #52]	; (80004e4 <MX_ADC1_Init+0x74>)
 80004ae:	f000 fb7d 	bl	8000bac <HAL_ADC_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004b8:	f000 f912 	bl	80006e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_ADC1_Init+0x74>)
 80004ce:	f000 fe05 	bl	80010dc <HAL_ADC_ConfigChannel>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004d8:	f000 f902 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000f8 	.word	0x200000f8
 80004e8:	40012400 	.word	0x40012400

080004ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_TIM2_Init+0x98>)
 800050a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_TIM2_Init+0x98>)
 8000512:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_TIM2_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_TIM2_Init+0x98>)
 8000520:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000524:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_TIM2_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_TIM2_Init+0x98>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000532:	4814      	ldr	r0, [pc, #80]	; (8000584 <MX_TIM2_Init+0x98>)
 8000534:	f002 f83a 	bl	80025ac <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800053e:	f000 f8cf 	bl	80006e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	4619      	mov	r1, r3
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <MX_TIM2_Init+0x98>)
 8000550:	f002 f9d6 	bl	8002900 <HAL_TIM_ConfigClockSource>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800055a:	f000 f8c1 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <MX_TIM2_Init+0x98>)
 800056c:	f002 fbb4 	bl	8002cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000576:	f000 f8b3 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000128 	.word	0x20000128

08000588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_USART2_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005c0:	f002 fbfa 	bl	8002db8 <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ca:	f000 f889 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000170 	.word	0x20000170
 80005d8:	40004400 	.word	0x40004400

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <MX_GPIO_Init+0xf4>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a36      	ldr	r2, [pc, #216]	; (80006d0 <MX_GPIO_Init+0xf4>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <MX_GPIO_Init+0xf4>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <MX_GPIO_Init+0xf4>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a30      	ldr	r2, [pc, #192]	; (80006d0 <MX_GPIO_Init+0xf4>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <MX_GPIO_Init+0xf4>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0320 	and.w	r3, r3, #32
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <MX_GPIO_Init+0xf4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <MX_GPIO_Init+0xf4>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <MX_GPIO_Init+0xf4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <MX_GPIO_Init+0xf4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <MX_GPIO_Init+0xf4>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <MX_GPIO_Init+0xf4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2118      	movs	r1, #24
 8000654:	481f      	ldr	r0, [pc, #124]	; (80006d4 <MX_GPIO_Init+0xf8>)
 8000656:	f001 fa15 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800065a:	2200      	movs	r2, #0
 800065c:	21ff      	movs	r1, #255	; 0xff
 800065e:	481e      	ldr	r0, [pc, #120]	; (80006d8 <MX_GPIO_Init+0xfc>)
 8000660:	f001 fa10 	bl	8001a84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800066a:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_GPIO_Init+0x100>)
 800066c:	f001 fa0a 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000670:	2318      	movs	r3, #24
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_GPIO_Init+0xf8>)
 8000688:	f001 f878 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800068c:	23ff      	movs	r3, #255	; 0xff
 800068e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_GPIO_Init+0xfc>)
 80006a4:	f001 f86a 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_GPIO_Init+0x100>)
 80006c2:	f001 f85b 	bl	800177c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	3720      	adds	r7, #32
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40010c00 	.word	0x40010c00
 80006dc:	40010800 	.word	0x40010800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_MspInit+0x5c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x5c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_MspInit+0x60>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_MspInit+0x60>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000
 800074c:	40010000 	.word	0x40010000

08000750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_ADC_MspInit+0x6c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d121      	bne.n	80007b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 8000776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_ADC_MspInit+0x70>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a4:	2303      	movs	r3, #3
 80007a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_ADC_MspInit+0x74>)
 80007b0:	f000 ffe4 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d8:	d113      	bne.n	8000802 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_TIM_Base_MspInit+0x44>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	201c      	movs	r0, #28
 80007f8:	f000 ff89 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007fc:	201c      	movs	r0, #28
 80007fe:	f000 ffa2 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <HAL_UART_MspInit+0x88>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d12f      	bne.n	8000890 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_UART_MspInit+0x8c>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <HAL_UART_MspInit+0x8c>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	61d3      	str	r3, [r2, #28]
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_UART_MspInit+0x8c>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_UART_MspInit+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_UART_MspInit+0x8c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000860:	2304      	movs	r3, #4
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000874:	f000 ff82 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000878:	2308      	movs	r3, #8
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800088c:	f000 ff76 	bl	800177c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <NMI_Handler+0x4>

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ea:	f000 f91f 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM2_IRQHandler+0x10>)
 80008fa:	f001 fef9 	bl	80026f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000128 	.word	0x20000128

08000908 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e00a      	b.n	8000930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091a:	f3af 8000 	nop.w
 800091e:	4601      	mov	r1, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf0      	blt.n	800091a <_read+0x12>
  }

  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	e009      	b.n	8000968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fbf5 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf1      	blt.n	8000954 <_write+0x12>
  }
  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_close>:

int _close(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a0:	605a      	str	r2, [r3, #4]
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <_isatty>:

int _isatty(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f002 fba4 	bl	8003158 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20005000 	.word	0x20005000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	200001c0 	.word	0x200001c0
 8000a44:	200001d8 	.word	0x200001d8

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff fff8 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	; (8000a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a5a:	490c      	ldr	r1, [pc, #48]	; (8000a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a70:	4c09      	ldr	r4, [pc, #36]	; (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f002 fb71 	bl	8003164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff fbe9 	bl	8000258 <main>
  bx lr
 8000a86:	4770      	bx	lr
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000a90:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 8000a94:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000a98:	200001d8 	.word	0x200001d8

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_Init+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_Init+0x28>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 fe21 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe16 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fe39 	bl	8001762 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 fe01 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000006c 	.word	0x2000006c
 8000b24:	20000074 	.word	0x20000074
 8000b28:	20000070 	.word	0x20000070

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000074 	.word	0x20000074
 8000b4c:	200001c4 	.word	0x200001c4

08000b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	200001c4 	.word	0x200001c4

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff0 	bl	8000b50 <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffe0 	bl	8000b50 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000074 	.word	0x20000074

08000bac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0be      	b.n	8000d4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fdb0 	bl	8000750 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fbc5 	bl	8001380 <ADC_ConversionStop_Disable>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8099 	bne.w	8000d3a <HAL_ADC_Init+0x18e>
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8095 	bne.w	8000d3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c18:	f023 0302 	bic.w	r3, r3, #2
 8000c1c:	f043 0202 	orr.w	r2, r3, #2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7b1b      	ldrb	r3, [r3, #12]
 8000c32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c44:	d003      	beq.n	8000c4e <HAL_ADC_Init+0xa2>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d102      	bne.n	8000c54 <HAL_ADC_Init+0xa8>
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	e000      	b.n	8000c56 <HAL_ADC_Init+0xaa>
 8000c54:	2300      	movs	r3, #0
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7d1b      	ldrb	r3, [r3, #20]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d119      	bne.n	8000c98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7b1b      	ldrb	r3, [r3, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d109      	bne.n	8000c80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	035a      	lsls	r2, r3, #13
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	e00b      	b.n	8000c98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f043 0220 	orr.w	r2, r3, #32
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	f043 0201 	orr.w	r2, r3, #1
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <HAL_ADC_Init+0x1a8>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6812      	ldr	r2, [r2, #0]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cc8:	d003      	beq.n	8000cd2 <HAL_ADC_Init+0x126>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d104      	bne.n	8000cdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	051b      	lsls	r3, r3, #20
 8000cda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_ADC_Init+0x1ac>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d10b      	bne.n	8000d18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	f023 0303 	bic.w	r3, r3, #3
 8000d0e:	f043 0201 	orr.w	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d16:	e018      	b.n	8000d4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f023 0312 	bic.w	r3, r3, #18
 8000d20:	f043 0210 	orr.w	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d38:	e007      	b.n	8000d4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f043 0210 	orr.w	r2, r3, #16
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	ffe1f7fd 	.word	0xffe1f7fd
 8000d58:	ff1f0efe 	.word	0xff1f0efe

08000d5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Start+0x1a>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e098      	b.n	8000ea8 <HAL_ADC_Start+0x14c>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 faa4 	bl	80012cc <ADC_Enable>
 8000d84:	4603      	mov	r3, r0
 8000d86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f040 8087 	bne.w	8000e9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <HAL_ADC_Start+0x154>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d105      	bne.n	8000dba <HAL_ADC_Start+0x5e>
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <HAL_ADC_Start+0x158>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d115      	bne.n	8000de6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d026      	beq.n	8000e22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ddc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000de4:	e01d      	b.n	8000e22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_ADC_Start+0x158>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d004      	beq.n	8000e06 <HAL_ADC_Start+0xaa>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <HAL_ADC_Start+0x154>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10d      	bne.n	8000e22 <HAL_ADC_Start+0xc6>
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_ADC_Start+0x158>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f023 0206 	bic.w	r2, r3, #6
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3a:	e002      	b.n	8000e42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f06f 0202 	mvn.w	r2, #2
 8000e52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e62:	d113      	bne.n	8000e8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_ADC_Start+0x154>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d105      	bne.n	8000e7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_ADC_Start+0x158>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d108      	bne.n	8000e8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	e00c      	b.n	8000ea6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	e003      	b.n	8000ea6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40012800 	.word	0x40012800
 8000eb4:	40012400 	.word	0x40012400

08000eb8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ece:	f7ff fe3f 	bl	8000b50 <HAL_GetTick>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee6:	f043 0220 	orr.w	r2, r3, #32
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e0d3      	b.n	80010a2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d131      	bne.n	8000f6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d12a      	bne.n	8000f6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f16:	e021      	b.n	8000f5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1e:	d01d      	beq.n	8000f5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_ADC_PollForConversion+0x7e>
 8000f26:	f7ff fe13 	bl	8000b50 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d212      	bcs.n	8000f5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	f043 0204 	orr.w	r2, r3, #4
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e0a2      	b.n	80010a2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0d6      	beq.n	8000f18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f6a:	e070      	b.n	800104e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <HAL_ADC_PollForConversion+0x1f4>)
 8000f6e:	681c      	ldr	r4, [r3, #0]
 8000f70:	2002      	movs	r0, #2
 8000f72:	f001 fa65 	bl	8002440 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6919      	ldr	r1, [r3, #16]
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <HAL_ADC_PollForConversion+0x1f8>)
 8000f84:	400b      	ands	r3, r1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d118      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x104>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68d9      	ldr	r1, [r3, #12]
 8000f90:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <HAL_ADC_PollForConversion+0x1fc>)
 8000f92:	400b      	ands	r3, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d111      	bne.n	8000fbc <HAL_ADC_PollForConversion+0x104>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6919      	ldr	r1, [r3, #16]
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <HAL_ADC_PollForConversion+0x200>)
 8000fa0:	400b      	ands	r3, r1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d108      	bne.n	8000fb8 <HAL_ADC_PollForConversion+0x100>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68d9      	ldr	r1, [r3, #12]
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <HAL_ADC_PollForConversion+0x204>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_ADC_PollForConversion+0x100>
 8000fb4:	2314      	movs	r3, #20
 8000fb6:	e020      	b.n	8000ffa <HAL_ADC_PollForConversion+0x142>
 8000fb8:	2329      	movs	r3, #41	; 0x29
 8000fba:	e01e      	b.n	8000ffa <HAL_ADC_PollForConversion+0x142>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6919      	ldr	r1, [r3, #16]
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <HAL_ADC_PollForConversion+0x200>)
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d106      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x120>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68d9      	ldr	r1, [r3, #12]
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <HAL_ADC_PollForConversion+0x204>)
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_ADC_PollForConversion+0x13c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6919      	ldr	r1, [r3, #16]
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_ADC_PollForConversion+0x208>)
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d108      	bne.n	8000ff8 <HAL_ADC_PollForConversion+0x140>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68d9      	ldr	r1, [r3, #12]
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_ADC_PollForConversion+0x208>)
 8000fee:	400b      	ands	r3, r1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <HAL_ADC_PollForConversion+0x140>
 8000ff4:	2354      	movs	r3, #84	; 0x54
 8000ff6:	e000      	b.n	8000ffa <HAL_ADC_PollForConversion+0x142>
 8000ff8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ffa:	fb02 f303 	mul.w	r3, r2, r3
 8000ffe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001000:	e021      	b.n	8001046 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d01a      	beq.n	8001040 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <HAL_ADC_PollForConversion+0x168>
 8001010:	f7ff fd9e 	bl	8000b50 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d20f      	bcs.n	8001040 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d90b      	bls.n	8001040 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f043 0204 	orr.w	r2, r3, #4
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e030      	b.n	80010a2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	429a      	cmp	r2, r3
 800104c:	d8d9      	bhi.n	8001002 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f06f 0212 	mvn.w	r2, #18
 8001056:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800106e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001072:	d115      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001078:	2b00      	cmp	r3, #0
 800107a:	d111      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f043 0201 	orr.w	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000006c 	.word	0x2000006c
 80010b0:	24924924 	.word	0x24924924
 80010b4:	00924924 	.word	0x00924924
 80010b8:	12492492 	.word	0x12492492
 80010bc:	00492492 	.word	0x00492492
 80010c0:	00249249 	.word	0x00249249

080010c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x20>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e0dc      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x1da>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b06      	cmp	r3, #6
 800110a:	d81c      	bhi.n	8001146 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b05      	subs	r3, #5
 800111e:	221f      	movs	r2, #31
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4019      	ands	r1, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b05      	subs	r3, #5
 8001138:	fa00 f203 	lsl.w	r2, r0, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	; 0x34
 8001144:	e03c      	b.n	80011c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b0c      	cmp	r3, #12
 800114c:	d81c      	bhi.n	8001188 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b23      	subs	r3, #35	; 0x23
 8001160:	221f      	movs	r2, #31
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	4019      	ands	r1, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3b23      	subs	r3, #35	; 0x23
 800117a:	fa00 f203 	lsl.w	r2, r0, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
 8001186:	e01b      	b.n	80011c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b41      	subs	r3, #65	; 0x41
 800119a:	221f      	movs	r2, #31
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	4019      	ands	r1, r3
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b41      	subs	r3, #65	; 0x41
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d91c      	bls.n	8001202 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68d9      	ldr	r1, [r3, #12]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	3b1e      	subs	r3, #30
 80011da:	2207      	movs	r2, #7
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4019      	ands	r1, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6898      	ldr	r0, [r3, #8]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	3b1e      	subs	r3, #30
 80011f4:	fa00 f203 	lsl.w	r2, r0, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	e019      	b.n	8001236 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6919      	ldr	r1, [r3, #16]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	4019      	ands	r1, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6898      	ldr	r0, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	fa00 f203 	lsl.w	r2, r0, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b10      	cmp	r3, #16
 800123c:	d003      	beq.n	8001246 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001242:	2b11      	cmp	r3, #17
 8001244:	d132      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d125      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d126      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800126c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d11a      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	0c9a      	lsrs	r2, r3, #18
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800128c:	e002      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_ADC_ConfigChannel+0x1b2>
 800129a:	e007      	b.n	80012ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f043 0220 	orr.w	r2, r3, #32
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40012400 	.word	0x40012400
 80012c4:	2000006c 	.word	0x2000006c
 80012c8:	431bde83 	.word	0x431bde83

080012cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d040      	beq.n	800136c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <ADC_Enable+0xac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <ADC_Enable+0xb0>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001308:	e002      	b.n	8001310 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3b01      	subs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f9      	bne.n	800130a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001316:	f7ff fc1b 	bl	8000b50 <HAL_GetTick>
 800131a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800131c:	e01f      	b.n	800135e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800131e:	f7ff fc17 	bl	8000b50 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d918      	bls.n	800135e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b01      	cmp	r3, #1
 8001338:	d011      	beq.n	800135e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	f043 0210 	orr.w	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e007      	b.n	800136e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	d1d8      	bne.n	800131e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000006c 	.word	0x2000006c
 800137c:	431bde83 	.word	0x431bde83

08001380 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b01      	cmp	r3, #1
 8001398:	d12e      	bne.n	80013f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013aa:	f7ff fbd1 	bl	8000b50 <HAL_GetTick>
 80013ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013b0:	e01b      	b.n	80013ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013b2:	f7ff fbcd 	bl	8000b50 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d914      	bls.n	80013ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10d      	bne.n	80013ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e007      	b.n	80013fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d0dc      	beq.n	80013b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ADCEx_Calibration_Start+0x1e>
 800141e:	2302      	movs	r3, #2
 8001420:	e097      	b.n	8001552 <HAL_ADCEx_Calibration_Start+0x14e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffa8 	bl	8001380 <ADC_ConversionStop_Disable>
 8001430:	4603      	mov	r3, r0
 8001432:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff49 	bl	80012cc <ADC_Enable>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 8081 	bne.w	8001548 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800144e:	f023 0302 	bic.w	r3, r3, #2
 8001452:	f043 0202 	orr.w	r2, r3, #2
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_ADCEx_Calibration_Start+0x158>)
 800145c:	681c      	ldr	r4, [r3, #0]
 800145e:	2002      	movs	r0, #2
 8001460:	f000 ffee 	bl	8002440 <HAL_RCCEx_GetPeriphCLKFreq>
 8001464:	4603      	mov	r3, r0
 8001466:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800146a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800146c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800146e:	e002      	b.n	8001476 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3b01      	subs	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800148c:	f7ff fb60 	bl	8000b50 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001492:	e01b      	b.n	80014cc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001494:	f7ff fb5c 	bl	8000b50 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d914      	bls.n	80014cc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00d      	beq.n	80014cc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f023 0312 	bic.w	r3, r3, #18
 80014b8:	f043 0210 	orr.w	r2, r3, #16
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e042      	b.n	8001552 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1dc      	bne.n	8001494 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0204 	orr.w	r2, r2, #4
 80014e8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014ea:	f7ff fb31 	bl	8000b50 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80014f0:	e01b      	b.n	800152a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014f2:	f7ff fb2d 	bl	8000b50 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b0a      	cmp	r3, #10
 80014fe:	d914      	bls.n	800152a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00d      	beq.n	800152a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f023 0312 	bic.w	r3, r3, #18
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e013      	b.n	8001552 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1dc      	bne.n	80014f2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	f023 0303 	bic.w	r3, r3, #3
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001550:	7dfb      	ldrb	r3, [r7, #23]
}
 8001552:	4618      	mov	r0, r3
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	2000006c 	.word	0x2000006c

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <__NVIC_EnableIRQ+0x34>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff2d 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff42 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff35 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e169      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8158 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a9a      	ldr	r2, [pc, #616]	; (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017b8:	4a98      	ldr	r2, [pc, #608]	; (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017be:	4a98      	ldr	r2, [pc, #608]	; (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017c4:	4a96      	ldr	r2, [pc, #600]	; (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ca:	4a96      	ldr	r2, [pc, #600]	; (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017d0:	4a94      	ldr	r2, [pc, #592]	; (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017d6:	4a94      	ldr	r2, [pc, #592]	; (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017dc:	4a92      	ldr	r2, [pc, #584]	; (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017e2:	4a92      	ldr	r2, [pc, #584]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017e8:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xcc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_GPIO_Init+0x80>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a79      	ldr	r2, [pc, #484]	; (8001a30 <HAL_GPIO_Init+0x2b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x130>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x13a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x13e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x14c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x152>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80b1 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001914:	4a48      	ldr	r2, [pc, #288]	; (8001a38 <HAL_GPIO_Init+0x2bc>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a40      	ldr	r2, [pc, #256]	; (8001a3c <HAL_GPIO_Init+0x2c0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3f      	ldr	r2, [pc, #252]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00d      	beq.n	8001964 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3e      	ldr	r2, [pc, #248]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x1e4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3d      	ldr	r2, [pc, #244]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_GPIO_Init+0x1e0>
 8001958:	2303      	movs	r3, #3
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 800195c:	2304      	movs	r3, #4
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001968:	2300      	movs	r3, #0
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	492f      	ldr	r1, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x2bc>)
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	492c      	ldr	r1, [pc, #176]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4928      	ldr	r1, [pc, #160]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4922      	ldr	r1, [pc, #136]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	491e      	ldr	r1, [pc, #120]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4918      	ldr	r1, [pc, #96]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4914      	ldr	r1, [pc, #80]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d021      	beq.n	8001a50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	490e      	ldr	r1, [pc, #56]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e021      	b.n	8001a5e <HAL_GPIO_Init+0x2e2>
 8001a1a:	bf00      	nop
 8001a1c:	10320000 	.word	0x10320000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	10220000 	.word	0x10220000
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	10120000 	.word	0x10120000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4909      	ldr	r1, [pc, #36]	; (8001a80 <HAL_GPIO_Init+0x304>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f ae8e 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	372c      	adds	r7, #44	; 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e272      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad4:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d00c      	beq.n	8001afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae0:	4b8f      	ldr	r3, [pc, #572]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d112      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
 8001aec:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d10b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x12c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d168      	bne.n	8001be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e24c      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x76>
 8001b1c:	4b80      	ldr	r3, [pc, #512]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a7f      	ldr	r2, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x98>
 8001b32:	4b7b      	ldr	r3, [pc, #492]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7a      	ldr	r2, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a77      	ldr	r2, [pc, #476]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0xbc>
 8001b56:	4b72      	ldr	r3, [pc, #456]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a71      	ldr	r2, [pc, #452]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b70:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6a      	ldr	r2, [pc, #424]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a67      	ldr	r2, [pc, #412]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe ffde 	bl	8000b50 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7fe ffda 	bl	8000b50 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e200      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5d      	ldr	r3, [pc, #372]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xe4>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7fe ffca 	bl	8000b50 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7fe ffc6 	bl	8000b50 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1ec      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x10c>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bee:	4b4c      	ldr	r3, [pc, #304]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfa:	4b49      	ldr	r3, [pc, #292]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c0      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4939      	ldr	r1, [pc, #228]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7fe ff7f 	bl	8000b50 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7fe ff7b 	bl	8000b50 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4927      	ldr	r1, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe ff5e 	bl	8000b50 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7fe ff5a 	bl	8000b50 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e180      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03a      	beq.n	8001d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d019      	beq.n	8001cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe ff3e 	bl	8000b50 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ff3a 	bl	8000b50 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e160      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 face 	bl	8002298 <RCC_Delay>
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe ff24 	bl	8000b50 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0a:	e00f      	b.n	8001d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe ff20 	bl	8000b50 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d908      	bls.n	8001d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e146      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	42420000 	.word	0x42420000
 8001d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e9      	bne.n	8001d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a6 	beq.w	8001e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a87      	ldr	r2, [pc, #540]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b85      	ldr	r3, [pc, #532]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b82      	ldr	r3, [pc, #520]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d118      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7e:	4b7f      	ldr	r3, [pc, #508]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7e      	ldr	r2, [pc, #504]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe fee1 	bl	8000b50 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7fe fedd 	bl	8000b50 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	; 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e103      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x312>
 8001db8:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e02d      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x334>
 8001dce:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a69      	ldr	r2, [pc, #420]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a66      	ldr	r2, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	e01c      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x356>
 8001df0:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a60      	ldr	r2, [pc, #384]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a57      	ldr	r2, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d015      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7fe fe91 	bl	8000b50 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fe8d 	bl	8000b50 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0b1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ee      	beq.n	8001e32 <HAL_RCC_OscConfig+0x37e>
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7fe fe7b 	bl	8000b50 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fe77 	bl	8000b50 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e09b      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a3b      	ldr	r2, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d061      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d146      	bne.n	8001f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fe4b 	bl	8000b50 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe fe47 	bl	8000b50 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e06d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4921      	ldr	r1, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a19      	ldr	r1, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	491b      	ldr	r1, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe1b 	bl	8000b50 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7fe fe17 	bl	8000b50 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46a>
 8001f3c:	e035      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7fe fe04 	bl	8000b50 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fe00 	bl	8000b50 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e026      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x498>
 8001f6a:	e01e      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e019      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x500>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d0      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4965      	ldr	r1, [pc, #404]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e073      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06b      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4936      	ldr	r1, [pc, #216]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fd52 	bl	8000b50 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe fd4e 	bl	8000b50 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e053      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d210      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4922      	ldr	r1, [pc, #136]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fcb0 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	08004114 	.word	0x08004114
 8002184:	2000006c 	.word	0x2000006c
 8002188:	20000070 	.word	0x20000070

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ba:	e027      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	e027      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0c5b      	lsrs	r3, r3, #17
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ee:	fb03 f202 	mul.w	r2, r3, r2
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e004      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002200:	fb02 f303 	mul.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	613b      	str	r3, [r7, #16]
      break;
 800220a:	e002      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002212:	693b      	ldr	r3, [r7, #16]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	0800412c 	.word	0x0800412c
 800222c:	0800413c 	.word	0x0800413c
 8002230:	003d0900 	.word	0x003d0900

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <HAL_RCC_GetHCLKFreq+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	2000006c 	.word	0x2000006c

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff2 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08004124 	.word	0x08004124

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffde 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0adb      	lsrs	r3, r3, #11
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08004124 	.word	0x08004124

08002298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <RCC_Delay+0x34>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <RCC_Delay+0x38>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a5b      	lsrs	r3, r3, #9
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b4:	bf00      	nop
  }
  while (Delay --);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <RCC_Delay+0x1c>
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	2000006c 	.word	0x2000006c
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d07d      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f4:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b49      	ldr	r3, [pc, #292]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002318:	2301      	movs	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d118      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002328:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a42      	ldr	r2, [pc, #264]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002334:	f7fe fc0c 	bl	8000b50 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	e008      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233c:	f7fe fc08 	bl	8000b50 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	; 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e06d      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d02e      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d027      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002380:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002382:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4b2c      	ldr	r3, [pc, #176]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800238e:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d014      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fbd7 	bl	8000b50 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fbd3 	bl	8000b50 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e036      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4917      	ldr	r1, [pc, #92]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	490b      	ldr	r1, [pc, #44]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4904      	ldr	r1, [pc, #16]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420440 	.word	0x42420440

08002440 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b10      	cmp	r3, #16
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b10      	cmp	r3, #16
 8002466:	f200 808a 	bhi.w	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d045      	beq.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d075      	beq.n	8002562 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002476:	e082      	b.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07b      	beq.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	4a41      	ldr	r2, [pc, #260]	; (8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	4a3b      	ldr	r2, [pc, #236]	; (800259c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024bc:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e004      	b.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4a34      	ldr	r2, [pc, #208]	; (80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d102      	bne.n	80024ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	61bb      	str	r3, [r7, #24]
      break;
 80024ea:	e04a      	b.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
      break;
 80024fa:	e042      	b.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250c:	d108      	bne.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e01f      	b.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002538:	f649 4340 	movw	r3, #40000	; 0x9c40
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e00f      	b.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800254a:	d11c      	bne.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d016      	beq.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002558:	f24f 4324 	movw	r3, #62500	; 0xf424
 800255c:	61bb      	str	r3, [r7, #24]
      break;
 800255e:	e012      	b.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002560:	e011      	b.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002562:	f7ff fe85 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	0b9b      	lsrs	r3, r3, #14
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	61bb      	str	r3, [r7, #24]
      break;
 800257c:	e004      	b.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800257e:	bf00      	nop
 8002580:	e002      	b.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002586:	bf00      	nop
    }
  }
  return (frequency);
 8002588:	69bb      	ldr	r3, [r7, #24]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	08004140 	.word	0x08004140
 800259c:	08004150 	.word	0x08004150
 80025a0:	007a1200 	.word	0x007a1200
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	aaaaaaab 	.word	0xaaaaaaab

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f8f8 	bl	80007c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fa7c 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e03a      	b.n	80026da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_TIM_Base_Start_IT+0x98>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d009      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_TIM_Base_Start_IT+0xa0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d010      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	e007      	b.n	80026d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800

080026f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0202 	mvn.w	r2, #2
 800271c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f9bd 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9b0 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f9bf 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0204 	mvn.w	r2, #4
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2202      	movs	r2, #2
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f993 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f986 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f995 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0208 	mvn.w	r2, #8
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f969 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f95c 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f96b 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b10      	cmp	r3, #16
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0210 	mvn.w	r2, #16
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2208      	movs	r2, #8
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f93f 	bl	8002ab2 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f932 	bl	8002aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f941 	bl	8002ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0201 	mvn.w	r2, #1
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f90d 	bl	8002a8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa83 	bl	8002da6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f905 	bl	8002ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0220 	mvn.w	r2, #32
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa4e 	bl	8002d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIM_ConfigClockSource+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e0b4      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x186>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800293a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002954:	d03e      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	f200 8087 	bhi.w	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002962:	f000 8086 	beq.w	8002a72 <HAL_TIM_ConfigClockSource+0x172>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d87f      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d01a      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002970:	2b70      	cmp	r3, #112	; 0x70
 8002972:	d87b      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b60      	cmp	r3, #96	; 0x60
 8002976:	d050      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x11a>
 8002978:	2b60      	cmp	r3, #96	; 0x60
 800297a:	d877      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b50      	cmp	r3, #80	; 0x50
 800297e:	d03c      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xfa>
 8002980:	2b50      	cmp	r3, #80	; 0x50
 8002982:	d873      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d058      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x13a>
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d86f      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b30      	cmp	r3, #48	; 0x30
 800298e:	d064      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 8002990:	2b30      	cmp	r3, #48	; 0x30
 8002992:	d86b      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d060      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d867      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d05a      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	e062      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f000 f970 	bl	8002c9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	609a      	str	r2, [r3, #8]
      break;
 80029d2:	e04f      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f000 f959 	bl	8002c9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f6:	609a      	str	r2, [r3, #8]
      break;
 80029f8:	e03c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 f8d0 	bl	8002bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2150      	movs	r1, #80	; 0x50
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f927 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a18:	e02c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8ee 	bl	8002c08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2160      	movs	r1, #96	; 0x60
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f917 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a38:	e01c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f000 f8b0 	bl	8002bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2140      	movs	r1, #64	; 0x40
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f907 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a58:	e00c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 f8fe 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a6a:	e003      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a70:	e000      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <TIM_Base_SetConfig+0xb8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <TIM_Base_SetConfig+0x30>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b06:	d007      	beq.n	8002b18 <TIM_Base_SetConfig+0x30>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <TIM_Base_SetConfig+0xbc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_Base_SetConfig+0x30>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <TIM_Base_SetConfig+0xc0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d108      	bne.n	8002b2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <TIM_Base_SetConfig+0xb8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00b      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	; (8002ba4 <TIM_Base_SetConfig+0xbc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <TIM_Base_SetConfig+0xc0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <TIM_Base_SetConfig+0xb8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	615a      	str	r2, [r3, #20]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0210 	bic.w	r2, r3, #16
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e046      	b.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800

08002d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e042      	b.n	8002e50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fd16 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f91d 	bl	800303c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d16d      	bne.n	8002f54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Transmit+0x2c>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e066      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	; 0x21
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e96:	f7fd fe5b 	bl	8000b50 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb0:	d108      	bne.n	8002ec4 <HAL_UART_Transmit+0x6c>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e003      	b.n	8002ecc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ecc:	e02a      	b.n	8002f24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f840 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e036      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3302      	adds	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e007      	b.n	8002f16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cf      	bne.n	8002ece <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f810 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b090      	sub	sp, #64	; 0x40
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	e050      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d04c      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	f7fd fde7 	bl	8000b50 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d241      	bcs.n	8003012 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fae:	637a      	str	r2, [r7, #52]	; 0x34
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e5      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe2:	623a      	str	r2, [r7, #32]
 8002fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	69f9      	ldr	r1, [r7, #28]
 8002fe8:	6a3a      	ldr	r2, [r7, #32]
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e00f      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d09f      	beq.n	8002f70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3740      	adds	r7, #64	; 0x40
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003076:	f023 030c 	bic.w	r3, r3, #12
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	430b      	orrs	r3, r1
 8003082:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <UART_SetConfig+0x114>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d103      	bne.n	80030ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a4:	f7ff f8e4 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	e002      	b.n	80030b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7ff f8cc 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 80030b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009a      	lsls	r2, r3, #2
 80030bc:	441a      	add	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <UART_SetConfig+0x118>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	0119      	lsls	r1, r3, #4
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <UART_SetConfig+0x118>)
 80030ea:	fba3 0302 	umull	r0, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2064      	movs	r0, #100	; 0x64
 80030f2:	fb00 f303 	mul.w	r3, r0, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <UART_SetConfig+0x118>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003108:	4419      	add	r1, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <UART_SetConfig+0x118>)
 8003122:	fba3 0302 	umull	r0, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2064      	movs	r0, #100	; 0x64
 800312a:	fb00 f303 	mul.w	r3, r0, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a07      	ldr	r2, [pc, #28]	; (8003154 <UART_SetConfig+0x118>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	440a      	add	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40013800 	.word	0x40013800
 8003154:	51eb851f 	.word	0x51eb851f

08003158 <__errno>:
 8003158:	4b01      	ldr	r3, [pc, #4]	; (8003160 <__errno+0x8>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000078 	.word	0x20000078

08003164 <__libc_init_array>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	2600      	movs	r6, #0
 8003168:	4d0c      	ldr	r5, [pc, #48]	; (800319c <__libc_init_array+0x38>)
 800316a:	4c0d      	ldr	r4, [pc, #52]	; (80031a0 <__libc_init_array+0x3c>)
 800316c:	1b64      	subs	r4, r4, r5
 800316e:	10a4      	asrs	r4, r4, #2
 8003170:	42a6      	cmp	r6, r4
 8003172:	d109      	bne.n	8003188 <__libc_init_array+0x24>
 8003174:	f000 ffb6 	bl	80040e4 <_init>
 8003178:	2600      	movs	r6, #0
 800317a:	4d0a      	ldr	r5, [pc, #40]	; (80031a4 <__libc_init_array+0x40>)
 800317c:	4c0a      	ldr	r4, [pc, #40]	; (80031a8 <__libc_init_array+0x44>)
 800317e:	1b64      	subs	r4, r4, r5
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	42a6      	cmp	r6, r4
 8003184:	d105      	bne.n	8003192 <__libc_init_array+0x2e>
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	f855 3b04 	ldr.w	r3, [r5], #4
 800318c:	4798      	blx	r3
 800318e:	3601      	adds	r6, #1
 8003190:	e7ee      	b.n	8003170 <__libc_init_array+0xc>
 8003192:	f855 3b04 	ldr.w	r3, [r5], #4
 8003196:	4798      	blx	r3
 8003198:	3601      	adds	r6, #1
 800319a:	e7f2      	b.n	8003182 <__libc_init_array+0x1e>
 800319c:	080041ec 	.word	0x080041ec
 80031a0:	080041ec 	.word	0x080041ec
 80031a4:	080041ec 	.word	0x080041ec
 80031a8:	080041f0 	.word	0x080041f0

080031ac <memset>:
 80031ac:	4603      	mov	r3, r0
 80031ae:	4402      	add	r2, r0
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d100      	bne.n	80031b6 <memset+0xa>
 80031b4:	4770      	bx	lr
 80031b6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ba:	e7f9      	b.n	80031b0 <memset+0x4>

080031bc <iprintf>:
 80031bc:	b40f      	push	{r0, r1, r2, r3}
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <iprintf+0x2c>)
 80031c0:	b513      	push	{r0, r1, r4, lr}
 80031c2:	681c      	ldr	r4, [r3, #0]
 80031c4:	b124      	cbz	r4, 80031d0 <iprintf+0x14>
 80031c6:	69a3      	ldr	r3, [r4, #24]
 80031c8:	b913      	cbnz	r3, 80031d0 <iprintf+0x14>
 80031ca:	4620      	mov	r0, r4
 80031cc:	f000 f866 	bl	800329c <__sinit>
 80031d0:	ab05      	add	r3, sp, #20
 80031d2:	4620      	mov	r0, r4
 80031d4:	9a04      	ldr	r2, [sp, #16]
 80031d6:	68a1      	ldr	r1, [r4, #8]
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	f000 f9bb 	bl	8003554 <_vfiprintf_r>
 80031de:	b002      	add	sp, #8
 80031e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e4:	b004      	add	sp, #16
 80031e6:	4770      	bx	lr
 80031e8:	20000078 	.word	0x20000078

080031ec <std>:
 80031ec:	2300      	movs	r3, #0
 80031ee:	b510      	push	{r4, lr}
 80031f0:	4604      	mov	r4, r0
 80031f2:	e9c0 3300 	strd	r3, r3, [r0]
 80031f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031fa:	6083      	str	r3, [r0, #8]
 80031fc:	8181      	strh	r1, [r0, #12]
 80031fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003200:	81c2      	strh	r2, [r0, #14]
 8003202:	6183      	str	r3, [r0, #24]
 8003204:	4619      	mov	r1, r3
 8003206:	2208      	movs	r2, #8
 8003208:	305c      	adds	r0, #92	; 0x5c
 800320a:	f7ff ffcf 	bl	80031ac <memset>
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <std+0x38>)
 8003210:	6224      	str	r4, [r4, #32]
 8003212:	6263      	str	r3, [r4, #36]	; 0x24
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <std+0x3c>)
 8003216:	62a3      	str	r3, [r4, #40]	; 0x28
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <std+0x40>)
 800321a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <std+0x44>)
 800321e:	6323      	str	r3, [r4, #48]	; 0x30
 8003220:	bd10      	pop	{r4, pc}
 8003222:	bf00      	nop
 8003224:	08003b01 	.word	0x08003b01
 8003228:	08003b23 	.word	0x08003b23
 800322c:	08003b5b 	.word	0x08003b5b
 8003230:	08003b7f 	.word	0x08003b7f

08003234 <_cleanup_r>:
 8003234:	4901      	ldr	r1, [pc, #4]	; (800323c <_cleanup_r+0x8>)
 8003236:	f000 b8af 	b.w	8003398 <_fwalk_reent>
 800323a:	bf00      	nop
 800323c:	08003e51 	.word	0x08003e51

08003240 <__sfmoreglue>:
 8003240:	2268      	movs	r2, #104	; 0x68
 8003242:	b570      	push	{r4, r5, r6, lr}
 8003244:	1e4d      	subs	r5, r1, #1
 8003246:	4355      	muls	r5, r2
 8003248:	460e      	mov	r6, r1
 800324a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800324e:	f000 f8e5 	bl	800341c <_malloc_r>
 8003252:	4604      	mov	r4, r0
 8003254:	b140      	cbz	r0, 8003268 <__sfmoreglue+0x28>
 8003256:	2100      	movs	r1, #0
 8003258:	e9c0 1600 	strd	r1, r6, [r0]
 800325c:	300c      	adds	r0, #12
 800325e:	60a0      	str	r0, [r4, #8]
 8003260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003264:	f7ff ffa2 	bl	80031ac <memset>
 8003268:	4620      	mov	r0, r4
 800326a:	bd70      	pop	{r4, r5, r6, pc}

0800326c <__sfp_lock_acquire>:
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <__sfp_lock_acquire+0x8>)
 800326e:	f000 b8b3 	b.w	80033d8 <__retarget_lock_acquire_recursive>
 8003272:	bf00      	nop
 8003274:	200001c9 	.word	0x200001c9

08003278 <__sfp_lock_release>:
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <__sfp_lock_release+0x8>)
 800327a:	f000 b8ae 	b.w	80033da <__retarget_lock_release_recursive>
 800327e:	bf00      	nop
 8003280:	200001c9 	.word	0x200001c9

08003284 <__sinit_lock_acquire>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__sinit_lock_acquire+0x8>)
 8003286:	f000 b8a7 	b.w	80033d8 <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	200001ca 	.word	0x200001ca

08003290 <__sinit_lock_release>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__sinit_lock_release+0x8>)
 8003292:	f000 b8a2 	b.w	80033da <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	200001ca 	.word	0x200001ca

0800329c <__sinit>:
 800329c:	b510      	push	{r4, lr}
 800329e:	4604      	mov	r4, r0
 80032a0:	f7ff fff0 	bl	8003284 <__sinit_lock_acquire>
 80032a4:	69a3      	ldr	r3, [r4, #24]
 80032a6:	b11b      	cbz	r3, 80032b0 <__sinit+0x14>
 80032a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ac:	f7ff bff0 	b.w	8003290 <__sinit_lock_release>
 80032b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032b4:	6523      	str	r3, [r4, #80]	; 0x50
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <__sinit+0x68>)
 80032b8:	4a13      	ldr	r2, [pc, #76]	; (8003308 <__sinit+0x6c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80032be:	42a3      	cmp	r3, r4
 80032c0:	bf08      	it	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	4620      	mov	r0, r4
 80032c6:	bf08      	it	eq
 80032c8:	61a3      	streq	r3, [r4, #24]
 80032ca:	f000 f81f 	bl	800330c <__sfp>
 80032ce:	6060      	str	r0, [r4, #4]
 80032d0:	4620      	mov	r0, r4
 80032d2:	f000 f81b 	bl	800330c <__sfp>
 80032d6:	60a0      	str	r0, [r4, #8]
 80032d8:	4620      	mov	r0, r4
 80032da:	f000 f817 	bl	800330c <__sfp>
 80032de:	2200      	movs	r2, #0
 80032e0:	2104      	movs	r1, #4
 80032e2:	60e0      	str	r0, [r4, #12]
 80032e4:	6860      	ldr	r0, [r4, #4]
 80032e6:	f7ff ff81 	bl	80031ec <std>
 80032ea:	2201      	movs	r2, #1
 80032ec:	2109      	movs	r1, #9
 80032ee:	68a0      	ldr	r0, [r4, #8]
 80032f0:	f7ff ff7c 	bl	80031ec <std>
 80032f4:	2202      	movs	r2, #2
 80032f6:	2112      	movs	r1, #18
 80032f8:	68e0      	ldr	r0, [r4, #12]
 80032fa:	f7ff ff77 	bl	80031ec <std>
 80032fe:	2301      	movs	r3, #1
 8003300:	61a3      	str	r3, [r4, #24]
 8003302:	e7d1      	b.n	80032a8 <__sinit+0xc>
 8003304:	08004154 	.word	0x08004154
 8003308:	08003235 	.word	0x08003235

0800330c <__sfp>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	4607      	mov	r7, r0
 8003310:	f7ff ffac 	bl	800326c <__sfp_lock_acquire>
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <__sfp+0x84>)
 8003316:	681e      	ldr	r6, [r3, #0]
 8003318:	69b3      	ldr	r3, [r6, #24]
 800331a:	b913      	cbnz	r3, 8003322 <__sfp+0x16>
 800331c:	4630      	mov	r0, r6
 800331e:	f7ff ffbd 	bl	800329c <__sinit>
 8003322:	3648      	adds	r6, #72	; 0x48
 8003324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003328:	3b01      	subs	r3, #1
 800332a:	d503      	bpl.n	8003334 <__sfp+0x28>
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	b30b      	cbz	r3, 8003374 <__sfp+0x68>
 8003330:	6836      	ldr	r6, [r6, #0]
 8003332:	e7f7      	b.n	8003324 <__sfp+0x18>
 8003334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003338:	b9d5      	cbnz	r5, 8003370 <__sfp+0x64>
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <__sfp+0x88>)
 800333c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003340:	60e3      	str	r3, [r4, #12]
 8003342:	6665      	str	r5, [r4, #100]	; 0x64
 8003344:	f000 f847 	bl	80033d6 <__retarget_lock_init_recursive>
 8003348:	f7ff ff96 	bl	8003278 <__sfp_lock_release>
 800334c:	2208      	movs	r2, #8
 800334e:	4629      	mov	r1, r5
 8003350:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003354:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003358:	6025      	str	r5, [r4, #0]
 800335a:	61a5      	str	r5, [r4, #24]
 800335c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003360:	f7ff ff24 	bl	80031ac <memset>
 8003364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800336c:	4620      	mov	r0, r4
 800336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003370:	3468      	adds	r4, #104	; 0x68
 8003372:	e7d9      	b.n	8003328 <__sfp+0x1c>
 8003374:	2104      	movs	r1, #4
 8003376:	4638      	mov	r0, r7
 8003378:	f7ff ff62 	bl	8003240 <__sfmoreglue>
 800337c:	4604      	mov	r4, r0
 800337e:	6030      	str	r0, [r6, #0]
 8003380:	2800      	cmp	r0, #0
 8003382:	d1d5      	bne.n	8003330 <__sfp+0x24>
 8003384:	f7ff ff78 	bl	8003278 <__sfp_lock_release>
 8003388:	230c      	movs	r3, #12
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	e7ee      	b.n	800336c <__sfp+0x60>
 800338e:	bf00      	nop
 8003390:	08004154 	.word	0x08004154
 8003394:	ffff0001 	.word	0xffff0001

08003398 <_fwalk_reent>:
 8003398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800339c:	4606      	mov	r6, r0
 800339e:	4688      	mov	r8, r1
 80033a0:	2700      	movs	r7, #0
 80033a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033aa:	f1b9 0901 	subs.w	r9, r9, #1
 80033ae:	d505      	bpl.n	80033bc <_fwalk_reent+0x24>
 80033b0:	6824      	ldr	r4, [r4, #0]
 80033b2:	2c00      	cmp	r4, #0
 80033b4:	d1f7      	bne.n	80033a6 <_fwalk_reent+0xe>
 80033b6:	4638      	mov	r0, r7
 80033b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033bc:	89ab      	ldrh	r3, [r5, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d907      	bls.n	80033d2 <_fwalk_reent+0x3a>
 80033c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033c6:	3301      	adds	r3, #1
 80033c8:	d003      	beq.n	80033d2 <_fwalk_reent+0x3a>
 80033ca:	4629      	mov	r1, r5
 80033cc:	4630      	mov	r0, r6
 80033ce:	47c0      	blx	r8
 80033d0:	4307      	orrs	r7, r0
 80033d2:	3568      	adds	r5, #104	; 0x68
 80033d4:	e7e9      	b.n	80033aa <_fwalk_reent+0x12>

080033d6 <__retarget_lock_init_recursive>:
 80033d6:	4770      	bx	lr

080033d8 <__retarget_lock_acquire_recursive>:
 80033d8:	4770      	bx	lr

080033da <__retarget_lock_release_recursive>:
 80033da:	4770      	bx	lr

080033dc <sbrk_aligned>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4e0e      	ldr	r6, [pc, #56]	; (8003418 <sbrk_aligned+0x3c>)
 80033e0:	460c      	mov	r4, r1
 80033e2:	6831      	ldr	r1, [r6, #0]
 80033e4:	4605      	mov	r5, r0
 80033e6:	b911      	cbnz	r1, 80033ee <sbrk_aligned+0x12>
 80033e8:	f000 fb7a 	bl	8003ae0 <_sbrk_r>
 80033ec:	6030      	str	r0, [r6, #0]
 80033ee:	4621      	mov	r1, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 fb75 	bl	8003ae0 <_sbrk_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d00a      	beq.n	8003410 <sbrk_aligned+0x34>
 80033fa:	1cc4      	adds	r4, r0, #3
 80033fc:	f024 0403 	bic.w	r4, r4, #3
 8003400:	42a0      	cmp	r0, r4
 8003402:	d007      	beq.n	8003414 <sbrk_aligned+0x38>
 8003404:	1a21      	subs	r1, r4, r0
 8003406:	4628      	mov	r0, r5
 8003408:	f000 fb6a 	bl	8003ae0 <_sbrk_r>
 800340c:	3001      	adds	r0, #1
 800340e:	d101      	bne.n	8003414 <sbrk_aligned+0x38>
 8003410:	f04f 34ff 	mov.w	r4, #4294967295
 8003414:	4620      	mov	r0, r4
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	200001d0 	.word	0x200001d0

0800341c <_malloc_r>:
 800341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003420:	1ccd      	adds	r5, r1, #3
 8003422:	f025 0503 	bic.w	r5, r5, #3
 8003426:	3508      	adds	r5, #8
 8003428:	2d0c      	cmp	r5, #12
 800342a:	bf38      	it	cc
 800342c:	250c      	movcc	r5, #12
 800342e:	2d00      	cmp	r5, #0
 8003430:	4607      	mov	r7, r0
 8003432:	db01      	blt.n	8003438 <_malloc_r+0x1c>
 8003434:	42a9      	cmp	r1, r5
 8003436:	d905      	bls.n	8003444 <_malloc_r+0x28>
 8003438:	230c      	movs	r3, #12
 800343a:	2600      	movs	r6, #0
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4630      	mov	r0, r6
 8003440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003444:	4e2e      	ldr	r6, [pc, #184]	; (8003500 <_malloc_r+0xe4>)
 8003446:	f000 fdc5 	bl	8003fd4 <__malloc_lock>
 800344a:	6833      	ldr	r3, [r6, #0]
 800344c:	461c      	mov	r4, r3
 800344e:	bb34      	cbnz	r4, 800349e <_malloc_r+0x82>
 8003450:	4629      	mov	r1, r5
 8003452:	4638      	mov	r0, r7
 8003454:	f7ff ffc2 	bl	80033dc <sbrk_aligned>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	4604      	mov	r4, r0
 800345c:	d14d      	bne.n	80034fa <_malloc_r+0xde>
 800345e:	6834      	ldr	r4, [r6, #0]
 8003460:	4626      	mov	r6, r4
 8003462:	2e00      	cmp	r6, #0
 8003464:	d140      	bne.n	80034e8 <_malloc_r+0xcc>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	4631      	mov	r1, r6
 800346a:	4638      	mov	r0, r7
 800346c:	eb04 0803 	add.w	r8, r4, r3
 8003470:	f000 fb36 	bl	8003ae0 <_sbrk_r>
 8003474:	4580      	cmp	r8, r0
 8003476:	d13a      	bne.n	80034ee <_malloc_r+0xd2>
 8003478:	6821      	ldr	r1, [r4, #0]
 800347a:	3503      	adds	r5, #3
 800347c:	1a6d      	subs	r5, r5, r1
 800347e:	f025 0503 	bic.w	r5, r5, #3
 8003482:	3508      	adds	r5, #8
 8003484:	2d0c      	cmp	r5, #12
 8003486:	bf38      	it	cc
 8003488:	250c      	movcc	r5, #12
 800348a:	4638      	mov	r0, r7
 800348c:	4629      	mov	r1, r5
 800348e:	f7ff ffa5 	bl	80033dc <sbrk_aligned>
 8003492:	3001      	adds	r0, #1
 8003494:	d02b      	beq.n	80034ee <_malloc_r+0xd2>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	442b      	add	r3, r5
 800349a:	6023      	str	r3, [r4, #0]
 800349c:	e00e      	b.n	80034bc <_malloc_r+0xa0>
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	1b52      	subs	r2, r2, r5
 80034a2:	d41e      	bmi.n	80034e2 <_malloc_r+0xc6>
 80034a4:	2a0b      	cmp	r2, #11
 80034a6:	d916      	bls.n	80034d6 <_malloc_r+0xba>
 80034a8:	1961      	adds	r1, r4, r5
 80034aa:	42a3      	cmp	r3, r4
 80034ac:	6025      	str	r5, [r4, #0]
 80034ae:	bf18      	it	ne
 80034b0:	6059      	strne	r1, [r3, #4]
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	bf08      	it	eq
 80034b6:	6031      	streq	r1, [r6, #0]
 80034b8:	5162      	str	r2, [r4, r5]
 80034ba:	604b      	str	r3, [r1, #4]
 80034bc:	4638      	mov	r0, r7
 80034be:	f104 060b 	add.w	r6, r4, #11
 80034c2:	f000 fd8d 	bl	8003fe0 <__malloc_unlock>
 80034c6:	f026 0607 	bic.w	r6, r6, #7
 80034ca:	1d23      	adds	r3, r4, #4
 80034cc:	1af2      	subs	r2, r6, r3
 80034ce:	d0b6      	beq.n	800343e <_malloc_r+0x22>
 80034d0:	1b9b      	subs	r3, r3, r6
 80034d2:	50a3      	str	r3, [r4, r2]
 80034d4:	e7b3      	b.n	800343e <_malloc_r+0x22>
 80034d6:	6862      	ldr	r2, [r4, #4]
 80034d8:	42a3      	cmp	r3, r4
 80034da:	bf0c      	ite	eq
 80034dc:	6032      	streq	r2, [r6, #0]
 80034de:	605a      	strne	r2, [r3, #4]
 80034e0:	e7ec      	b.n	80034bc <_malloc_r+0xa0>
 80034e2:	4623      	mov	r3, r4
 80034e4:	6864      	ldr	r4, [r4, #4]
 80034e6:	e7b2      	b.n	800344e <_malloc_r+0x32>
 80034e8:	4634      	mov	r4, r6
 80034ea:	6876      	ldr	r6, [r6, #4]
 80034ec:	e7b9      	b.n	8003462 <_malloc_r+0x46>
 80034ee:	230c      	movs	r3, #12
 80034f0:	4638      	mov	r0, r7
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	f000 fd74 	bl	8003fe0 <__malloc_unlock>
 80034f8:	e7a1      	b.n	800343e <_malloc_r+0x22>
 80034fa:	6025      	str	r5, [r4, #0]
 80034fc:	e7de      	b.n	80034bc <_malloc_r+0xa0>
 80034fe:	bf00      	nop
 8003500:	200001cc 	.word	0x200001cc

08003504 <__sfputc_r>:
 8003504:	6893      	ldr	r3, [r2, #8]
 8003506:	b410      	push	{r4}
 8003508:	3b01      	subs	r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	6093      	str	r3, [r2, #8]
 800350e:	da07      	bge.n	8003520 <__sfputc_r+0x1c>
 8003510:	6994      	ldr	r4, [r2, #24]
 8003512:	42a3      	cmp	r3, r4
 8003514:	db01      	blt.n	800351a <__sfputc_r+0x16>
 8003516:	290a      	cmp	r1, #10
 8003518:	d102      	bne.n	8003520 <__sfputc_r+0x1c>
 800351a:	bc10      	pop	{r4}
 800351c:	f000 bb34 	b.w	8003b88 <__swbuf_r>
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	1c58      	adds	r0, r3, #1
 8003524:	6010      	str	r0, [r2, #0]
 8003526:	7019      	strb	r1, [r3, #0]
 8003528:	4608      	mov	r0, r1
 800352a:	bc10      	pop	{r4}
 800352c:	4770      	bx	lr

0800352e <__sfputs_r>:
 800352e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003530:	4606      	mov	r6, r0
 8003532:	460f      	mov	r7, r1
 8003534:	4614      	mov	r4, r2
 8003536:	18d5      	adds	r5, r2, r3
 8003538:	42ac      	cmp	r4, r5
 800353a:	d101      	bne.n	8003540 <__sfputs_r+0x12>
 800353c:	2000      	movs	r0, #0
 800353e:	e007      	b.n	8003550 <__sfputs_r+0x22>
 8003540:	463a      	mov	r2, r7
 8003542:	4630      	mov	r0, r6
 8003544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003548:	f7ff ffdc 	bl	8003504 <__sfputc_r>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d1f3      	bne.n	8003538 <__sfputs_r+0xa>
 8003550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003554 <_vfiprintf_r>:
 8003554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003558:	460d      	mov	r5, r1
 800355a:	4614      	mov	r4, r2
 800355c:	4698      	mov	r8, r3
 800355e:	4606      	mov	r6, r0
 8003560:	b09d      	sub	sp, #116	; 0x74
 8003562:	b118      	cbz	r0, 800356c <_vfiprintf_r+0x18>
 8003564:	6983      	ldr	r3, [r0, #24]
 8003566:	b90b      	cbnz	r3, 800356c <_vfiprintf_r+0x18>
 8003568:	f7ff fe98 	bl	800329c <__sinit>
 800356c:	4b89      	ldr	r3, [pc, #548]	; (8003794 <_vfiprintf_r+0x240>)
 800356e:	429d      	cmp	r5, r3
 8003570:	d11b      	bne.n	80035aa <_vfiprintf_r+0x56>
 8003572:	6875      	ldr	r5, [r6, #4]
 8003574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003576:	07d9      	lsls	r1, r3, #31
 8003578:	d405      	bmi.n	8003586 <_vfiprintf_r+0x32>
 800357a:	89ab      	ldrh	r3, [r5, #12]
 800357c:	059a      	lsls	r2, r3, #22
 800357e:	d402      	bmi.n	8003586 <_vfiprintf_r+0x32>
 8003580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003582:	f7ff ff29 	bl	80033d8 <__retarget_lock_acquire_recursive>
 8003586:	89ab      	ldrh	r3, [r5, #12]
 8003588:	071b      	lsls	r3, r3, #28
 800358a:	d501      	bpl.n	8003590 <_vfiprintf_r+0x3c>
 800358c:	692b      	ldr	r3, [r5, #16]
 800358e:	b9eb      	cbnz	r3, 80035cc <_vfiprintf_r+0x78>
 8003590:	4629      	mov	r1, r5
 8003592:	4630      	mov	r0, r6
 8003594:	f000 fb5c 	bl	8003c50 <__swsetup_r>
 8003598:	b1c0      	cbz	r0, 80035cc <_vfiprintf_r+0x78>
 800359a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800359c:	07dc      	lsls	r4, r3, #31
 800359e:	d50e      	bpl.n	80035be <_vfiprintf_r+0x6a>
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	b01d      	add	sp, #116	; 0x74
 80035a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <_vfiprintf_r+0x244>)
 80035ac:	429d      	cmp	r5, r3
 80035ae:	d101      	bne.n	80035b4 <_vfiprintf_r+0x60>
 80035b0:	68b5      	ldr	r5, [r6, #8]
 80035b2:	e7df      	b.n	8003574 <_vfiprintf_r+0x20>
 80035b4:	4b79      	ldr	r3, [pc, #484]	; (800379c <_vfiprintf_r+0x248>)
 80035b6:	429d      	cmp	r5, r3
 80035b8:	bf08      	it	eq
 80035ba:	68f5      	ldreq	r5, [r6, #12]
 80035bc:	e7da      	b.n	8003574 <_vfiprintf_r+0x20>
 80035be:	89ab      	ldrh	r3, [r5, #12]
 80035c0:	0598      	lsls	r0, r3, #22
 80035c2:	d4ed      	bmi.n	80035a0 <_vfiprintf_r+0x4c>
 80035c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035c6:	f7ff ff08 	bl	80033da <__retarget_lock_release_recursive>
 80035ca:	e7e9      	b.n	80035a0 <_vfiprintf_r+0x4c>
 80035cc:	2300      	movs	r3, #0
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	2320      	movs	r3, #32
 80035d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035d6:	2330      	movs	r3, #48	; 0x30
 80035d8:	f04f 0901 	mov.w	r9, #1
 80035dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80035e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80037a0 <_vfiprintf_r+0x24c>
 80035e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e8:	4623      	mov	r3, r4
 80035ea:	469a      	mov	sl, r3
 80035ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035f0:	b10a      	cbz	r2, 80035f6 <_vfiprintf_r+0xa2>
 80035f2:	2a25      	cmp	r2, #37	; 0x25
 80035f4:	d1f9      	bne.n	80035ea <_vfiprintf_r+0x96>
 80035f6:	ebba 0b04 	subs.w	fp, sl, r4
 80035fa:	d00b      	beq.n	8003614 <_vfiprintf_r+0xc0>
 80035fc:	465b      	mov	r3, fp
 80035fe:	4622      	mov	r2, r4
 8003600:	4629      	mov	r1, r5
 8003602:	4630      	mov	r0, r6
 8003604:	f7ff ff93 	bl	800352e <__sfputs_r>
 8003608:	3001      	adds	r0, #1
 800360a:	f000 80aa 	beq.w	8003762 <_vfiprintf_r+0x20e>
 800360e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003610:	445a      	add	r2, fp
 8003612:	9209      	str	r2, [sp, #36]	; 0x24
 8003614:	f89a 3000 	ldrb.w	r3, [sl]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a2 	beq.w	8003762 <_vfiprintf_r+0x20e>
 800361e:	2300      	movs	r3, #0
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003628:	f10a 0a01 	add.w	sl, sl, #1
 800362c:	9304      	str	r3, [sp, #16]
 800362e:	9307      	str	r3, [sp, #28]
 8003630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003634:	931a      	str	r3, [sp, #104]	; 0x68
 8003636:	4654      	mov	r4, sl
 8003638:	2205      	movs	r2, #5
 800363a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800363e:	4858      	ldr	r0, [pc, #352]	; (80037a0 <_vfiprintf_r+0x24c>)
 8003640:	f000 fcba 	bl	8003fb8 <memchr>
 8003644:	9a04      	ldr	r2, [sp, #16]
 8003646:	b9d8      	cbnz	r0, 8003680 <_vfiprintf_r+0x12c>
 8003648:	06d1      	lsls	r1, r2, #27
 800364a:	bf44      	itt	mi
 800364c:	2320      	movmi	r3, #32
 800364e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003652:	0713      	lsls	r3, r2, #28
 8003654:	bf44      	itt	mi
 8003656:	232b      	movmi	r3, #43	; 0x2b
 8003658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800365c:	f89a 3000 	ldrb.w	r3, [sl]
 8003660:	2b2a      	cmp	r3, #42	; 0x2a
 8003662:	d015      	beq.n	8003690 <_vfiprintf_r+0x13c>
 8003664:	4654      	mov	r4, sl
 8003666:	2000      	movs	r0, #0
 8003668:	f04f 0c0a 	mov.w	ip, #10
 800366c:	9a07      	ldr	r2, [sp, #28]
 800366e:	4621      	mov	r1, r4
 8003670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003674:	3b30      	subs	r3, #48	; 0x30
 8003676:	2b09      	cmp	r3, #9
 8003678:	d94e      	bls.n	8003718 <_vfiprintf_r+0x1c4>
 800367a:	b1b0      	cbz	r0, 80036aa <_vfiprintf_r+0x156>
 800367c:	9207      	str	r2, [sp, #28]
 800367e:	e014      	b.n	80036aa <_vfiprintf_r+0x156>
 8003680:	eba0 0308 	sub.w	r3, r0, r8
 8003684:	fa09 f303 	lsl.w	r3, r9, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	46a2      	mov	sl, r4
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	e7d2      	b.n	8003636 <_vfiprintf_r+0xe2>
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	1d19      	adds	r1, r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	9103      	str	r1, [sp, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	bfbb      	ittet	lt
 800369c:	425b      	neglt	r3, r3
 800369e:	f042 0202 	orrlt.w	r2, r2, #2
 80036a2:	9307      	strge	r3, [sp, #28]
 80036a4:	9307      	strlt	r3, [sp, #28]
 80036a6:	bfb8      	it	lt
 80036a8:	9204      	strlt	r2, [sp, #16]
 80036aa:	7823      	ldrb	r3, [r4, #0]
 80036ac:	2b2e      	cmp	r3, #46	; 0x2e
 80036ae:	d10c      	bne.n	80036ca <_vfiprintf_r+0x176>
 80036b0:	7863      	ldrb	r3, [r4, #1]
 80036b2:	2b2a      	cmp	r3, #42	; 0x2a
 80036b4:	d135      	bne.n	8003722 <_vfiprintf_r+0x1ce>
 80036b6:	9b03      	ldr	r3, [sp, #12]
 80036b8:	3402      	adds	r4, #2
 80036ba:	1d1a      	adds	r2, r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	9203      	str	r2, [sp, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bfb8      	it	lt
 80036c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80036c8:	9305      	str	r3, [sp, #20]
 80036ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80037a4 <_vfiprintf_r+0x250>
 80036ce:	2203      	movs	r2, #3
 80036d0:	4650      	mov	r0, sl
 80036d2:	7821      	ldrb	r1, [r4, #0]
 80036d4:	f000 fc70 	bl	8003fb8 <memchr>
 80036d8:	b140      	cbz	r0, 80036ec <_vfiprintf_r+0x198>
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	eba0 000a 	sub.w	r0, r0, sl
 80036e0:	fa03 f000 	lsl.w	r0, r3, r0
 80036e4:	9b04      	ldr	r3, [sp, #16]
 80036e6:	3401      	adds	r4, #1
 80036e8:	4303      	orrs	r3, r0
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f0:	2206      	movs	r2, #6
 80036f2:	482d      	ldr	r0, [pc, #180]	; (80037a8 <_vfiprintf_r+0x254>)
 80036f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036f8:	f000 fc5e 	bl	8003fb8 <memchr>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d03f      	beq.n	8003780 <_vfiprintf_r+0x22c>
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <_vfiprintf_r+0x258>)
 8003702:	bb1b      	cbnz	r3, 800374c <_vfiprintf_r+0x1f8>
 8003704:	9b03      	ldr	r3, [sp, #12]
 8003706:	3307      	adds	r3, #7
 8003708:	f023 0307 	bic.w	r3, r3, #7
 800370c:	3308      	adds	r3, #8
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003712:	443b      	add	r3, r7
 8003714:	9309      	str	r3, [sp, #36]	; 0x24
 8003716:	e767      	b.n	80035e8 <_vfiprintf_r+0x94>
 8003718:	460c      	mov	r4, r1
 800371a:	2001      	movs	r0, #1
 800371c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003720:	e7a5      	b.n	800366e <_vfiprintf_r+0x11a>
 8003722:	2300      	movs	r3, #0
 8003724:	f04f 0c0a 	mov.w	ip, #10
 8003728:	4619      	mov	r1, r3
 800372a:	3401      	adds	r4, #1
 800372c:	9305      	str	r3, [sp, #20]
 800372e:	4620      	mov	r0, r4
 8003730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003734:	3a30      	subs	r2, #48	; 0x30
 8003736:	2a09      	cmp	r2, #9
 8003738:	d903      	bls.n	8003742 <_vfiprintf_r+0x1ee>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0c5      	beq.n	80036ca <_vfiprintf_r+0x176>
 800373e:	9105      	str	r1, [sp, #20]
 8003740:	e7c3      	b.n	80036ca <_vfiprintf_r+0x176>
 8003742:	4604      	mov	r4, r0
 8003744:	2301      	movs	r3, #1
 8003746:	fb0c 2101 	mla	r1, ip, r1, r2
 800374a:	e7f0      	b.n	800372e <_vfiprintf_r+0x1da>
 800374c:	ab03      	add	r3, sp, #12
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	462a      	mov	r2, r5
 8003752:	4630      	mov	r0, r6
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <_vfiprintf_r+0x25c>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	f3af 8000 	nop.w
 800375c:	4607      	mov	r7, r0
 800375e:	1c78      	adds	r0, r7, #1
 8003760:	d1d6      	bne.n	8003710 <_vfiprintf_r+0x1bc>
 8003762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003764:	07d9      	lsls	r1, r3, #31
 8003766:	d405      	bmi.n	8003774 <_vfiprintf_r+0x220>
 8003768:	89ab      	ldrh	r3, [r5, #12]
 800376a:	059a      	lsls	r2, r3, #22
 800376c:	d402      	bmi.n	8003774 <_vfiprintf_r+0x220>
 800376e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003770:	f7ff fe33 	bl	80033da <__retarget_lock_release_recursive>
 8003774:	89ab      	ldrh	r3, [r5, #12]
 8003776:	065b      	lsls	r3, r3, #25
 8003778:	f53f af12 	bmi.w	80035a0 <_vfiprintf_r+0x4c>
 800377c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800377e:	e711      	b.n	80035a4 <_vfiprintf_r+0x50>
 8003780:	ab03      	add	r3, sp, #12
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	462a      	mov	r2, r5
 8003786:	4630      	mov	r0, r6
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <_vfiprintf_r+0x25c>)
 800378a:	a904      	add	r1, sp, #16
 800378c:	f000 f882 	bl	8003894 <_printf_i>
 8003790:	e7e4      	b.n	800375c <_vfiprintf_r+0x208>
 8003792:	bf00      	nop
 8003794:	08004178 	.word	0x08004178
 8003798:	08004198 	.word	0x08004198
 800379c:	08004158 	.word	0x08004158
 80037a0:	080041b8 	.word	0x080041b8
 80037a4:	080041be 	.word	0x080041be
 80037a8:	080041c2 	.word	0x080041c2
 80037ac:	00000000 	.word	0x00000000
 80037b0:	0800352f 	.word	0x0800352f

080037b4 <_printf_common>:
 80037b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b8:	4616      	mov	r6, r2
 80037ba:	4699      	mov	r9, r3
 80037bc:	688a      	ldr	r2, [r1, #8]
 80037be:	690b      	ldr	r3, [r1, #16]
 80037c0:	4607      	mov	r7, r0
 80037c2:	4293      	cmp	r3, r2
 80037c4:	bfb8      	it	lt
 80037c6:	4613      	movlt	r3, r2
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037ce:	460c      	mov	r4, r1
 80037d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037d4:	b10a      	cbz	r2, 80037da <_printf_common+0x26>
 80037d6:	3301      	adds	r3, #1
 80037d8:	6033      	str	r3, [r6, #0]
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	0699      	lsls	r1, r3, #26
 80037de:	bf42      	ittt	mi
 80037e0:	6833      	ldrmi	r3, [r6, #0]
 80037e2:	3302      	addmi	r3, #2
 80037e4:	6033      	strmi	r3, [r6, #0]
 80037e6:	6825      	ldr	r5, [r4, #0]
 80037e8:	f015 0506 	ands.w	r5, r5, #6
 80037ec:	d106      	bne.n	80037fc <_printf_common+0x48>
 80037ee:	f104 0a19 	add.w	sl, r4, #25
 80037f2:	68e3      	ldr	r3, [r4, #12]
 80037f4:	6832      	ldr	r2, [r6, #0]
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	42ab      	cmp	r3, r5
 80037fa:	dc28      	bgt.n	800384e <_printf_common+0x9a>
 80037fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003800:	1e13      	subs	r3, r2, #0
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	bf18      	it	ne
 8003806:	2301      	movne	r3, #1
 8003808:	0692      	lsls	r2, r2, #26
 800380a:	d42d      	bmi.n	8003868 <_printf_common+0xb4>
 800380c:	4649      	mov	r1, r9
 800380e:	4638      	mov	r0, r7
 8003810:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003814:	47c0      	blx	r8
 8003816:	3001      	adds	r0, #1
 8003818:	d020      	beq.n	800385c <_printf_common+0xa8>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	68e5      	ldr	r5, [r4, #12]
 800381e:	f003 0306 	and.w	r3, r3, #6
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf18      	it	ne
 8003826:	2500      	movne	r5, #0
 8003828:	6832      	ldr	r2, [r6, #0]
 800382a:	f04f 0600 	mov.w	r6, #0
 800382e:	68a3      	ldr	r3, [r4, #8]
 8003830:	bf08      	it	eq
 8003832:	1aad      	subeq	r5, r5, r2
 8003834:	6922      	ldr	r2, [r4, #16]
 8003836:	bf08      	it	eq
 8003838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800383c:	4293      	cmp	r3, r2
 800383e:	bfc4      	itt	gt
 8003840:	1a9b      	subgt	r3, r3, r2
 8003842:	18ed      	addgt	r5, r5, r3
 8003844:	341a      	adds	r4, #26
 8003846:	42b5      	cmp	r5, r6
 8003848:	d11a      	bne.n	8003880 <_printf_common+0xcc>
 800384a:	2000      	movs	r0, #0
 800384c:	e008      	b.n	8003860 <_printf_common+0xac>
 800384e:	2301      	movs	r3, #1
 8003850:	4652      	mov	r2, sl
 8003852:	4649      	mov	r1, r9
 8003854:	4638      	mov	r0, r7
 8003856:	47c0      	blx	r8
 8003858:	3001      	adds	r0, #1
 800385a:	d103      	bne.n	8003864 <_printf_common+0xb0>
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003864:	3501      	adds	r5, #1
 8003866:	e7c4      	b.n	80037f2 <_printf_common+0x3e>
 8003868:	2030      	movs	r0, #48	; 0x30
 800386a:	18e1      	adds	r1, r4, r3
 800386c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003876:	4422      	add	r2, r4
 8003878:	3302      	adds	r3, #2
 800387a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800387e:	e7c5      	b.n	800380c <_printf_common+0x58>
 8003880:	2301      	movs	r3, #1
 8003882:	4622      	mov	r2, r4
 8003884:	4649      	mov	r1, r9
 8003886:	4638      	mov	r0, r7
 8003888:	47c0      	blx	r8
 800388a:	3001      	adds	r0, #1
 800388c:	d0e6      	beq.n	800385c <_printf_common+0xa8>
 800388e:	3601      	adds	r6, #1
 8003890:	e7d9      	b.n	8003846 <_printf_common+0x92>
	...

08003894 <_printf_i>:
 8003894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003898:	7e0f      	ldrb	r7, [r1, #24]
 800389a:	4691      	mov	r9, r2
 800389c:	2f78      	cmp	r7, #120	; 0x78
 800389e:	4680      	mov	r8, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	469a      	mov	sl, r3
 80038a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038aa:	d807      	bhi.n	80038bc <_printf_i+0x28>
 80038ac:	2f62      	cmp	r7, #98	; 0x62
 80038ae:	d80a      	bhi.n	80038c6 <_printf_i+0x32>
 80038b0:	2f00      	cmp	r7, #0
 80038b2:	f000 80d9 	beq.w	8003a68 <_printf_i+0x1d4>
 80038b6:	2f58      	cmp	r7, #88	; 0x58
 80038b8:	f000 80a4 	beq.w	8003a04 <_printf_i+0x170>
 80038bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038c4:	e03a      	b.n	800393c <_printf_i+0xa8>
 80038c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ca:	2b15      	cmp	r3, #21
 80038cc:	d8f6      	bhi.n	80038bc <_printf_i+0x28>
 80038ce:	a101      	add	r1, pc, #4	; (adr r1, 80038d4 <_printf_i+0x40>)
 80038d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038d4:	0800392d 	.word	0x0800392d
 80038d8:	08003941 	.word	0x08003941
 80038dc:	080038bd 	.word	0x080038bd
 80038e0:	080038bd 	.word	0x080038bd
 80038e4:	080038bd 	.word	0x080038bd
 80038e8:	080038bd 	.word	0x080038bd
 80038ec:	08003941 	.word	0x08003941
 80038f0:	080038bd 	.word	0x080038bd
 80038f4:	080038bd 	.word	0x080038bd
 80038f8:	080038bd 	.word	0x080038bd
 80038fc:	080038bd 	.word	0x080038bd
 8003900:	08003a4f 	.word	0x08003a4f
 8003904:	08003971 	.word	0x08003971
 8003908:	08003a31 	.word	0x08003a31
 800390c:	080038bd 	.word	0x080038bd
 8003910:	080038bd 	.word	0x080038bd
 8003914:	08003a71 	.word	0x08003a71
 8003918:	080038bd 	.word	0x080038bd
 800391c:	08003971 	.word	0x08003971
 8003920:	080038bd 	.word	0x080038bd
 8003924:	080038bd 	.word	0x080038bd
 8003928:	08003a39 	.word	0x08003a39
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	602a      	str	r2, [r5, #0]
 8003934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800393c:	2301      	movs	r3, #1
 800393e:	e0a4      	b.n	8003a8a <_printf_i+0x1f6>
 8003940:	6820      	ldr	r0, [r4, #0]
 8003942:	6829      	ldr	r1, [r5, #0]
 8003944:	0606      	lsls	r6, r0, #24
 8003946:	f101 0304 	add.w	r3, r1, #4
 800394a:	d50a      	bpl.n	8003962 <_printf_i+0xce>
 800394c:	680e      	ldr	r6, [r1, #0]
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	2e00      	cmp	r6, #0
 8003952:	da03      	bge.n	800395c <_printf_i+0xc8>
 8003954:	232d      	movs	r3, #45	; 0x2d
 8003956:	4276      	negs	r6, r6
 8003958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395c:	230a      	movs	r3, #10
 800395e:	485e      	ldr	r0, [pc, #376]	; (8003ad8 <_printf_i+0x244>)
 8003960:	e019      	b.n	8003996 <_printf_i+0x102>
 8003962:	680e      	ldr	r6, [r1, #0]
 8003964:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	bf18      	it	ne
 800396c:	b236      	sxthne	r6, r6
 800396e:	e7ef      	b.n	8003950 <_printf_i+0xbc>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	1d19      	adds	r1, r3, #4
 8003976:	6029      	str	r1, [r5, #0]
 8003978:	0601      	lsls	r1, r0, #24
 800397a:	d501      	bpl.n	8003980 <_printf_i+0xec>
 800397c:	681e      	ldr	r6, [r3, #0]
 800397e:	e002      	b.n	8003986 <_printf_i+0xf2>
 8003980:	0646      	lsls	r6, r0, #25
 8003982:	d5fb      	bpl.n	800397c <_printf_i+0xe8>
 8003984:	881e      	ldrh	r6, [r3, #0]
 8003986:	2f6f      	cmp	r7, #111	; 0x6f
 8003988:	bf0c      	ite	eq
 800398a:	2308      	moveq	r3, #8
 800398c:	230a      	movne	r3, #10
 800398e:	4852      	ldr	r0, [pc, #328]	; (8003ad8 <_printf_i+0x244>)
 8003990:	2100      	movs	r1, #0
 8003992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003996:	6865      	ldr	r5, [r4, #4]
 8003998:	2d00      	cmp	r5, #0
 800399a:	bfa8      	it	ge
 800399c:	6821      	ldrge	r1, [r4, #0]
 800399e:	60a5      	str	r5, [r4, #8]
 80039a0:	bfa4      	itt	ge
 80039a2:	f021 0104 	bicge.w	r1, r1, #4
 80039a6:	6021      	strge	r1, [r4, #0]
 80039a8:	b90e      	cbnz	r6, 80039ae <_printf_i+0x11a>
 80039aa:	2d00      	cmp	r5, #0
 80039ac:	d04d      	beq.n	8003a4a <_printf_i+0x1b6>
 80039ae:	4615      	mov	r5, r2
 80039b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80039b4:	fb03 6711 	mls	r7, r3, r1, r6
 80039b8:	5dc7      	ldrb	r7, [r0, r7]
 80039ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039be:	4637      	mov	r7, r6
 80039c0:	42bb      	cmp	r3, r7
 80039c2:	460e      	mov	r6, r1
 80039c4:	d9f4      	bls.n	80039b0 <_printf_i+0x11c>
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d10b      	bne.n	80039e2 <_printf_i+0x14e>
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	07de      	lsls	r6, r3, #31
 80039ce:	d508      	bpl.n	80039e2 <_printf_i+0x14e>
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	6861      	ldr	r1, [r4, #4]
 80039d4:	4299      	cmp	r1, r3
 80039d6:	bfde      	ittt	le
 80039d8:	2330      	movle	r3, #48	; 0x30
 80039da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039e2:	1b52      	subs	r2, r2, r5
 80039e4:	6122      	str	r2, [r4, #16]
 80039e6:	464b      	mov	r3, r9
 80039e8:	4621      	mov	r1, r4
 80039ea:	4640      	mov	r0, r8
 80039ec:	f8cd a000 	str.w	sl, [sp]
 80039f0:	aa03      	add	r2, sp, #12
 80039f2:	f7ff fedf 	bl	80037b4 <_printf_common>
 80039f6:	3001      	adds	r0, #1
 80039f8:	d14c      	bne.n	8003a94 <_printf_i+0x200>
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295
 80039fe:	b004      	add	sp, #16
 8003a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a04:	4834      	ldr	r0, [pc, #208]	; (8003ad8 <_printf_i+0x244>)
 8003a06:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a0a:	6829      	ldr	r1, [r5, #0]
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a12:	6029      	str	r1, [r5, #0]
 8003a14:	061d      	lsls	r5, r3, #24
 8003a16:	d514      	bpl.n	8003a42 <_printf_i+0x1ae>
 8003a18:	07df      	lsls	r7, r3, #31
 8003a1a:	bf44      	itt	mi
 8003a1c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a20:	6023      	strmi	r3, [r4, #0]
 8003a22:	b91e      	cbnz	r6, 8003a2c <_printf_i+0x198>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	f023 0320 	bic.w	r3, r3, #32
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	e7af      	b.n	8003990 <_printf_i+0xfc>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f043 0320 	orr.w	r3, r3, #32
 8003a36:	6023      	str	r3, [r4, #0]
 8003a38:	2378      	movs	r3, #120	; 0x78
 8003a3a:	4828      	ldr	r0, [pc, #160]	; (8003adc <_printf_i+0x248>)
 8003a3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a40:	e7e3      	b.n	8003a0a <_printf_i+0x176>
 8003a42:	0659      	lsls	r1, r3, #25
 8003a44:	bf48      	it	mi
 8003a46:	b2b6      	uxthmi	r6, r6
 8003a48:	e7e6      	b.n	8003a18 <_printf_i+0x184>
 8003a4a:	4615      	mov	r5, r2
 8003a4c:	e7bb      	b.n	80039c6 <_printf_i+0x132>
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	6826      	ldr	r6, [r4, #0]
 8003a52:	1d18      	adds	r0, r3, #4
 8003a54:	6961      	ldr	r1, [r4, #20]
 8003a56:	6028      	str	r0, [r5, #0]
 8003a58:	0635      	lsls	r5, r6, #24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	d501      	bpl.n	8003a62 <_printf_i+0x1ce>
 8003a5e:	6019      	str	r1, [r3, #0]
 8003a60:	e002      	b.n	8003a68 <_printf_i+0x1d4>
 8003a62:	0670      	lsls	r0, r6, #25
 8003a64:	d5fb      	bpl.n	8003a5e <_printf_i+0x1ca>
 8003a66:	8019      	strh	r1, [r3, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4615      	mov	r5, r2
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	e7ba      	b.n	80039e6 <_printf_i+0x152>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	2100      	movs	r1, #0
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	602a      	str	r2, [r5, #0]
 8003a78:	681d      	ldr	r5, [r3, #0]
 8003a7a:	6862      	ldr	r2, [r4, #4]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 fa9b 	bl	8003fb8 <memchr>
 8003a82:	b108      	cbz	r0, 8003a88 <_printf_i+0x1f4>
 8003a84:	1b40      	subs	r0, r0, r5
 8003a86:	6060      	str	r0, [r4, #4]
 8003a88:	6863      	ldr	r3, [r4, #4]
 8003a8a:	6123      	str	r3, [r4, #16]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a92:	e7a8      	b.n	80039e6 <_printf_i+0x152>
 8003a94:	462a      	mov	r2, r5
 8003a96:	4649      	mov	r1, r9
 8003a98:	4640      	mov	r0, r8
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	47d0      	blx	sl
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	d0ab      	beq.n	80039fa <_printf_i+0x166>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	079b      	lsls	r3, r3, #30
 8003aa6:	d413      	bmi.n	8003ad0 <_printf_i+0x23c>
 8003aa8:	68e0      	ldr	r0, [r4, #12]
 8003aaa:	9b03      	ldr	r3, [sp, #12]
 8003aac:	4298      	cmp	r0, r3
 8003aae:	bfb8      	it	lt
 8003ab0:	4618      	movlt	r0, r3
 8003ab2:	e7a4      	b.n	80039fe <_printf_i+0x16a>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4632      	mov	r2, r6
 8003ab8:	4649      	mov	r1, r9
 8003aba:	4640      	mov	r0, r8
 8003abc:	47d0      	blx	sl
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d09b      	beq.n	80039fa <_printf_i+0x166>
 8003ac2:	3501      	adds	r5, #1
 8003ac4:	68e3      	ldr	r3, [r4, #12]
 8003ac6:	9903      	ldr	r1, [sp, #12]
 8003ac8:	1a5b      	subs	r3, r3, r1
 8003aca:	42ab      	cmp	r3, r5
 8003acc:	dcf2      	bgt.n	8003ab4 <_printf_i+0x220>
 8003ace:	e7eb      	b.n	8003aa8 <_printf_i+0x214>
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	f104 0619 	add.w	r6, r4, #25
 8003ad6:	e7f5      	b.n	8003ac4 <_printf_i+0x230>
 8003ad8:	080041c9 	.word	0x080041c9
 8003adc:	080041da 	.word	0x080041da

08003ae0 <_sbrk_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	4d05      	ldr	r5, [pc, #20]	; (8003afc <_sbrk_r+0x1c>)
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fc ff76 	bl	80009dc <_sbrk>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_sbrk_r+0x1a>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_sbrk_r+0x1a>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	200001d4 	.word	0x200001d4

08003b00 <__sread>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	460c      	mov	r4, r1
 8003b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b08:	f000 fab8 	bl	800407c <_read_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	bfab      	itete	ge
 8003b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b12:	89a3      	ldrhlt	r3, [r4, #12]
 8003b14:	181b      	addge	r3, r3, r0
 8003b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b1a:	bfac      	ite	ge
 8003b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1e:	81a3      	strhlt	r3, [r4, #12]
 8003b20:	bd10      	pop	{r4, pc}

08003b22 <__swrite>:
 8003b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b26:	461f      	mov	r7, r3
 8003b28:	898b      	ldrh	r3, [r1, #12]
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	460c      	mov	r4, r1
 8003b30:	4616      	mov	r6, r2
 8003b32:	d505      	bpl.n	8003b40 <__swrite+0x1e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	2200      	movs	r2, #0
 8003b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3c:	f000 f9c4 	bl	8003ec8 <_lseek_r>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	4632      	mov	r2, r6
 8003b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b56:	f000 b869 	b.w	8003c2c <_write_r>

08003b5a <__sseek>:
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b62:	f000 f9b1 	bl	8003ec8 <_lseek_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	bf15      	itete	ne
 8003b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b76:	81a3      	strheq	r3, [r4, #12]
 8003b78:	bf18      	it	ne
 8003b7a:	81a3      	strhne	r3, [r4, #12]
 8003b7c:	bd10      	pop	{r4, pc}

08003b7e <__sclose>:
 8003b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b82:	f000 b8d3 	b.w	8003d2c <_close_r>
	...

08003b88 <__swbuf_r>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	460e      	mov	r6, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	4605      	mov	r5, r0
 8003b90:	b118      	cbz	r0, 8003b9a <__swbuf_r+0x12>
 8003b92:	6983      	ldr	r3, [r0, #24]
 8003b94:	b90b      	cbnz	r3, 8003b9a <__swbuf_r+0x12>
 8003b96:	f7ff fb81 	bl	800329c <__sinit>
 8003b9a:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <__swbuf_r+0x98>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	d12b      	bne.n	8003bf8 <__swbuf_r+0x70>
 8003ba0:	686c      	ldr	r4, [r5, #4]
 8003ba2:	69a3      	ldr	r3, [r4, #24]
 8003ba4:	60a3      	str	r3, [r4, #8]
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	071a      	lsls	r2, r3, #28
 8003baa:	d52f      	bpl.n	8003c0c <__swbuf_r+0x84>
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	b36b      	cbz	r3, 8003c0c <__swbuf_r+0x84>
 8003bb0:	6923      	ldr	r3, [r4, #16]
 8003bb2:	6820      	ldr	r0, [r4, #0]
 8003bb4:	b2f6      	uxtb	r6, r6
 8003bb6:	1ac0      	subs	r0, r0, r3
 8003bb8:	6963      	ldr	r3, [r4, #20]
 8003bba:	4637      	mov	r7, r6
 8003bbc:	4283      	cmp	r3, r0
 8003bbe:	dc04      	bgt.n	8003bca <__swbuf_r+0x42>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f000 f944 	bl	8003e50 <_fflush_r>
 8003bc8:	bb30      	cbnz	r0, 8003c18 <__swbuf_r+0x90>
 8003bca:	68a3      	ldr	r3, [r4, #8]
 8003bcc:	3001      	adds	r0, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	60a3      	str	r3, [r4, #8]
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	6022      	str	r2, [r4, #0]
 8003bd8:	701e      	strb	r6, [r3, #0]
 8003bda:	6963      	ldr	r3, [r4, #20]
 8003bdc:	4283      	cmp	r3, r0
 8003bde:	d004      	beq.n	8003bea <__swbuf_r+0x62>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	07db      	lsls	r3, r3, #31
 8003be4:	d506      	bpl.n	8003bf4 <__swbuf_r+0x6c>
 8003be6:	2e0a      	cmp	r6, #10
 8003be8:	d104      	bne.n	8003bf4 <__swbuf_r+0x6c>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 f92f 	bl	8003e50 <_fflush_r>
 8003bf2:	b988      	cbnz	r0, 8003c18 <__swbuf_r+0x90>
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <__swbuf_r+0x9c>)
 8003bfa:	429c      	cmp	r4, r3
 8003bfc:	d101      	bne.n	8003c02 <__swbuf_r+0x7a>
 8003bfe:	68ac      	ldr	r4, [r5, #8]
 8003c00:	e7cf      	b.n	8003ba2 <__swbuf_r+0x1a>
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <__swbuf_r+0xa0>)
 8003c04:	429c      	cmp	r4, r3
 8003c06:	bf08      	it	eq
 8003c08:	68ec      	ldreq	r4, [r5, #12]
 8003c0a:	e7ca      	b.n	8003ba2 <__swbuf_r+0x1a>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f000 f81e 	bl	8003c50 <__swsetup_r>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d0cb      	beq.n	8003bb0 <__swbuf_r+0x28>
 8003c18:	f04f 37ff 	mov.w	r7, #4294967295
 8003c1c:	e7ea      	b.n	8003bf4 <__swbuf_r+0x6c>
 8003c1e:	bf00      	nop
 8003c20:	08004178 	.word	0x08004178
 8003c24:	08004198 	.word	0x08004198
 8003c28:	08004158 	.word	0x08004158

08003c2c <_write_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4608      	mov	r0, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	2200      	movs	r2, #0
 8003c36:	4d05      	ldr	r5, [pc, #20]	; (8003c4c <_write_r+0x20>)
 8003c38:	602a      	str	r2, [r5, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7fc fe81 	bl	8000942 <_write>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_write_r+0x1e>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_write_r+0x1e>
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	200001d4 	.word	0x200001d4

08003c50 <__swsetup_r>:
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <__swsetup_r+0xcc>)
 8003c52:	b570      	push	{r4, r5, r6, lr}
 8003c54:	681d      	ldr	r5, [r3, #0]
 8003c56:	4606      	mov	r6, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	b125      	cbz	r5, 8003c66 <__swsetup_r+0x16>
 8003c5c:	69ab      	ldr	r3, [r5, #24]
 8003c5e:	b913      	cbnz	r3, 8003c66 <__swsetup_r+0x16>
 8003c60:	4628      	mov	r0, r5
 8003c62:	f7ff fb1b 	bl	800329c <__sinit>
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <__swsetup_r+0xd0>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d10f      	bne.n	8003c8c <__swsetup_r+0x3c>
 8003c6c:	686c      	ldr	r4, [r5, #4]
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c74:	0719      	lsls	r1, r3, #28
 8003c76:	d42c      	bmi.n	8003cd2 <__swsetup_r+0x82>
 8003c78:	06dd      	lsls	r5, r3, #27
 8003c7a:	d411      	bmi.n	8003ca0 <__swsetup_r+0x50>
 8003c7c:	2309      	movs	r3, #9
 8003c7e:	6033      	str	r3, [r6, #0]
 8003c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	81a3      	strh	r3, [r4, #12]
 8003c8a:	e03e      	b.n	8003d0a <__swsetup_r+0xba>
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <__swsetup_r+0xd4>)
 8003c8e:	429c      	cmp	r4, r3
 8003c90:	d101      	bne.n	8003c96 <__swsetup_r+0x46>
 8003c92:	68ac      	ldr	r4, [r5, #8]
 8003c94:	e7eb      	b.n	8003c6e <__swsetup_r+0x1e>
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <__swsetup_r+0xd8>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	bf08      	it	eq
 8003c9c:	68ec      	ldreq	r4, [r5, #12]
 8003c9e:	e7e6      	b.n	8003c6e <__swsetup_r+0x1e>
 8003ca0:	0758      	lsls	r0, r3, #29
 8003ca2:	d512      	bpl.n	8003cca <__swsetup_r+0x7a>
 8003ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca6:	b141      	cbz	r1, 8003cba <__swsetup_r+0x6a>
 8003ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cac:	4299      	cmp	r1, r3
 8003cae:	d002      	beq.n	8003cb6 <__swsetup_r+0x66>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f000 f99b 	bl	8003fec <_free_r>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8003cba:	89a3      	ldrh	r3, [r4, #12]
 8003cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	6063      	str	r3, [r4, #4]
 8003cc6:	6923      	ldr	r3, [r4, #16]
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	89a3      	ldrh	r3, [r4, #12]
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	b94b      	cbnz	r3, 8003cea <__swsetup_r+0x9a>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce0:	d003      	beq.n	8003cea <__swsetup_r+0x9a>
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	f000 f927 	bl	8003f38 <__smakebuf_r>
 8003cea:	89a0      	ldrh	r0, [r4, #12]
 8003cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cf0:	f010 0301 	ands.w	r3, r0, #1
 8003cf4:	d00a      	beq.n	8003d0c <__swsetup_r+0xbc>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60a3      	str	r3, [r4, #8]
 8003cfa:	6963      	ldr	r3, [r4, #20]
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	61a3      	str	r3, [r4, #24]
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	b943      	cbnz	r3, 8003d16 <__swsetup_r+0xc6>
 8003d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d08:	d1ba      	bne.n	8003c80 <__swsetup_r+0x30>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	0781      	lsls	r1, r0, #30
 8003d0e:	bf58      	it	pl
 8003d10:	6963      	ldrpl	r3, [r4, #20]
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	e7f4      	b.n	8003d00 <__swsetup_r+0xb0>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e7f7      	b.n	8003d0a <__swsetup_r+0xba>
 8003d1a:	bf00      	nop
 8003d1c:	20000078 	.word	0x20000078
 8003d20:	08004178 	.word	0x08004178
 8003d24:	08004198 	.word	0x08004198
 8003d28:	08004158 	.word	0x08004158

08003d2c <_close_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	2300      	movs	r3, #0
 8003d30:	4d05      	ldr	r5, [pc, #20]	; (8003d48 <_close_r+0x1c>)
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	f7fc fe1f 	bl	800097a <_close>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_close_r+0x1a>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_close_r+0x1a>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	200001d4 	.word	0x200001d4

08003d4c <__sflush_r>:
 8003d4c:	898a      	ldrh	r2, [r1, #12]
 8003d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d50:	4605      	mov	r5, r0
 8003d52:	0710      	lsls	r0, r2, #28
 8003d54:	460c      	mov	r4, r1
 8003d56:	d457      	bmi.n	8003e08 <__sflush_r+0xbc>
 8003d58:	684b      	ldr	r3, [r1, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dc04      	bgt.n	8003d68 <__sflush_r+0x1c>
 8003d5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dc01      	bgt.n	8003d68 <__sflush_r+0x1c>
 8003d64:	2000      	movs	r0, #0
 8003d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d6a:	2e00      	cmp	r6, #0
 8003d6c:	d0fa      	beq.n	8003d64 <__sflush_r+0x18>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d74:	682f      	ldr	r7, [r5, #0]
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	d032      	beq.n	8003de0 <__sflush_r+0x94>
 8003d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	075a      	lsls	r2, r3, #29
 8003d80:	d505      	bpl.n	8003d8e <__sflush_r+0x42>
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	1ac0      	subs	r0, r0, r3
 8003d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d88:	b10b      	cbz	r3, 8003d8e <__sflush_r+0x42>
 8003d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8c:	1ac0      	subs	r0, r0, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	4602      	mov	r2, r0
 8003d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d94:	4628      	mov	r0, r5
 8003d96:	6a21      	ldr	r1, [r4, #32]
 8003d98:	47b0      	blx	r6
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	d106      	bne.n	8003dae <__sflush_r+0x62>
 8003da0:	6829      	ldr	r1, [r5, #0]
 8003da2:	291d      	cmp	r1, #29
 8003da4:	d82c      	bhi.n	8003e00 <__sflush_r+0xb4>
 8003da6:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <__sflush_r+0x100>)
 8003da8:	40ca      	lsrs	r2, r1
 8003daa:	07d6      	lsls	r6, r2, #31
 8003dac:	d528      	bpl.n	8003e00 <__sflush_r+0xb4>
 8003dae:	2200      	movs	r2, #0
 8003db0:	6062      	str	r2, [r4, #4]
 8003db2:	6922      	ldr	r2, [r4, #16]
 8003db4:	04d9      	lsls	r1, r3, #19
 8003db6:	6022      	str	r2, [r4, #0]
 8003db8:	d504      	bpl.n	8003dc4 <__sflush_r+0x78>
 8003dba:	1c42      	adds	r2, r0, #1
 8003dbc:	d101      	bne.n	8003dc2 <__sflush_r+0x76>
 8003dbe:	682b      	ldr	r3, [r5, #0]
 8003dc0:	b903      	cbnz	r3, 8003dc4 <__sflush_r+0x78>
 8003dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8003dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dc6:	602f      	str	r7, [r5, #0]
 8003dc8:	2900      	cmp	r1, #0
 8003dca:	d0cb      	beq.n	8003d64 <__sflush_r+0x18>
 8003dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	d002      	beq.n	8003dda <__sflush_r+0x8e>
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f000 f909 	bl	8003fec <_free_r>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8003dde:	e7c2      	b.n	8003d66 <__sflush_r+0x1a>
 8003de0:	6a21      	ldr	r1, [r4, #32]
 8003de2:	2301      	movs	r3, #1
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b0      	blx	r6
 8003de8:	1c41      	adds	r1, r0, #1
 8003dea:	d1c7      	bne.n	8003d7c <__sflush_r+0x30>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0c4      	beq.n	8003d7c <__sflush_r+0x30>
 8003df2:	2b1d      	cmp	r3, #29
 8003df4:	d001      	beq.n	8003dfa <__sflush_r+0xae>
 8003df6:	2b16      	cmp	r3, #22
 8003df8:	d101      	bne.n	8003dfe <__sflush_r+0xb2>
 8003dfa:	602f      	str	r7, [r5, #0]
 8003dfc:	e7b2      	b.n	8003d64 <__sflush_r+0x18>
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	e7ae      	b.n	8003d66 <__sflush_r+0x1a>
 8003e08:	690f      	ldr	r7, [r1, #16]
 8003e0a:	2f00      	cmp	r7, #0
 8003e0c:	d0aa      	beq.n	8003d64 <__sflush_r+0x18>
 8003e0e:	0793      	lsls	r3, r2, #30
 8003e10:	bf18      	it	ne
 8003e12:	2300      	movne	r3, #0
 8003e14:	680e      	ldr	r6, [r1, #0]
 8003e16:	bf08      	it	eq
 8003e18:	694b      	ldreq	r3, [r1, #20]
 8003e1a:	1bf6      	subs	r6, r6, r7
 8003e1c:	600f      	str	r7, [r1, #0]
 8003e1e:	608b      	str	r3, [r1, #8]
 8003e20:	2e00      	cmp	r6, #0
 8003e22:	dd9f      	ble.n	8003d64 <__sflush_r+0x18>
 8003e24:	4633      	mov	r3, r6
 8003e26:	463a      	mov	r2, r7
 8003e28:	4628      	mov	r0, r5
 8003e2a:	6a21      	ldr	r1, [r4, #32]
 8003e2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003e30:	47e0      	blx	ip
 8003e32:	2800      	cmp	r0, #0
 8003e34:	dc06      	bgt.n	8003e44 <__sflush_r+0xf8>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	e790      	b.n	8003d66 <__sflush_r+0x1a>
 8003e44:	4407      	add	r7, r0
 8003e46:	1a36      	subs	r6, r6, r0
 8003e48:	e7ea      	b.n	8003e20 <__sflush_r+0xd4>
 8003e4a:	bf00      	nop
 8003e4c:	20400001 	.word	0x20400001

08003e50 <_fflush_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	4605      	mov	r5, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	b913      	cbnz	r3, 8003e60 <_fflush_r+0x10>
 8003e5a:	2500      	movs	r5, #0
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	b118      	cbz	r0, 8003e6a <_fflush_r+0x1a>
 8003e62:	6983      	ldr	r3, [r0, #24]
 8003e64:	b90b      	cbnz	r3, 8003e6a <_fflush_r+0x1a>
 8003e66:	f7ff fa19 	bl	800329c <__sinit>
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <_fflush_r+0x6c>)
 8003e6c:	429c      	cmp	r4, r3
 8003e6e:	d11b      	bne.n	8003ea8 <_fflush_r+0x58>
 8003e70:	686c      	ldr	r4, [r5, #4]
 8003e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ef      	beq.n	8003e5a <_fflush_r+0xa>
 8003e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e7c:	07d0      	lsls	r0, r2, #31
 8003e7e:	d404      	bmi.n	8003e8a <_fflush_r+0x3a>
 8003e80:	0599      	lsls	r1, r3, #22
 8003e82:	d402      	bmi.n	8003e8a <_fflush_r+0x3a>
 8003e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e86:	f7ff faa7 	bl	80033d8 <__retarget_lock_acquire_recursive>
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	f7ff ff5d 	bl	8003d4c <__sflush_r>
 8003e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e94:	4605      	mov	r5, r0
 8003e96:	07da      	lsls	r2, r3, #31
 8003e98:	d4e0      	bmi.n	8003e5c <_fflush_r+0xc>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	059b      	lsls	r3, r3, #22
 8003e9e:	d4dd      	bmi.n	8003e5c <_fflush_r+0xc>
 8003ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea2:	f7ff fa9a 	bl	80033da <__retarget_lock_release_recursive>
 8003ea6:	e7d9      	b.n	8003e5c <_fflush_r+0xc>
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <_fflush_r+0x70>)
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	d101      	bne.n	8003eb2 <_fflush_r+0x62>
 8003eae:	68ac      	ldr	r4, [r5, #8]
 8003eb0:	e7df      	b.n	8003e72 <_fflush_r+0x22>
 8003eb2:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <_fflush_r+0x74>)
 8003eb4:	429c      	cmp	r4, r3
 8003eb6:	bf08      	it	eq
 8003eb8:	68ec      	ldreq	r4, [r5, #12]
 8003eba:	e7da      	b.n	8003e72 <_fflush_r+0x22>
 8003ebc:	08004178 	.word	0x08004178
 8003ec0:	08004198 	.word	0x08004198
 8003ec4:	08004158 	.word	0x08004158

08003ec8 <_lseek_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4d05      	ldr	r5, [pc, #20]	; (8003ee8 <_lseek_r+0x20>)
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fc fd73 	bl	80009c2 <_lseek>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_lseek_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_lseek_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200001d4 	.word	0x200001d4

08003eec <__swhatbuf_r>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	460e      	mov	r6, r1
 8003ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	461d      	mov	r5, r3
 8003efa:	b096      	sub	sp, #88	; 0x58
 8003efc:	da08      	bge.n	8003f10 <__swhatbuf_r+0x24>
 8003efe:	2200      	movs	r2, #0
 8003f00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f04:	602a      	str	r2, [r5, #0]
 8003f06:	061a      	lsls	r2, r3, #24
 8003f08:	d410      	bmi.n	8003f2c <__swhatbuf_r+0x40>
 8003f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0e:	e00e      	b.n	8003f2e <__swhatbuf_r+0x42>
 8003f10:	466a      	mov	r2, sp
 8003f12:	f000 f8c5 	bl	80040a0 <_fstat_r>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	dbf1      	blt.n	8003efe <__swhatbuf_r+0x12>
 8003f1a:	9a01      	ldr	r2, [sp, #4]
 8003f1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f24:	425a      	negs	r2, r3
 8003f26:	415a      	adcs	r2, r3
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	e7ee      	b.n	8003f0a <__swhatbuf_r+0x1e>
 8003f2c:	2340      	movs	r3, #64	; 0x40
 8003f2e:	2000      	movs	r0, #0
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	b016      	add	sp, #88	; 0x58
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f38 <__smakebuf_r>:
 8003f38:	898b      	ldrh	r3, [r1, #12]
 8003f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f3c:	079d      	lsls	r5, r3, #30
 8003f3e:	4606      	mov	r6, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	d507      	bpl.n	8003f54 <__smakebuf_r+0x1c>
 8003f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	6163      	str	r3, [r4, #20]
 8003f50:	b002      	add	sp, #8
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	466a      	mov	r2, sp
 8003f56:	ab01      	add	r3, sp, #4
 8003f58:	f7ff ffc8 	bl	8003eec <__swhatbuf_r>
 8003f5c:	9900      	ldr	r1, [sp, #0]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff fa5b 	bl	800341c <_malloc_r>
 8003f66:	b948      	cbnz	r0, 8003f7c <__smakebuf_r+0x44>
 8003f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6c:	059a      	lsls	r2, r3, #22
 8003f6e:	d4ef      	bmi.n	8003f50 <__smakebuf_r+0x18>
 8003f70:	f023 0303 	bic.w	r3, r3, #3
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	e7e3      	b.n	8003f44 <__smakebuf_r+0xc>
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <__smakebuf_r+0x7c>)
 8003f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	6020      	str	r0, [r4, #0]
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	9b00      	ldr	r3, [sp, #0]
 8003f8c:	6120      	str	r0, [r4, #16]
 8003f8e:	6163      	str	r3, [r4, #20]
 8003f90:	9b01      	ldr	r3, [sp, #4]
 8003f92:	b15b      	cbz	r3, 8003fac <__smakebuf_r+0x74>
 8003f94:	4630      	mov	r0, r6
 8003f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f9a:	f000 f893 	bl	80040c4 <_isatty_r>
 8003f9e:	b128      	cbz	r0, 8003fac <__smakebuf_r+0x74>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	81a3      	strh	r3, [r4, #12]
 8003fac:	89a0      	ldrh	r0, [r4, #12]
 8003fae:	4305      	orrs	r5, r0
 8003fb0:	81a5      	strh	r5, [r4, #12]
 8003fb2:	e7cd      	b.n	8003f50 <__smakebuf_r+0x18>
 8003fb4:	08003235 	.word	0x08003235

08003fb8 <memchr>:
 8003fb8:	4603      	mov	r3, r0
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	b2c9      	uxtb	r1, r1
 8003fbe:	4402      	add	r2, r0
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	d101      	bne.n	8003fca <memchr+0x12>
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	e003      	b.n	8003fd2 <memchr+0x1a>
 8003fca:	7804      	ldrb	r4, [r0, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	428c      	cmp	r4, r1
 8003fd0:	d1f6      	bne.n	8003fc0 <memchr+0x8>
 8003fd2:	bd10      	pop	{r4, pc}

08003fd4 <__malloc_lock>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	; (8003fdc <__malloc_lock+0x8>)
 8003fd6:	f7ff b9ff 	b.w	80033d8 <__retarget_lock_acquire_recursive>
 8003fda:	bf00      	nop
 8003fdc:	200001c8 	.word	0x200001c8

08003fe0 <__malloc_unlock>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	; (8003fe8 <__malloc_unlock+0x8>)
 8003fe2:	f7ff b9fa 	b.w	80033da <__retarget_lock_release_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	200001c8 	.word	0x200001c8

08003fec <_free_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4605      	mov	r5, r0
 8003ff0:	2900      	cmp	r1, #0
 8003ff2:	d040      	beq.n	8004076 <_free_r+0x8a>
 8003ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff8:	1f0c      	subs	r4, r1, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfb8      	it	lt
 8003ffe:	18e4      	addlt	r4, r4, r3
 8004000:	f7ff ffe8 	bl	8003fd4 <__malloc_lock>
 8004004:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <_free_r+0x8c>)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	b933      	cbnz	r3, 8004018 <_free_r+0x2c>
 800400a:	6063      	str	r3, [r4, #4]
 800400c:	6014      	str	r4, [r2, #0]
 800400e:	4628      	mov	r0, r5
 8004010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004014:	f7ff bfe4 	b.w	8003fe0 <__malloc_unlock>
 8004018:	42a3      	cmp	r3, r4
 800401a:	d908      	bls.n	800402e <_free_r+0x42>
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	1821      	adds	r1, r4, r0
 8004020:	428b      	cmp	r3, r1
 8004022:	bf01      	itttt	eq
 8004024:	6819      	ldreq	r1, [r3, #0]
 8004026:	685b      	ldreq	r3, [r3, #4]
 8004028:	1809      	addeq	r1, r1, r0
 800402a:	6021      	streq	r1, [r4, #0]
 800402c:	e7ed      	b.n	800400a <_free_r+0x1e>
 800402e:	461a      	mov	r2, r3
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b10b      	cbz	r3, 8004038 <_free_r+0x4c>
 8004034:	42a3      	cmp	r3, r4
 8004036:	d9fa      	bls.n	800402e <_free_r+0x42>
 8004038:	6811      	ldr	r1, [r2, #0]
 800403a:	1850      	adds	r0, r2, r1
 800403c:	42a0      	cmp	r0, r4
 800403e:	d10b      	bne.n	8004058 <_free_r+0x6c>
 8004040:	6820      	ldr	r0, [r4, #0]
 8004042:	4401      	add	r1, r0
 8004044:	1850      	adds	r0, r2, r1
 8004046:	4283      	cmp	r3, r0
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	d1e0      	bne.n	800400e <_free_r+0x22>
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	4401      	add	r1, r0
 8004052:	6011      	str	r1, [r2, #0]
 8004054:	6053      	str	r3, [r2, #4]
 8004056:	e7da      	b.n	800400e <_free_r+0x22>
 8004058:	d902      	bls.n	8004060 <_free_r+0x74>
 800405a:	230c      	movs	r3, #12
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	e7d6      	b.n	800400e <_free_r+0x22>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	1821      	adds	r1, r4, r0
 8004064:	428b      	cmp	r3, r1
 8004066:	bf01      	itttt	eq
 8004068:	6819      	ldreq	r1, [r3, #0]
 800406a:	685b      	ldreq	r3, [r3, #4]
 800406c:	1809      	addeq	r1, r1, r0
 800406e:	6021      	streq	r1, [r4, #0]
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	6054      	str	r4, [r2, #4]
 8004074:	e7cb      	b.n	800400e <_free_r+0x22>
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	200001cc 	.word	0x200001cc

0800407c <_read_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	2200      	movs	r2, #0
 8004086:	4d05      	ldr	r5, [pc, #20]	; (800409c <_read_r+0x20>)
 8004088:	602a      	str	r2, [r5, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f7fc fc3c 	bl	8000908 <_read>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_read_r+0x1e>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_read_r+0x1e>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200001d4 	.word	0x200001d4

080040a0 <_fstat_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	2300      	movs	r3, #0
 80040a4:	4d06      	ldr	r5, [pc, #24]	; (80040c0 <_fstat_r+0x20>)
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	602b      	str	r3, [r5, #0]
 80040ae:	f7fc fc6f 	bl	8000990 <_fstat>
 80040b2:	1c43      	adds	r3, r0, #1
 80040b4:	d102      	bne.n	80040bc <_fstat_r+0x1c>
 80040b6:	682b      	ldr	r3, [r5, #0]
 80040b8:	b103      	cbz	r3, 80040bc <_fstat_r+0x1c>
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	bd38      	pop	{r3, r4, r5, pc}
 80040be:	bf00      	nop
 80040c0:	200001d4 	.word	0x200001d4

080040c4 <_isatty_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	2300      	movs	r3, #0
 80040c8:	4d05      	ldr	r5, [pc, #20]	; (80040e0 <_isatty_r+0x1c>)
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	f7fc fc6d 	bl	80009ae <_isatty>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_isatty_r+0x1a>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_isatty_r+0x1a>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200001d4 	.word	0x200001d4

080040e4 <_init>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr

080040f0 <_fini>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr
